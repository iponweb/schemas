{
  "definitions": {
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps": {
      "description": "JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).",
      "type": "object",
      "properties": {
        "$ref": {
          "type": "string"
        },
        "$schema": {
          "type": "string"
        },
        "additionalItems": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool"
        },
        "additionalProperties": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool"
        },
        "allOf": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          }
        },
        "anyOf": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          }
        },
        "default": {
          "description": "default is a default value for undefined object fields. Defaulting is a beta feature under the CustomResourceDefaulting feature gate. Defaulting requires spec.preserveUnknownFields to be false.",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
        },
        "definitions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          }
        },
        "dependencies": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrStringArray"
          }
        },
        "description": {
          "type": "string"
        },
        "enum": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
          }
        },
        "example": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
        },
        "exclusiveMaximum": {
          "type": "boolean"
        },
        "exclusiveMinimum": {
          "type": "boolean"
        },
        "externalDocs": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ExternalDocumentation"
        },
        "format": {
          "description": "format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated:\n\n- bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - uuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - isbn: an ISBN10 or ISBN13 number string like \"0321751043\" or \"978-0321751041\" - isbn10: an ISBN10 number string like \"0321751043\" - isbn13: an ISBN13 number string like \"978-0321751041\" - creditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\\d{3}[- ]?\\d{2}[- ]?\\d{4}$ - hexcolor: an hexadecimal color code like \"#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like \"rgb(255,255,2559\" - byte: base64 encoded binary data - password: any kind of string - date: a date string like \"2006-01-02\" as defined by full-date in RFC3339 - duration: a duration string like \"22 ns\" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like \"2014-12-15T19:30:20.000Z\" as defined by date-time in RFC3339.",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrArray"
        },
        "maxItems": {
          "type": "integer",
          "format": "int64"
        },
        "maxLength": {
          "type": "integer",
          "format": "int64"
        },
        "maxProperties": {
          "type": "integer",
          "format": "int64"
        },
        "maximum": {
          "type": "number",
          "format": "double"
        },
        "minItems": {
          "type": "integer",
          "format": "int64"
        },
        "minLength": {
          "type": "integer",
          "format": "int64"
        },
        "minProperties": {
          "type": "integer",
          "format": "int64"
        },
        "minimum": {
          "type": "number",
          "format": "double"
        },
        "multipleOf": {
          "type": "number",
          "format": "double"
        },
        "not": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
        },
        "nullable": {
          "type": "boolean"
        },
        "oneOf": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          }
        },
        "pattern": {
          "type": "string"
        },
        "patternProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          }
        },
        "required": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "uniqueItems": {
          "type": "boolean"
        },
        "x-kubernetes-embedded-resource": {
          "description": "x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is allowed to further restrict the embedded object. kind, apiVersion and metadata are validated automatically. x-kubernetes-preserve-unknown-fields is allowed to be true, but does not have to be if the object is fully specified (up to kind, apiVersion, metadata).",
          "type": "boolean"
        },
        "x-kubernetes-int-or-string": {
          "description": "x-kubernetes-int-or-string specifies that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of anyOf is permitted if following one of the following patterns:\n\n1) anyOf:\n   - type: integer\n   - type: string\n2) allOf:\n   - anyOf:\n     - type: integer\n     - type: string\n   - ... zero or more",
          "type": "boolean"
        },
        "x-kubernetes-list-map-keys": {
          "description": "x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type `map` by specifying the keys used as the index of the map.\n\nThis tag MUST only be used on lists that have the \"x-kubernetes-list-type\" extension set to \"map\". Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported).\n\nThe properties specified must either be required or have a default value, to ensure those properties are present for all list items.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "x-kubernetes-list-type": {
          "description": "x-kubernetes-list-type annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values:\n\n1) `atomic`: the list is treated as a single entity, like a scalar.\n     Atomic lists will be entirely replaced when updated. This extension\n     may be used on any type of list (struct, scalar, ...).\n2) `set`:\n     Sets are lists that must not have multiple items with the same value. Each\n     value must be a scalar, an object with x-kubernetes-map-type `atomic` or an\n     array with x-kubernetes-list-type `atomic`.\n3) `map`:\n     These lists are like maps in that their elements have a non-index key\n     used to identify them. Order is preserved upon merge. The map tag\n     must only be used on a list with elements of type object.\nDefaults to atomic for arrays.",
          "type": "string"
        },
        "x-kubernetes-map-type": {
          "description": "x-kubernetes-map-type annotates an object to further describe its topology. This extension must only be used when type is object and may have 2 possible values:\n\n1) `granular`:\n     These maps are actual maps (key-value pairs) and each fields are independent\n     from each other (they can each be manipulated by separate actors). This is\n     the default behaviour for all maps.\n2) `atomic`: the list is treated as a single entity, like a scalar.\n     Atomic maps will be entirely replaced when updated.",
          "type": "string"
        },
        "x-kubernetes-preserve-unknown-fields": {
          "description": "x-kubernetes-preserve-unknown-fields stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested properties or additionalProperties are specified in the schema. This can either be true or undefined. False is forbidden.",
          "type": "boolean"
        },
        "x-kubernetes-validations": {
          "description": "x-kubernetes-validations describes a list of validation rules written in the CEL expression language. This field is an alpha-level. Using this field requires the feature gate `CustomResourceValidationExpressions` to be enabled.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ValidationRule"
          },
          "x-kubernetes-list-map-keys": [
            "rule"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "rule",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1": {
      "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector": {
      "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
      "type": "object",
      "properties": {
        "matchExpressions": {
          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement"
          }
        },
        "matchLabels": {
          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-kubernetes-map-type": "atomic",
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement": {
      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "type": "object",
      "required": [
        "key",
        "operator"
      ],
      "properties": {
        "key": {
          "description": "key is the label key that the selector applies to.",
          "type": "string",
          "default": "",
          "x-kubernetes-patch-merge-key": "key",
          "x-kubernetes-patch-strategy": "merge"
        },
        "operator": {
          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
          "type": "string",
          "default": ""
        },
        "values": {
          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry": {
      "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
          "type": "string"
        },
        "fieldsType": {
          "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
          "type": "string"
        },
        "fieldsV1": {
          "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1"
        },
        "manager": {
          "description": "Manager is an identifier of the workflow managing these fields.",
          "type": "string"
        },
        "operation": {
          "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
          "type": "string"
        },
        "subresource": {
          "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
          "type": "string"
        },
        "time": {
          "description": "Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "clusterName": {
          "description": "Deprecated: ClusterName is a legacy field that was always cleared by the system and never used; it will be removed completely in 1.25.\n\nThe name in the go struct is changed to help clients detect accidental use.",
          "type": "string"
        },
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "type": "integer",
          "format": "int64"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          },
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "type": "integer",
          "format": "int64"
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference"
          },
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference": {
      "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
      "type": "object",
      "required": [
        "apiVersion",
        "kind",
        "name",
        "uid"
      ],
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string",
          "default": ""
        },
        "blockOwnerDeletion": {
          "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
          "type": "boolean"
        },
        "controller": {
          "description": "If true, this reference points to the managing controller.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "default": ""
        },
        "name": {
          "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string",
          "default": ""
        },
        "uid": {
          "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string",
          "default": ""
        }
      },
      "x-kubernetes-map-type": "atomic",
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Time": {
      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
      "type": "string",
      "format": "date-time"
    },
    "sh.gatekeeper.apis.config.v1alpha1.Config": {
      "description": "Config is the Schema for the configs API.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.config.v1alpha1.ConfigSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.config.v1alpha1.ConfigStatus"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.config.v1alpha1.ConfigSpec": {
      "description": "ConfigSpec defines the desired state of Config.",
      "type": "object",
      "properties": {
        "match": {
          "description": "Configuration for namespace exclusion",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.apis.config.v1alpha1.MatchEntry"
          }
        },
        "readiness": {
          "description": "Configuration for readiness tracker",
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.config.v1alpha1.ReadinessSpec"
        },
        "sync": {
          "description": "Configuration for syncing k8s objects",
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.config.v1alpha1.Sync"
        },
        "validation": {
          "description": "Configuration for validation",
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.config.v1alpha1.Validation"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.config.v1alpha1.ConfigStatus": {
      "description": "ConfigStatus defines the observed state of Config.",
      "type": "object"
    },
    "sh.gatekeeper.apis.config.v1alpha1.GVK": {
      "type": "object",
      "properties": {
        "group": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.config.v1alpha1.MatchEntry": {
      "type": "object",
      "properties": {
        "excludedNamespaces": {
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "processes": {
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.config.v1alpha1.ReadinessSpec": {
      "type": "object",
      "properties": {
        "statsEnabled": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.config.v1alpha1.Sync": {
      "type": "object",
      "properties": {
        "syncOnly": {
          "description": "If non-empty, only entries on this list will be replicated into OPA",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.apis.config.v1alpha1.SyncOnlyEntry"
          }
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.config.v1alpha1.SyncOnlyEntry": {
      "type": "object",
      "properties": {
        "group": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.config.v1alpha1.Trace": {
      "type": "object",
      "properties": {
        "dump": {
          "description": "Also dump the state of OPA with the trace. Set to `All` to dump everything.",
          "type": "string"
        },
        "kind": {
          "description": "Only trace requests of the following GroupVersionKind",
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.config.v1alpha1.GVK"
        },
        "user": {
          "description": "Only trace requests from the specified user",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.config.v1alpha1.Validation": {
      "type": "object",
      "properties": {
        "traces": {
          "description": "List of requests to trace. Both \"user\" and \"kinds\" must be specified",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.apis.config.v1alpha1.Trace"
          }
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.expansion.v1alpha1.ExpansionTemplate": {
      "description": "ExpansionTemplate is the Schema for the ExpansionTemplate API.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.expansion.v1alpha1.ExpansionTemplateSpec"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.expansion.v1alpha1.ExpansionTemplateSpec": {
      "description": "ExpansionTemplateSpec defines the desired state of ExpansionTemplate.",
      "type": "object",
      "properties": {
        "applyTo": {
          "description": "ApplyTo lists the specific groups, versions and kinds of generator resources which will be expanded.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.pkg.mutation.match.ApplyTo"
          }
        },
        "enforcementAction": {
          "description": "EnforcementAction specifies the enforcement action to be used for resources matching the ExpansionTemplate. Specifying an empty value will use the enforcement action specified by the Constraint in violation.",
          "type": "string"
        },
        "generatedGVK": {
          "description": "GeneratedGVK specifies the GVK of the resources which the generator resource creates.",
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.expansion.v1alpha1.GeneratedGVK"
        },
        "templateSource": {
          "description": "TemplateSource specifies the source field on the generator resource to use as the base for expanded resource. For Pod-creating generators, this is usually spec.template",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.expansion.v1alpha1.GeneratedGVK": {
      "type": "object",
      "properties": {
        "group": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1.Assign": {
      "description": "Assign is the Schema for the assign API.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1.AssignSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1.AssignStatus"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1.AssignField": {
      "type": "object",
      "properties": {
        "externalData": {
          "description": "ExternalData describes the external data provider to be used for mutation.",
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1.ExternalData"
        },
        "fromMetadata": {
          "description": "FromMetadata assigns a value from the specified metadata field.",
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1.FromMetadata"
        },
        "value": {
          "description": "Value is a constant value that will be assigned to `location`",
          "$ref": "#/definitions/sh.gatekeeper.pkg.mutation.types.Anything"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1.AssignMetadata": {
      "description": "AssignMetadata is the Schema for the assignmetadata API.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1.AssignMetadataSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1.AssignMetadataStatus"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1.AssignMetadataSpec": {
      "description": "AssignMetadataSpec defines the desired state of AssignMetadata.",
      "type": "object",
      "properties": {
        "location": {
          "type": "string"
        },
        "match": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.pkg.mutation.match.Match"
        },
        "parameters": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1.MetadataParameters"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1.AssignMetadataStatus": {
      "description": "AssignMetadataStatus defines the observed state of AssignMetadata.",
      "type": "object",
      "properties": {
        "byPod": {
          "description": "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"make\" to regenerate code after modifying this file",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.apis.status.v1beta1.MutatorPodStatusStatus"
          }
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1.AssignSpec": {
      "description": "AssignSpec defines the desired state of Assign.",
      "type": "object",
      "properties": {
        "applyTo": {
          "description": "ApplyTo lists the specific groups, versions and kinds a mutation will be applied to. This is necessary because every mutation implies part of an object schema and object schemas are associated with specific GVKs.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.pkg.mutation.match.ApplyTo"
          }
        },
        "location": {
          "description": "Location describes the path to be mutated, for example: `spec.containers[name: main]`.",
          "type": "string"
        },
        "match": {
          "description": "Match allows the user to limit which resources get mutated. Individual match criteria are AND-ed together. An undefined match criteria matches everything.",
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.pkg.mutation.match.Match"
        },
        "parameters": {
          "description": "Parameters define the behavior of the mutator.",
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1.Parameters"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1.AssignStatus": {
      "description": "AssignStatus defines the observed state of Assign.",
      "type": "object",
      "properties": {
        "byPod": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.apis.status.v1beta1.MutatorPodStatusStatus"
          }
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1.ExternalData": {
      "description": "ExternalData describes the external data source to use for the mutation.",
      "type": "object",
      "properties": {
        "dataSource": {
          "description": "DataSource specifies where to extract the data that will be sent to the external data provider as parameters.",
          "type": "string"
        },
        "default": {
          "description": "Default specifies the default value to use when the external data provider returns an error and the failure policy is set to \"UseDefault\".",
          "type": "string"
        },
        "failurePolicy": {
          "description": "FailurePolicy specifies the policy to apply when the external data provider returns an error.",
          "type": "string"
        },
        "provider": {
          "description": "Provider is the name of the external data provider.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1.FromMetadata": {
      "type": "object",
      "properties": {
        "field": {
          "description": "Field specifies which metadata field provides the assigned value. Valid fields are `namespace` and `name`.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1.MetadataParameters": {
      "type": "object",
      "properties": {
        "assign": {
          "description": "Assign.value holds the value to be assigned",
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1.AssignField"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1.ModifySet": {
      "description": "ModifySet allows the user to modify non-keyed lists, such as the list of arguments to a container.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1.ModifySetSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1.ModifySetStatus"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1.ModifySetParameters": {
      "type": "object",
      "properties": {
        "operation": {
          "description": "Operation describes whether values should be merged in (\"merge\"), or pruned (\"prune\"). Default value is \"merge\"",
          "type": "string"
        },
        "pathTests": {
          "description": "PathTests are a series of existence tests that can be checked before a mutation is applied",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1.PathTest"
          }
        },
        "values": {
          "description": "Values describes the values provided to the operation as `values.fromList`.",
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1.Values"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1.ModifySetSpec": {
      "description": "ModifySetSpec defines the desired state of ModifySet.",
      "type": "object",
      "properties": {
        "applyTo": {
          "description": "ApplyTo lists the specific groups, versions and kinds a mutation will be applied to. This is necessary because every mutation implies part of an object schema and object schemas are associated with specific GVKs.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.pkg.mutation.match.ApplyTo"
          }
        },
        "location": {
          "description": "Location describes the path to be mutated, for example: `spec.containers[name: main].args`.",
          "type": "string"
        },
        "match": {
          "description": "Match allows the user to limit which resources get mutated. Individual match criteria are AND-ed together. An undefined match criteria matches everything.",
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.pkg.mutation.match.Match"
        },
        "parameters": {
          "description": "Parameters define the behavior of the mutator.",
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1.ModifySetParameters"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1.ModifySetStatus": {
      "description": "ModifySetStatus defines the observed state of ModifySet.",
      "type": "object",
      "properties": {
        "byPod": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.apis.status.v1beta1.MutatorPodStatusStatus"
          }
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1.Parameters": {
      "type": "object",
      "properties": {
        "assign": {
          "description": "Assign.value holds the value to be assigned",
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1.AssignField"
        },
        "pathTests": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1.PathTest"
          }
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1.PathTest": {
      "description": "PathTest allows the user to customize how the mutation works if parent paths are missing. It traverses the list in order. All sub paths are tested against the provided condition, if the test fails, the mutation is not applied. All `subPath` entries must be a prefix of `location`. Any glob characters will take on the same value as was used to expand the matching glob in `location`.\n\nAvailable Tests: * MustExist    - the path must exist or do not mutate * MustNotExist - the path must not exist or do not mutate.",
      "type": "object",
      "properties": {
        "condition": {
          "type": "string"
        },
        "subPath": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1.Values": {
      "description": "Values describes the values provided to the operation.",
      "type": "object",
      "properties": {
        "fromList": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1alpha1.Assign": {
      "description": "Assign is the Schema for the assign API.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1alpha1.AssignSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1alpha1.AssignStatus"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1alpha1.AssignField": {
      "type": "object",
      "properties": {
        "externalData": {
          "description": "ExternalData describes the external data provider to be used for mutation.",
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1alpha1.ExternalData"
        },
        "fromMetadata": {
          "description": "FromMetadata assigns a value from the specified metadata field.",
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1alpha1.FromMetadata"
        },
        "value": {
          "description": "Value is a constant value that will be assigned to `location`",
          "$ref": "#/definitions/sh.gatekeeper.pkg.mutation.types.Anything"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1alpha1.AssignMetadata": {
      "description": "AssignMetadata is the Schema for the assignmetadata API.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1alpha1.AssignMetadataSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1alpha1.AssignMetadataStatus"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1alpha1.AssignMetadataSpec": {
      "description": "AssignMetadataSpec defines the desired state of AssignMetadata.",
      "type": "object",
      "properties": {
        "location": {
          "type": "string"
        },
        "match": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.pkg.mutation.match.Match"
        },
        "parameters": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1alpha1.MetadataParameters"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1alpha1.AssignMetadataStatus": {
      "description": "AssignMetadataStatus defines the observed state of AssignMetadata.",
      "type": "object",
      "properties": {
        "byPod": {
          "description": "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"make\" to regenerate code after modifying this file",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.apis.status.v1beta1.MutatorPodStatusStatus"
          }
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1alpha1.AssignSpec": {
      "description": "AssignSpec defines the desired state of Assign.",
      "type": "object",
      "properties": {
        "applyTo": {
          "description": "ApplyTo lists the specific groups, versions and kinds a mutation will be applied to. This is necessary because every mutation implies part of an object schema and object schemas are associated with specific GVKs.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.pkg.mutation.match.ApplyTo"
          }
        },
        "location": {
          "description": "Location describes the path to be mutated, for example: `spec.containers[name: main]`.",
          "type": "string"
        },
        "match": {
          "description": "Match allows the user to limit which resources get mutated. Individual match criteria are AND-ed together. An undefined match criteria matches everything.",
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.pkg.mutation.match.Match"
        },
        "parameters": {
          "description": "Parameters define the behavior of the mutator.",
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1alpha1.Parameters"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1alpha1.AssignStatus": {
      "description": "AssignStatus defines the observed state of Assign.",
      "type": "object",
      "properties": {
        "byPod": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.apis.status.v1beta1.MutatorPodStatusStatus"
          }
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1alpha1.ExternalData": {
      "description": "ExternalData describes the external data source to use for the mutation.",
      "type": "object",
      "properties": {
        "dataSource": {
          "description": "DataSource specifies where to extract the data that will be sent to the external data provider as parameters.",
          "type": "string"
        },
        "default": {
          "description": "Default specifies the default value to use when the external data provider returns an error and the failure policy is set to \"UseDefault\".",
          "type": "string"
        },
        "failurePolicy": {
          "description": "FailurePolicy specifies the policy to apply when the external data provider returns an error.",
          "type": "string"
        },
        "provider": {
          "description": "Provider is the name of the external data provider.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1alpha1.FromMetadata": {
      "type": "object",
      "properties": {
        "field": {
          "description": "Field specifies which metadata field provides the assigned value. Valid fields are `namespace` and `name`.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1alpha1.MetadataParameters": {
      "type": "object",
      "properties": {
        "assign": {
          "description": "Assign.value holds the value to be assigned",
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1alpha1.AssignField"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1alpha1.ModifySet": {
      "description": "ModifySet allows the user to modify non-keyed lists, such as the list of arguments to a container.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1alpha1.ModifySetSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1alpha1.ModifySetStatus"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1alpha1.ModifySetParameters": {
      "type": "object",
      "properties": {
        "operation": {
          "description": "Operation describes whether values should be merged in (\"merge\"), or pruned (\"prune\"). Default value is \"merge\"",
          "type": "string"
        },
        "pathTests": {
          "description": "PathTests are a series of existence tests that can be checked before a mutation is applied",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1alpha1.PathTest"
          }
        },
        "values": {
          "description": "Values describes the values provided to the operation as `values.fromList`.",
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1alpha1.Values"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1alpha1.ModifySetSpec": {
      "description": "ModifySetSpec defines the desired state of ModifySet.",
      "type": "object",
      "properties": {
        "applyTo": {
          "description": "ApplyTo lists the specific groups, versions and kinds a mutation will be applied to. This is necessary because every mutation implies part of an object schema and object schemas are associated with specific GVKs.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.pkg.mutation.match.ApplyTo"
          }
        },
        "location": {
          "description": "Location describes the path to be mutated, for example: `spec.containers[name: main].args`.",
          "type": "string"
        },
        "match": {
          "description": "Match allows the user to limit which resources get mutated. Individual match criteria are AND-ed together. An undefined match criteria matches everything.",
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.pkg.mutation.match.Match"
        },
        "parameters": {
          "description": "Parameters define the behavior of the mutator.",
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1alpha1.ModifySetParameters"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1alpha1.ModifySetStatus": {
      "description": "ModifySetStatus defines the observed state of ModifySet.",
      "type": "object",
      "properties": {
        "byPod": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.apis.status.v1beta1.MutatorPodStatusStatus"
          }
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1alpha1.Parameters": {
      "type": "object",
      "properties": {
        "assign": {
          "description": "Assign.value holds the value to be assigned",
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1alpha1.AssignField"
        },
        "pathTests": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1alpha1.PathTest"
          }
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1alpha1.PathTest": {
      "description": "PathTest allows the user to customize how the mutation works if parent paths are missing. It traverses the list in order. All sub paths are tested against the provided condition, if the test fails, the mutation is not applied. All `subPath` entries must be a prefix of `location`. Any glob characters will take on the same value as was used to expand the matching glob in `location`.\n\nAvailable Tests: * MustExist    - the path must exist or do not mutate * MustNotExist - the path must not exist or do not mutate.",
      "type": "object",
      "properties": {
        "condition": {
          "type": "string"
        },
        "subPath": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1alpha1.Values": {
      "description": "Values describes the values provided to the operation.",
      "type": "object",
      "properties": {
        "fromList": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1beta1.Assign": {
      "description": "Assign is the Schema for the assign API.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1beta1.AssignSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1beta1.AssignStatus"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1beta1.AssignField": {
      "type": "object",
      "properties": {
        "externalData": {
          "description": "ExternalData describes the external data provider to be used for mutation.",
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1beta1.ExternalData"
        },
        "fromMetadata": {
          "description": "FromMetadata assigns a value from the specified metadata field.",
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1beta1.FromMetadata"
        },
        "value": {
          "description": "Value is a constant value that will be assigned to `location`",
          "$ref": "#/definitions/sh.gatekeeper.pkg.mutation.types.Anything"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1beta1.AssignMetadata": {
      "description": "AssignMetadata is the Schema for the assignmetadata API.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1beta1.AssignMetadataSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1beta1.AssignMetadataStatus"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1beta1.AssignMetadataSpec": {
      "description": "AssignMetadataSpec defines the desired state of AssignMetadata.",
      "type": "object",
      "properties": {
        "location": {
          "type": "string"
        },
        "match": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.pkg.mutation.match.Match"
        },
        "parameters": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1beta1.MetadataParameters"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1beta1.AssignMetadataStatus": {
      "description": "AssignMetadataStatus defines the observed state of AssignMetadata.",
      "type": "object",
      "properties": {
        "byPod": {
          "description": "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"make\" to regenerate code after modifying this file",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.apis.status.v1beta1.MutatorPodStatusStatus"
          }
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1beta1.AssignSpec": {
      "description": "AssignSpec defines the desired state of Assign.",
      "type": "object",
      "properties": {
        "applyTo": {
          "description": "ApplyTo lists the specific groups, versions and kinds a mutation will be applied to. This is necessary because every mutation implies part of an object schema and object schemas are associated with specific GVKs.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.pkg.mutation.match.ApplyTo"
          }
        },
        "location": {
          "description": "Location describes the path to be mutated, for example: `spec.containers[name: main]`.",
          "type": "string"
        },
        "match": {
          "description": "Match allows the user to limit which resources get mutated. Individual match criteria are AND-ed together. An undefined match criteria matches everything.",
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.pkg.mutation.match.Match"
        },
        "parameters": {
          "description": "Parameters define the behavior of the mutator.",
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1beta1.Parameters"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1beta1.AssignStatus": {
      "description": "AssignStatus defines the observed state of Assign.",
      "type": "object",
      "properties": {
        "byPod": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.apis.status.v1beta1.MutatorPodStatusStatus"
          }
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1beta1.ExternalData": {
      "description": "ExternalData describes the external data source to use for the mutation.",
      "type": "object",
      "properties": {
        "dataSource": {
          "description": "DataSource specifies where to extract the data that will be sent to the external data provider as parameters.",
          "type": "string"
        },
        "default": {
          "description": "Default specifies the default value to use when the external data provider returns an error and the failure policy is set to \"UseDefault\".",
          "type": "string"
        },
        "failurePolicy": {
          "description": "FailurePolicy specifies the policy to apply when the external data provider returns an error.",
          "type": "string"
        },
        "provider": {
          "description": "Provider is the name of the external data provider.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1beta1.FromMetadata": {
      "type": "object",
      "properties": {
        "field": {
          "description": "Field specifies which metadata field provides the assigned value. Valid fields are `namespace` and `name`.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1beta1.MetadataParameters": {
      "type": "object",
      "properties": {
        "assign": {
          "description": "Assign.value holds the value to be assigned",
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1beta1.AssignField"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1beta1.ModifySet": {
      "description": "ModifySet allows the user to modify non-keyed lists, such as the list of arguments to a container.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1beta1.ModifySetSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1beta1.ModifySetStatus"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1beta1.ModifySetParameters": {
      "type": "object",
      "properties": {
        "operation": {
          "description": "Operation describes whether values should be merged in (\"merge\"), or pruned (\"prune\"). Default value is \"merge\"",
          "type": "string"
        },
        "pathTests": {
          "description": "PathTests are a series of existence tests that can be checked before a mutation is applied",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1beta1.PathTest"
          }
        },
        "values": {
          "description": "Values describes the values provided to the operation as `values.fromList`.",
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1beta1.Values"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1beta1.ModifySetSpec": {
      "description": "ModifySetSpec defines the desired state of ModifySet.",
      "type": "object",
      "properties": {
        "applyTo": {
          "description": "ApplyTo lists the specific groups, versions and kinds a mutation will be applied to. This is necessary because every mutation implies part of an object schema and object schemas are associated with specific GVKs.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.pkg.mutation.match.ApplyTo"
          }
        },
        "location": {
          "description": "Location describes the path to be mutated, for example: `spec.containers[name: main].args`.",
          "type": "string"
        },
        "match": {
          "description": "Match allows the user to limit which resources get mutated. Individual match criteria are AND-ed together. An undefined match criteria matches everything.",
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.pkg.mutation.match.Match"
        },
        "parameters": {
          "description": "Parameters define the behavior of the mutator.",
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1beta1.ModifySetParameters"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1beta1.ModifySetStatus": {
      "description": "ModifySetStatus defines the observed state of ModifySet.",
      "type": "object",
      "properties": {
        "byPod": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.apis.status.v1beta1.MutatorPodStatusStatus"
          }
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1beta1.Parameters": {
      "type": "object",
      "properties": {
        "assign": {
          "description": "Assign.value holds the value to be assigned",
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1beta1.AssignField"
        },
        "pathTests": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.apis.mutations.v1beta1.PathTest"
          }
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1beta1.PathTest": {
      "description": "PathTest allows the user to customize how the mutation works if parent paths are missing. It traverses the list in order. All sub paths are tested against the provided condition, if the test fails, the mutation is not applied. All `subPath` entries must be a prefix of `location`. Any glob characters will take on the same value as was used to expand the matching glob in `location`.\n\nAvailable Tests: * MustExist    - the path must exist or do not mutate * MustNotExist - the path must not exist or do not mutate.",
      "type": "object",
      "properties": {
        "condition": {
          "type": "string"
        },
        "subPath": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.mutations.v1beta1.Values": {
      "description": "Values describes the values provided to the operation.",
      "type": "object",
      "properties": {
        "fromList": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.status.v1beta1.ConstraintPodStatus": {
      "description": "ConstraintPodStatus is the Schema for the constraintpodstatuses API.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.status.v1beta1.ConstraintPodStatusStatus"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.status.v1beta1.ConstraintPodStatusStatus": {
      "description": "ConstraintPodStatusStatus defines the observed state of ConstraintPodStatus.",
      "type": "object",
      "properties": {
        "constraintUID": {
          "description": "Storing the constraint UID allows us to detect drift, such as when a constraint has been recreated after its CRD was deleted out from under it, interrupting the watch",
          "type": "string"
        },
        "enforced": {
          "type": "boolean"
        },
        "errors": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.apis.status.v1beta1.Error"
          }
        },
        "id": {
          "type": "string"
        },
        "observedGeneration": {
          "type": "integer",
          "format": "int64"
        },
        "operations": {
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.status.v1beta1.ConstraintTemplatePodStatus": {
      "description": "ConstraintTemplatePodStatus is the Schema for the constrainttemplatepodstatuses API.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.status.v1beta1.ConstraintTemplatePodStatusStatus"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.status.v1beta1.ConstraintTemplatePodStatusStatus": {
      "description": "ConstraintTemplatePodStatusStatus defines the observed state of ConstraintTemplatePodStatus.",
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1beta1.CreateCRDError"
          }
        },
        "id": {
          "description": "Important: Run \"make\" to regenerate code after modifying this file",
          "type": "string"
        },
        "observedGeneration": {
          "type": "integer",
          "format": "int64"
        },
        "operations": {
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "templateUID": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.status.v1beta1.Error": {
      "description": "Error represents a single error caught while adding a constraint to OPA.",
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string",
          "default": ""
        },
        "location": {
          "type": "string"
        },
        "message": {
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.status.v1beta1.MutatorError": {
      "description": "MutatorError represents a single error caught while adding a mutator to a system.",
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "default": ""
        },
        "type": {
          "description": "Type indicates a specific class of error for use by controller code. If not present, the error should be treated as not matching any known type.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.status.v1beta1.MutatorPodStatus": {
      "description": "MutatorPodStatus is the Schema for the mutationpodstatuses API.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.apis.status.v1beta1.MutatorPodStatusStatus"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.apis.status.v1beta1.MutatorPodStatusStatus": {
      "description": "MutatorPodStatusStatus defines the observed state of MutatorPodStatus.",
      "type": "object",
      "properties": {
        "enforced": {
          "type": "boolean"
        },
        "errors": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.apis.status.v1beta1.MutatorError"
          }
        },
        "id": {
          "type": "string"
        },
        "mutatorUID": {
          "description": "Storing the mutator UID allows us to detect drift, such as when a mutator has been recreated after its CRD was deleted out from under it, interrupting the watch",
          "type": "string"
        },
        "observedGeneration": {
          "type": "integer",
          "format": "int64"
        },
        "operations": {
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.frameworks.constraint.pkg.apis.externaldata.v1alpha1.Provider": {
      "description": "Provider is the Schema for the Provider API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the Provider specifications.",
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.frameworks.constraint.pkg.apis.externaldata.v1alpha1.ProviderSpec"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.frameworks.constraint.pkg.apis.externaldata.v1alpha1.ProviderSpec": {
      "description": "ProviderSpec defines the desired state of Provider.",
      "type": "object",
      "properties": {
        "caBundle": {
          "description": "CABundle is a base64-encoded string that contains the TLS CA bundle in PEM format. It is used to verify the signature of the provider's certificate.",
          "type": "string"
        },
        "insecureTLSSkipVerify": {
          "description": "InsecureTLSSkipVerify skips the verification of Provider's certificate if enabled.",
          "type": "boolean"
        },
        "timeout": {
          "description": "Timeout is the timeout when querying the provider.",
          "type": "integer",
          "format": "int32"
        },
        "url": {
          "description": "URL is the url for the provider. URL is prefixed with http:// or https://.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1.ByPodStatus": {
      "description": "ByPodStatus defines the observed state of ConstraintTemplate as seen by an individual controller",
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1.CreateCRDError"
          }
        },
        "id": {
          "description": "a unique identifier for the pod that wrote the status",
          "type": "string"
        },
        "observedGeneration": {
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1.CRD": {
      "type": "object",
      "properties": {
        "spec": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1.CRDSpec"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1.CRDSpec": {
      "type": "object",
      "properties": {
        "names": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1.Names"
        },
        "validation": {
          "$ref": "#/definitions/sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1.Validation"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1.ConstraintTemplate": {
      "description": "ConstraintTemplate is the Schema for the constrainttemplates API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1.ConstraintTemplateSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1.ConstraintTemplateStatus"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1.ConstraintTemplateSpec": {
      "description": "ConstraintTemplateSpec defines the desired state of ConstraintTemplate.",
      "type": "object",
      "properties": {
        "crd": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1.CRD"
        },
        "targets": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1.Target"
          }
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1.ConstraintTemplateStatus": {
      "description": "ConstraintTemplateStatus defines the observed state of ConstraintTemplate.",
      "type": "object",
      "properties": {
        "byPod": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1.ByPodStatus"
          }
        },
        "created": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1.CreateCRDError": {
      "description": "CreateCRDError represents a single error caught during parsing, compiling, etc.",
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string",
          "default": ""
        },
        "location": {
          "type": "string"
        },
        "message": {
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1.Names": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "shortNames": {
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1.Target": {
      "type": "object",
      "properties": {
        "libs": {
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "rego": {
          "type": "string"
        },
        "target": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1.Validation": {
      "type": "object",
      "properties": {
        "legacySchema": {
          "type": "boolean"
        },
        "openAPIV3Schema": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1beta1.ByPodStatus": {
      "description": "ByPodStatus defines the observed state of ConstraintTemplate as seen by an individual controller",
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1beta1.CreateCRDError"
          }
        },
        "id": {
          "description": "a unique identifier for the pod that wrote the status",
          "type": "string"
        },
        "observedGeneration": {
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1beta1.CRD": {
      "type": "object",
      "properties": {
        "spec": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1beta1.CRDSpec"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1beta1.CRDSpec": {
      "type": "object",
      "properties": {
        "names": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1beta1.Names"
        },
        "validation": {
          "$ref": "#/definitions/sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1beta1.Validation"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1beta1.ConstraintTemplate": {
      "description": "ConstraintTemplate is the Schema for the constrainttemplates API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1beta1.ConstraintTemplateSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1beta1.ConstraintTemplateStatus"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1beta1.ConstraintTemplateSpec": {
      "description": "ConstraintTemplateSpec defines the desired state of ConstraintTemplate.",
      "type": "object",
      "properties": {
        "crd": {
          "default": {},
          "$ref": "#/definitions/sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1beta1.CRD"
        },
        "targets": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1beta1.Target"
          }
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1beta1.ConstraintTemplateStatus": {
      "description": "ConstraintTemplateStatus defines the observed state of ConstraintTemplate.",
      "type": "object",
      "properties": {
        "byPod": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1beta1.ByPodStatus"
          }
        },
        "created": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1beta1.CreateCRDError": {
      "description": "CreateCRDError represents a single error caught during parsing, compiling, etc.",
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string",
          "default": ""
        },
        "location": {
          "type": "string"
        },
        "message": {
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1beta1.Names": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "shortNames": {
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1beta1.Target": {
      "type": "object",
      "properties": {
        "libs": {
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "rego": {
          "type": "string"
        },
        "target": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.frameworks.constraint.pkg.apis.templates.v1beta1.Validation": {
      "type": "object",
      "properties": {
        "legacySchema": {
          "type": "boolean"
        },
        "openAPIV3Schema": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.pkg.mutation.match.ApplyTo": {
      "description": "ApplyTo determines what GVKs items the mutation should apply to. Globs are not allowed.",
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "kinds": {
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.pkg.mutation.match.Kinds": {
      "description": "Kinds accepts a list of objects with apiGroups and kinds fields that list the groups/kinds of objects to which the mutation will apply. If multiple groups/kinds objects are specified, only one match is needed for the resource to be in scope.",
      "type": "object",
      "properties": {
        "apiGroups": {
          "description": "APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "kinds": {
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.pkg.mutation.match.Match": {
      "description": "Match selects objects to apply mutations to.",
      "type": "object",
      "properties": {
        "excludedNamespaces": {
          "description": "ExcludedNamespaces is a list of namespace names. If defined, a constraint only applies to resources not in a listed namespace. ExcludedNamespaces also supports a prefix or suffix based glob.  For example, `excludedNamespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `excludedNamespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "kinds": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/sh.gatekeeper.pkg.mutation.match.Kinds"
          }
        },
        "labelSelector": {
          "description": "LabelSelector is the combination of two optional fields: `matchLabels` and `matchExpressions`.  These two fields provide different methods of selecting or excluding k8s objects based on the label keys and values included in object metadata.  All selection expressions from both sections are ANDed to determine if an object meets the cumulative requirements of the selector.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "name": {
          "description": "Name is the name of an object.  If defined, it will match against objects with the specified name.  Name also supports a prefix or suffix glob.  For example, `name: pod-*` would match both `pod-a` and `pod-b`, and `name: *-pod` would match both `a-pod` and `b-pod`.",
          "type": "string"
        },
        "namespaceSelector": {
          "description": "NamespaceSelector is a label selector against an object's containing namespace or the object itself, if the object is a namespace.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "namespaces": {
          "description": "Namespaces is a list of namespace names. If defined, a constraint only applies to resources in a listed namespace.  Namespaces also supports a prefix or suffix based glob.  For example, `namespaces: [kube-*]` matches both `kube-system` and `kube-public`, and `namespaces: [*-system]` matches both `kube-system` and `gatekeeper-system`.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "scope": {
          "description": "Scope determines if cluster-scoped and/or namespaced-scoped resources are matched.  Accepts `*`, `Cluster`, or `Namespaced`. (defaults to `*`)",
          "type": "string"
        },
        "source": {
          "description": "Source determines whether generated or original resources are matched. Accepts `Generated`|`Original`|`All` (defaults to `All`). A value of `Generated` will only match generated resources, while `Original` will only match regular resources.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "sh.gatekeeper.pkg.mutation.types.Anything": {
      "description": "Anything is a struct wrapper around a field of type `interface{}` that plays nicely with controller-gen",
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.util.intstr.IntOrString": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "integer"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.api.resource.Quantity": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "number"
        }
      ]
    }
  }
}