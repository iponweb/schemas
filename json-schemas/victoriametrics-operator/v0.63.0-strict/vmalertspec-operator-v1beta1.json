{
  "description": "VMAlertSpec defines the desired state of VMAlert",
  "type": "object",
  "required": [
    "datasource"
  ],
  "properties": {
    "affinity": {
      "description": "Affinity If specified, the pod's scheduling constraints.",
      "$ref": "_definitions.json#/definitions/io.k8s.api.core.v1.Affinity"
    },
    "configMaps": {
      "description": "ConfigMaps is a list of ConfigMaps in the same namespace as the Application object, which shall be mounted into the Application container at /etc/vm/configs/CONFIGMAP_NAME folder",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": [
          "string",
          "null"
        ],
        "default": ""
      }
    },
    "configReloadAuthKeySecret": {
      "description": "ConfigReloadAuthKeySecret defines optional secret reference authKey for /-/reload API requests. Given secret reference will be added to the application and vm-config-reloader as volume available since v0.57.0 version",
      "$ref": "_definitions.json#/definitions/io.k8s.api.core.v1.SecretKeySelector"
    },
    "configReloaderExtraArgs": {
      "description": "ConfigReloaderExtraArgs that will be passed to  VMAuths config-reloader container for example resyncInterval: \"30s\"",
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": {
        "type": [
          "string",
          "null"
        ],
        "default": ""
      }
    },
    "configReloaderImageTag": {
      "description": "ConfigReloaderImageTag defines image:tag for config-reloader container",
      "type": [
        "string",
        "null"
      ]
    },
    "configReloaderResources": {
      "description": "ConfigReloaderResources config-reloader container resource request and limits, https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ if not defined default resources from operator config will be used",
      "default": {},
      "$ref": "_definitions.json#/definitions/io.k8s.api.core.v1.ResourceRequirements"
    },
    "containers": {
      "description": "Containers property allows to inject additions sidecars or to patch existing containers. It can be useful for proxies, backup, etc.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "default": {},
        "$ref": "_definitions.json#/definitions/io.k8s.api.core.v1.Container"
      }
    },
    "datasource": {
      "description": "Datasource Victoria Metrics or VMSelect url. Required parameter. e.g. http://127.0.0.1:8428",
      "default": {},
      "$ref": "_definitions.json#/definitions/com.victoriametrics.operator.api.operator.v1beta1.VMAlertDatasourceSpec"
    },
    "disableAutomountServiceAccountToken": {
      "description": "DisableAutomountServiceAccountToken whether to disable serviceAccount auto mount by Kubernetes (available from v0.54.0). Operator will conditionally create volumes and volumeMounts for containers if it requires k8s API access. For example, vmagent and vm-config-reloader requires k8s API access. Operator creates volumes with name: \"kube-api-access\", which can be used as volumeMount for extraContainers if needed. And also adds VolumeMounts at /var/run/secrets/kubernetes.io/serviceaccount.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "disableSelfServiceScrape": {
      "description": "DisableSelfServiceScrape controls creation of VMServiceScrape by operator for the application. Has priority over `VM_DISABLESELFSERVICESCRAPECREATION` operator env variable",
      "type": [
        "boolean",
        "null"
      ]
    },
    "dnsConfig": {
      "description": "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.",
      "$ref": "_definitions.json#/definitions/io.k8s.api.core.v1.PodDNSConfig"
    },
    "dnsPolicy": {
      "description": "DNSPolicy sets DNS policy for the pod",
      "type": [
        "string",
        "null"
      ]
    },
    "enforcedNamespaceLabel": {
      "description": "EnforcedNamespaceLabel enforces adding a namespace label of origin for each alert and metric that is user created. The label value will always be the namespace of the object that is being created.",
      "type": [
        "string",
        "null"
      ]
    },
    "evaluationInterval": {
      "description": "EvaluationInterval defines how often to evaluate rules by default",
      "type": [
        "string",
        "null"
      ]
    },
    "externalLabels": {
      "description": "ExternalLabels in the form 'name: value' to add to all generated recording rules and alerts.",
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": {
        "type": [
          "string",
          "null"
        ],
        "default": ""
      }
    },
    "extraArgs": {
      "description": "ExtraArgs that will be passed to the application container for example remoteWrite.tmpDataPath: /tmp",
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": {
        "type": [
          "string",
          "null"
        ],
        "default": ""
      }
    },
    "extraEnvs": {
      "description": "ExtraEnvs that will be passed to the application container",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "default": {},
        "$ref": "_definitions.json#/definitions/io.k8s.api.core.v1.EnvVar"
      }
    },
    "extraEnvsFrom": {
      "description": "ExtraEnvsFrom defines source of env variables for the application container could either be secret or configmap",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "default": {},
        "$ref": "_definitions.json#/definitions/io.k8s.api.core.v1.EnvFromSource"
      }
    },
    "hostAliases": {
      "description": "HostAliases provides mapping for ip and hostname, that would be propagated to pod, cannot be used with HostNetwork.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "default": {},
        "$ref": "_definitions.json#/definitions/io.k8s.api.core.v1.HostAlias"
      }
    },
    "hostNetwork": {
      "description": "HostNetwork controls whether the pod may use the node network namespace",
      "type": [
        "boolean",
        "null"
      ]
    },
    "host_aliases": {
      "description": "HostAliasesUnderScore provides mapping for ip and hostname, that would be propagated to pod, cannot be used with HostNetwork. Has Priority over hostAliases field",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "default": {},
        "$ref": "_definitions.json#/definitions/io.k8s.api.core.v1.HostAlias"
      }
    },
    "image": {
      "description": "Image - docker image settings if no specified operator uses default version from operator config",
      "default": {},
      "$ref": "_definitions.json#/definitions/com.victoriametrics.operator.api.operator.v1beta1.Image"
    },
    "imagePullSecrets": {
      "description": "ImagePullSecrets An optional list of references to secrets in the same namespace to use for pulling images from registries see https://kubernetes.io/docs/concepts/containers/images/#referring-to-an-imagepullsecrets-on-a-pod",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "default": {},
        "$ref": "_definitions.json#/definitions/io.k8s.api.core.v1.LocalObjectReference"
      }
    },
    "initContainers": {
      "description": "InitContainers allows adding initContainers to the pod definition. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "default": {},
        "$ref": "_definitions.json#/definitions/io.k8s.api.core.v1.Container"
      }
    },
    "license": {
      "description": "License allows to configure license key to be used for enterprise features. Using license key is supported starting from VictoriaMetrics v1.94.0. See [here](https://docs.victoriametrics.com/victoriametrics/enterprise/)",
      "$ref": "_definitions.json#/definitions/com.victoriametrics.operator.api.operator.v1beta1.License"
    },
    "livenessProbe": {
      "description": "LivenessProbe that will be added CRD pod",
      "$ref": "_definitions.json#/definitions/io.k8s.api.core.v1.Probe"
    },
    "logFormat": {
      "description": "LogFormat for VMAlert to be configured with. default or json",
      "type": [
        "string",
        "null"
      ]
    },
    "logLevel": {
      "description": "LogLevel for VMAlert to be configured with.",
      "type": [
        "string",
        "null"
      ]
    },
    "managedMetadata": {
      "description": "ManagedMetadata defines metadata that will be added to the all objects created by operator for the given CustomResource",
      "$ref": "_definitions.json#/definitions/com.victoriametrics.operator.api.operator.v1beta1.ManagedObjectsMetadata"
    },
    "minReadySeconds": {
      "description": "MinReadySeconds defines a minimum number of seconds to wait before starting update next pod if previous in healthy state Has no effect for VLogs and VMSingle",
      "type": [
        "integer",
        "null"
      ],
      "format": "int32"
    },
    "nodeSelector": {
      "description": "NodeSelector Define which Nodes the Pods are scheduled on.",
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": {
        "type": [
          "string",
          "null"
        ],
        "default": ""
      }
    },
    "notifier": {
      "description": "Notifier prometheus alertmanager endpoint spec. Required at least one of notifier or notifiers when there are alerting rules. e.g. http://127.0.0.1:9093 If specified both notifier and notifiers, notifier will be added as last element to notifiers. only one of notifier options could be chosen: notifierConfigRef or notifiers +  notifier",
      "$ref": "_definitions.json#/definitions/com.victoriametrics.operator.api.operator.v1beta1.VMAlertNotifierSpec"
    },
    "notifierConfigRef": {
      "description": "NotifierConfigRef reference for secret with notifier configuration for vmalert only one of notifier options could be chosen: notifierConfigRef or notifiers +  notifier",
      "$ref": "_definitions.json#/definitions/io.k8s.api.core.v1.SecretKeySelector"
    },
    "notifiers": {
      "description": "Notifiers prometheus alertmanager endpoints. Required at least one of notifier or notifiers when there are alerting rules. e.g. http://127.0.0.1:9093 If specified both notifier and notifiers, notifier will be added as last element to notifiers. only one of notifier options could be chosen: notifierConfigRef or notifiers +  notifier",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "default": {},
        "$ref": "_definitions.json#/definitions/com.victoriametrics.operator.api.operator.v1beta1.VMAlertNotifierSpec"
      }
    },
    "paused": {
      "description": "Paused If set to true all actions on the underlying managed objects are not going to be performed, except for delete actions.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "podDisruptionBudget": {
      "description": "PodDisruptionBudget created by operator",
      "$ref": "_definitions.json#/definitions/com.victoriametrics.operator.api.operator.v1beta1.EmbeddedPodDisruptionBudgetSpec"
    },
    "podMetadata": {
      "description": "PodMetadata configures Labels and Annotations which are propagated to the VMAlert pods.",
      "$ref": "_definitions.json#/definitions/com.victoriametrics.operator.api.operator.v1beta1.EmbeddedObjectMetadata"
    },
    "port": {
      "description": "Port listen address",
      "type": [
        "string",
        "null"
      ]
    },
    "priorityClassName": {
      "description": "PriorityClassName class assigned to the Pods",
      "type": [
        "string",
        "null"
      ]
    },
    "readinessGates": {
      "description": "ReadinessGates defines pod readiness gates",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "default": {},
        "$ref": "_definitions.json#/definitions/io.k8s.api.core.v1.PodReadinessGate"
      }
    },
    "readinessProbe": {
      "description": "ReadinessProbe that will be added CRD pod",
      "$ref": "_definitions.json#/definitions/io.k8s.api.core.v1.Probe"
    },
    "remoteRead": {
      "description": "RemoteRead Optional URL to read vmalert state (persisted via RemoteWrite) This configuration only makes sense if alerts state has been successfully persisted (via RemoteWrite) before. see -remoteRead.url docs in vmalerts for details. E.g. http://127.0.0.1:8428",
      "$ref": "_definitions.json#/definitions/com.victoriametrics.operator.api.operator.v1beta1.VMAlertRemoteReadSpec"
    },
    "remoteWrite": {
      "description": "RemoteWrite Optional URL to remote-write compatible storage to persist vmalert state and rule results to. Rule results will be persisted according to each rule. Alerts state will be persisted in the form of time series named ALERTS and ALERTS_FOR_STATE see -remoteWrite.url docs in vmalerts for details. E.g. http://127.0.0.1:8428",
      "$ref": "_definitions.json#/definitions/com.victoriametrics.operator.api.operator.v1beta1.VMAlertRemoteWriteSpec"
    },
    "replicaCount": {
      "description": "ReplicaCount is the expected size of the Application.",
      "type": [
        "integer",
        "null"
      ],
      "format": "int32"
    },
    "resources": {
      "description": "Resources container resource request and limits, https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ if not defined default resources from operator config will be used",
      "default": {},
      "$ref": "_definitions.json#/definitions/io.k8s.api.core.v1.ResourceRequirements"
    },
    "revisionHistoryLimitCount": {
      "description": "The number of old ReplicaSets to retain to allow rollback in deployment or maximum number of revisions that will be maintained in the Deployment revision history. Has no effect at StatefulSets Defaults to 10.",
      "type": [
        "integer",
        "null"
      ],
      "format": "int32"
    },
    "rollingUpdate": {
      "description": "RollingUpdate - overrides deployment update params.",
      "$ref": "_definitions.json#/definitions/io.k8s.api.apps.v1.RollingUpdateDeployment"
    },
    "ruleNamespaceSelector": {
      "description": "RuleNamespaceSelector to be selected for VMRules discovery. Works in combination with Selector. If both nil - behaviour controlled by selectAllByDefault NamespaceSelector nil - only objects at VMAlert namespace.",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
    },
    "rulePath": {
      "description": "RulePath to the file with alert rules. Supports patterns. Flag can be specified multiple times. Examples: -rule /path/to/file. Path to a single file with alerting rules -rule dir/*.yaml -rule /*.yaml. Relative path to all .yaml files in folder, absolute path to all .yaml files in root. by default operator adds /etc/vmalert/configs/base/vmalert.yaml",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": [
          "string",
          "null"
        ],
        "default": ""
      }
    },
    "ruleSelector": {
      "description": "RuleSelector selector to select which VMRules to mount for loading alerting rules from. Works in combination with NamespaceSelector. If both nil - behaviour controlled by selectAllByDefault NamespaceSelector nil - only objects at VMAlert namespace.",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
    },
    "runtimeClassName": {
      "description": "RuntimeClassName - defines runtime class for kubernetes pod. https://kubernetes.io/docs/concepts/containers/runtime-class/",
      "type": [
        "string",
        "null"
      ]
    },
    "schedulerName": {
      "description": "SchedulerName - defines kubernetes scheduler name",
      "type": [
        "string",
        "null"
      ]
    },
    "secrets": {
      "description": "Secrets is a list of Secrets in the same namespace as the Application object, which shall be mounted into the Application container at /etc/vm/secrets/SECRET_NAME folder",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": [
          "string",
          "null"
        ],
        "default": ""
      }
    },
    "securityContext": {
      "description": "SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.",
      "$ref": "_definitions.json#/definitions/com.victoriametrics.operator.api.operator.v1beta1.SecurityContext"
    },
    "selectAllByDefault": {
      "description": "SelectAllByDefault changes default behavior for empty CRD selectors, such RuleSelector. with selectAllByDefault: true and empty serviceScrapeSelector and RuleNamespaceSelector Operator selects all exist serviceScrapes with selectAllByDefault: false - selects nothing",
      "type": [
        "boolean",
        "null"
      ]
    },
    "serviceAccountName": {
      "description": "ServiceAccountName is the name of the ServiceAccount to use to run the pods",
      "type": [
        "string",
        "null"
      ]
    },
    "serviceScrapeSpec": {
      "description": "ServiceScrapeSpec that will be added to vmalert VMServiceScrape spec",
      "$ref": "_definitions.json#/definitions/com.victoriametrics.operator.api.operator.v1beta1.VMServiceScrapeSpec"
    },
    "serviceSpec": {
      "description": "ServiceSpec that will be added to vmalert service spec",
      "$ref": "_definitions.json#/definitions/com.victoriametrics.operator.api.operator.v1beta1.AdditionalServiceSpec"
    },
    "startupProbe": {
      "description": "StartupProbe that will be added to CRD pod",
      "$ref": "_definitions.json#/definitions/io.k8s.api.core.v1.Probe"
    },
    "terminationGracePeriodSeconds": {
      "description": "TerminationGracePeriodSeconds period for container graceful termination",
      "type": [
        "integer",
        "null"
      ],
      "format": "int64"
    },
    "tolerations": {
      "description": "Tolerations If specified, the pod's tolerations.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "default": {},
        "$ref": "_definitions.json#/definitions/io.k8s.api.core.v1.Toleration"
      }
    },
    "topologySpreadConstraints": {
      "description": "TopologySpreadConstraints embedded kubernetes pod configuration option, controls how pods are spread across your cluster among failure-domains such as regions, zones, nodes, and other user-defined topology domains https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "default": {},
        "$ref": "_definitions.json#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint"
      }
    },
    "updateStrategy": {
      "description": "UpdateStrategy - overrides default update strategy.",
      "type": [
        "string",
        "null"
      ]
    },
    "useDefaultResources": {
      "description": "UseDefaultResources controls resource settings By default, operator sets built-in resource requirements",
      "type": [
        "boolean",
        "null"
      ]
    },
    "useStrictSecurity": {
      "description": "UseStrictSecurity enables strict security mode for component it restricts disk writes access uses non-root user out of the box drops not needed security permissions",
      "type": [
        "boolean",
        "null"
      ]
    },
    "useVMConfigReloader": {
      "description": "UseVMConfigReloader replaces prometheus-like config-reloader with vm one. It uses secrets watch instead of file watch which greatly increases speed of config updates",
      "type": [
        "boolean",
        "null"
      ]
    },
    "volumeMounts": {
      "description": "VolumeMounts allows configuration of additional VolumeMounts on the output Deployment/StatefulSet definition. VolumeMounts specified will be appended to other VolumeMounts in the Application container",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "default": {},
        "$ref": "_definitions.json#/definitions/io.k8s.api.core.v1.VolumeMount"
      }
    },
    "volumes": {
      "description": "Volumes allows configuration of additional volumes on the output Deployment/StatefulSet definition. Volumes specified will be appended to other volumes that are generated. / +optional",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "default": {},
        "$ref": "_definitions.json#/definitions/io.k8s.api.core.v1.Volume"
      }
    }
  },
  "additionalProperties": false,
  "$schema": "http://json-schema.org/schema#"
}