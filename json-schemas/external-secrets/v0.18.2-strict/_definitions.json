{
  "definitions": {
    "io.external-secrets.apis.externalsecrets.v1.AWSAuth": {
      "description": "AWSAuth tells the controller how to do authentication with aws. Only one of secretRef or jwt can be specified. if none is specified the controller will load credentials using the aws sdk defaults.",
      "type": "object",
      "properties": {
        "jwt": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AWSJWTAuth"
        },
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AWSAuthSecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.AWSAuthSecretRef": {
      "description": "AWSAuthSecretRef holds secret references for AWS credentials both AccessKeyID and SecretAccessKey must be defined in order to properly authenticate.",
      "type": "object",
      "properties": {
        "accessKeyIDSecretRef": {
          "description": "The AccessKeyID is used for authentication",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "secretAccessKeySecretRef": {
          "description": "The SecretAccessKey is used for authentication",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "sessionTokenSecretRef": {
          "description": "The SessionToken used for authentication This must be defined if AccessKeyID and SecretAccessKey are temporary credentials see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.AWSJWTAuth": {
      "description": "Authenticate against AWS using service account tokens.",
      "type": "object",
      "properties": {
        "serviceAccountRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.AWSProvider": {
      "description": "AWSProvider configures a store to sync secrets with AWS.",
      "type": "object",
      "required": [
        "service",
        "region"
      ],
      "properties": {
        "additionalRoles": {
          "description": "AdditionalRoles is a chained list of Role ARNs which the provider will sequentially assume before assuming the Role",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "auth": {
          "description": "Auth defines the information necessary to authenticate against AWS if not set aws sdk will infer credentials from your environment see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AWSAuth"
        },
        "externalID": {
          "description": "AWS External ID set on assumed IAM roles",
          "type": "string"
        },
        "prefix": {
          "description": "Prefix adds a prefix to all retrieved values.",
          "type": "string"
        },
        "region": {
          "description": "AWS Region to be used for the provider",
          "type": "string",
          "default": ""
        },
        "role": {
          "description": "Role is a Role ARN which the provider will assume",
          "type": "string"
        },
        "secretsManager": {
          "description": "SecretsManager defines how the provider behaves when interacting with AWS SecretsManager",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.SecretsManager"
        },
        "service": {
          "description": "Service defines which service should be used to fetch the secrets",
          "type": "string",
          "default": ""
        },
        "sessionTags": {
          "description": "AWS STS assume role session tags",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.Tag"
          }
        },
        "transitiveTagKeys": {
          "description": "AWS STS assume role transitive session tags. Required when multiple rules are used with the provider",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.AkeylessAuth": {
      "type": "object",
      "properties": {
        "kubernetesAuth": {
          "description": "Kubernetes authenticates with Akeyless by passing the ServiceAccount token stored in the named Secret resource.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AkeylessKubernetesAuth"
        },
        "secretRef": {
          "description": "Reference to a Secret that contains the details to authenticate with Akeyless.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AkeylessAuthSecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.AkeylessAuthSecretRef": {
      "description": "AkeylessAuthSecretRef AKEYLESS_ACCESS_TYPE_PARAM: AZURE_OBJ_ID OR GCP_AUDIENCE OR ACCESS_KEY OR KUB_CONFIG_NAME.",
      "type": "object",
      "properties": {
        "accessID": {
          "description": "The SecretAccessID is used for authentication",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "accessType": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "accessTypeParam": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.AkeylessKubernetesAuth": {
      "description": "Authenticate with Kubernetes ServiceAccount token stored.",
      "type": "object",
      "required": [
        "accessID",
        "k8sConfName"
      ],
      "properties": {
        "accessID": {
          "description": "the Akeyless Kubernetes auth-method access-id",
          "type": "string",
          "default": ""
        },
        "k8sConfName": {
          "description": "Kubernetes-auth configuration name in Akeyless-Gateway",
          "type": "string",
          "default": ""
        },
        "secretRef": {
          "description": "Optional secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Akeyless. If a name is specified without a key, `token` is the default. If one is not specified, the one bound to the controller will be used.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "serviceAccountRef": {
          "description": "Optional service account field containing the name of a kubernetes ServiceAccount. If the service account is specified, the service account secret token JWT will be used for authenticating with Akeyless. If the service account selector is not supplied, the secretRef will be used instead.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.AkeylessProvider": {
      "description": "AkeylessProvider Configures an store to sync secrets using Akeyless KV.",
      "type": "object",
      "required": [
        "akeylessGWApiURL",
        "authSecretRef"
      ],
      "properties": {
        "akeylessGWApiURL": {
          "description": "Akeyless GW API Url from which the secrets to be fetched from.",
          "type": "string"
        },
        "authSecretRef": {
          "description": "Auth configures how the operator authenticates with Akeyless.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AkeylessAuth"
        },
        "caBundle": {
          "description": "PEM/base64 encoded CA bundle used to validate Akeyless Gateway certificate. Only used if the AkeylessGWApiURL URL is using HTTPS protocol. If not set the system root certificates are used to validate the TLS connection.",
          "type": "string",
          "format": "byte"
        },
        "caProvider": {
          "description": "The provider for the CA bundle to use to validate Akeyless Gateway certificate.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.CAProvider"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.AlibabaAuth": {
      "description": "AlibabaAuth contains a secretRef for credentials.",
      "type": "object",
      "properties": {
        "rrsa": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AlibabaRRSAAuth"
        },
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AlibabaAuthSecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.AlibabaAuthSecretRef": {
      "description": "AlibabaAuthSecretRef holds secret references for Alibaba credentials.",
      "type": "object",
      "required": [
        "accessKeyIDSecretRef",
        "accessKeySecretSecretRef"
      ],
      "properties": {
        "accessKeyIDSecretRef": {
          "description": "The AccessKeyID is used for authentication",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "accessKeySecretSecretRef": {
          "description": "The AccessKeySecret is used for authentication",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.AlibabaProvider": {
      "description": "AlibabaProvider configures a store to sync secrets using the Alibaba Secret Manager provider.",
      "type": "object",
      "required": [
        "auth",
        "regionID"
      ],
      "properties": {
        "auth": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AlibabaAuth"
        },
        "regionID": {
          "description": "Alibaba Region to be used for the provider",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.AlibabaRRSAAuth": {
      "description": "Authenticate against Alibaba using RRSA.",
      "type": "object",
      "required": [
        "oidcProviderArn",
        "oidcTokenFilePath",
        "roleArn",
        "sessionName"
      ],
      "properties": {
        "oidcProviderArn": {
          "type": "string",
          "default": ""
        },
        "oidcTokenFilePath": {
          "type": "string",
          "default": ""
        },
        "roleArn": {
          "type": "string",
          "default": ""
        },
        "sessionName": {
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.AuthorizationProtocol": {
      "description": "AuthorizationProtocol contains the protocol-specific configuration",
      "type": "object",
      "properties": {
        "ntlm": {
          "description": "NTLMProtocol configures the store to use NTLM for auth",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.NTLMProtocol"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.AzureAuthCredentials": {
      "type": "object",
      "required": [
        "identityId"
      ],
      "properties": {
        "identityId": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "resource": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.AzureKVAuth": {
      "description": "Configuration used to authenticate with Azure.",
      "type": "object",
      "properties": {
        "clientCertificate": {
          "description": "The Azure ClientCertificate of the service principle used for authentication.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "clientId": {
          "description": "The Azure clientId of the service principle or managed identity used for authentication.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "clientSecret": {
          "description": "The Azure ClientSecret of the service principle used for authentication.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "tenantId": {
          "description": "The Azure tenantId of the managed identity used for authentication.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.AzureKVProvider": {
      "description": "Configures an store to sync secrets using Azure KV.",
      "type": "object",
      "required": [
        "vaultUrl"
      ],
      "properties": {
        "authSecretRef": {
          "description": "Auth configures how the operator authenticates with Azure. Required for ServicePrincipal auth type. Optional for WorkloadIdentity.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AzureKVAuth"
        },
        "authType": {
          "description": "Auth type defines how to authenticate to the keyvault service. Valid values are: - \"ServicePrincipal\" (default): Using a service principal (tenantId, clientId, clientSecret) - \"ManagedIdentity\": Using Managed Identity assigned to the pod (see aad-pod-identity)",
          "type": "string"
        },
        "environmentType": {
          "description": "EnvironmentType specifies the Azure cloud environment endpoints to use for connecting and authenticating with Azure. By default it points to the public cloud AAD endpoint. The following endpoints are available, also see here: https://github.com/Azure/go-autorest/blob/main/autorest/azure/environments.go#L152 PublicCloud, USGovernmentCloud, ChinaCloud, GermanCloud",
          "type": "string"
        },
        "identityId": {
          "description": "If multiple Managed Identity is assigned to the pod, you can select the one to be used",
          "type": "string"
        },
        "serviceAccountRef": {
          "description": "ServiceAccountRef specified the service account that should be used when authenticating with WorkloadIdentity.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector"
        },
        "tenantId": {
          "description": "TenantID configures the Azure Tenant to send requests to. Required for ServicePrincipal auth type. Optional for WorkloadIdentity.",
          "type": "string"
        },
        "vaultUrl": {
          "description": "Vault Url from which the secrets to be fetched from.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.BeyondTrustProviderSecretRef": {
      "type": "object",
      "properties": {
        "secretRef": {
          "description": "SecretRef references a key in a secret that will be used as value.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "value": {
          "description": "Value can be specified directly to set a value without using a secret.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.BeyondtrustAuth": {
      "description": "Configures a store to sync secrets using BeyondTrust Password Safe.",
      "type": "object",
      "properties": {
        "apiKey": {
          "description": "APIKey If not provided then ClientID/ClientSecret become required.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.BeyondTrustProviderSecretRef"
        },
        "certificate": {
          "description": "Certificate (cert.pem) for use when authenticating with an OAuth client Id using a Client Certificate.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.BeyondTrustProviderSecretRef"
        },
        "certificateKey": {
          "description": "Certificate private key (key.pem). For use when authenticating with an OAuth client Id",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.BeyondTrustProviderSecretRef"
        },
        "clientId": {
          "description": "ClientID is the API OAuth Client ID.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.BeyondTrustProviderSecretRef"
        },
        "clientSecret": {
          "description": "ClientSecret is the API OAuth Client Secret.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.BeyondTrustProviderSecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.BeyondtrustProvider": {
      "type": "object",
      "required": [
        "auth",
        "server"
      ],
      "properties": {
        "auth": {
          "description": "Auth configures how the operator authenticates with Beyondtrust.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.BeyondtrustAuth"
        },
        "server": {
          "description": "Auth configures how API server works.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.BeyondtrustServer"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.BeyondtrustServer": {
      "description": "Configures a store to sync secrets using BeyondTrust Password Safe.",
      "type": "object",
      "required": [
        "apiUrl",
        "verifyCA"
      ],
      "properties": {
        "apiUrl": {
          "type": "string",
          "default": ""
        },
        "apiVersion": {
          "type": "string"
        },
        "clientTimeOutSeconds": {
          "description": "Timeout specifies a time limit for requests made by this Client. The timeout includes connection time, any redirects, and reading the response body. Defaults to 45 seconds.",
          "type": "integer",
          "format": "int32"
        },
        "retrievalType": {
          "description": "The secret retrieval type. SECRET = Secrets Safe (credential, text, file). MANAGED_ACCOUNT = Password Safe account associated with a system.",
          "type": "string"
        },
        "separator": {
          "description": "A character that separates the folder names.",
          "type": "string"
        },
        "verifyCA": {
          "type": "boolean",
          "default": false
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.BitwardenSecretsManagerAuth": {
      "description": "BitwardenSecretsManagerAuth contains the ref to the secret that contains the machine account token.",
      "type": "object",
      "required": [
        "secretRef"
      ],
      "properties": {
        "secretRef": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.BitwardenSecretsManagerSecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.BitwardenSecretsManagerProvider": {
      "description": "BitwardenSecretsManagerProvider configures a store to sync secrets with a Bitwarden Secrets Manager instance.",
      "type": "object",
      "required": [
        "organizationID",
        "projectID",
        "auth"
      ],
      "properties": {
        "apiURL": {
          "type": "string"
        },
        "auth": {
          "description": "Auth configures how secret-manager authenticates with a bitwarden machine account instance. Make sure that the token being used has permissions on the given secret.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.BitwardenSecretsManagerAuth"
        },
        "bitwardenServerSDKURL": {
          "type": "string"
        },
        "caBundle": {
          "description": "Base64 encoded certificate for the bitwarden server sdk. The sdk MUST run with HTTPS to make sure no MITM attack can be performed.",
          "type": "string"
        },
        "caProvider": {
          "description": "see: https://external-secrets.io/latest/spec/#external-secrets.io/v1alpha1.CAProvider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.CAProvider"
        },
        "identityURL": {
          "type": "string"
        },
        "organizationID": {
          "description": "OrganizationID determines which organization this secret store manages.",
          "type": "string",
          "default": ""
        },
        "projectID": {
          "description": "ProjectID determines which project this secret store manages.",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.BitwardenSecretsManagerSecretRef": {
      "description": "BitwardenSecretsManagerSecretRef contains the credential ref to the bitwarden instance.",
      "type": "object",
      "required": [
        "credentials"
      ],
      "properties": {
        "credentials": {
          "description": "AccessToken used for the bitwarden instance.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.CAProvider": {
      "description": "Used to provide custom certificate authority (CA) certificates for a secret store. The CAProvider points to a Secret or ConfigMap resource that contains a PEM-encoded certificate.",
      "type": "object",
      "required": [
        "type",
        "name"
      ],
      "properties": {
        "key": {
          "description": "The key where the CA certificate can be found in the Secret or ConfigMap.",
          "type": "string"
        },
        "name": {
          "description": "The name of the object located at the provider type.",
          "type": "string",
          "default": ""
        },
        "namespace": {
          "description": "The namespace the Provider type is in. Can only be defined when used in a ClusterSecretStore.",
          "type": "string"
        },
        "type": {
          "description": "The type of provider to use such as \"Secret\", or \"ConfigMap\".",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.CSMAuth": {
      "description": "CSMAuth contains a secretRef for credentials.",
      "type": "object",
      "properties": {
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.CSMAuthSecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.CSMAuthSecretRef": {
      "description": "CSMAuthSecretRef holds secret references for Cloud.ru credentials.",
      "type": "object",
      "required": [
        "accessKeyIDSecretRef",
        "accessKeySecretSecretRef"
      ],
      "properties": {
        "accessKeyIDSecretRef": {
          "description": "The AccessKeyID is used for authentication",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "accessKeySecretSecretRef": {
          "description": "The AccessKeySecret is used for authentication",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.CertAuth": {
      "type": "object",
      "properties": {
        "clientCert": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "clientKey": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ChefAuth": {
      "description": "ChefAuth contains a secretRef for credentials.",
      "type": "object",
      "required": [
        "secretRef"
      ],
      "properties": {
        "secretRef": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ChefAuthSecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ChefAuthSecretRef": {
      "description": "ChefAuthSecretRef holds secret references for chef server login credentials.",
      "type": "object",
      "required": [
        "privateKeySecretRef"
      ],
      "properties": {
        "privateKeySecretRef": {
          "description": "SecretKey is the Signing Key in PEM format, used for authentication.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ChefProvider": {
      "description": "ChefProvider configures a store to sync secrets using basic chef server connection credentials.",
      "type": "object",
      "required": [
        "auth",
        "username",
        "serverUrl"
      ],
      "properties": {
        "auth": {
          "description": "Auth defines the information necessary to authenticate against chef Server",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ChefAuth"
        },
        "serverUrl": {
          "description": "ServerURL is the chef server URL used to connect to. If using orgs you should include your org in the url and terminate the url with a \"/\"",
          "type": "string",
          "default": ""
        },
        "username": {
          "description": "UserName should be the user ID on the chef server",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.CloudruSMProvider": {
      "description": "CloudruSMProvider configures a store to sync secrets using the Cloud.ru Secret Manager provider.",
      "type": "object",
      "required": [
        "auth"
      ],
      "properties": {
        "auth": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.CSMAuth"
        },
        "projectID": {
          "description": "ProjectID is the project, which the secrets are stored in.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ClusterExternalSecret": {
      "description": "ClusterExternalSecret is the Schema for the clusterexternalsecrets API.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ClusterExternalSecretSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ClusterExternalSecretStatus"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ClusterExternalSecretNamespaceFailure": {
      "description": "ClusterExternalSecretNamespaceFailure represents a failed namespace deployment and it's reason.",
      "type": "object",
      "required": [
        "namespace"
      ],
      "properties": {
        "namespace": {
          "description": "Namespace is the namespace that failed when trying to apply an ExternalSecret",
          "type": "string",
          "default": ""
        },
        "reason": {
          "description": "Reason is why the ExternalSecret failed to apply to the namespace",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ClusterExternalSecretSpec": {
      "description": "ClusterExternalSecretSpec defines the desired state of ClusterExternalSecret.",
      "type": "object",
      "required": [
        "externalSecretSpec"
      ],
      "properties": {
        "externalSecretMetadata": {
          "description": "The metadata of the external secrets to be created",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretMetadata"
        },
        "externalSecretName": {
          "description": "The name of the external secrets to be created. Defaults to the name of the ClusterExternalSecret",
          "type": "string"
        },
        "externalSecretSpec": {
          "description": "The spec for the ExternalSecrets to be created",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretSpec"
        },
        "namespaceSelector": {
          "description": "The labels to select by to find the Namespaces to create the ExternalSecrets in. Deprecated: Use NamespaceSelectors instead.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "namespaceSelectors": {
          "description": "A list of labels to select by to find the Namespaces to create the ExternalSecrets in. The selectors are ORed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
          }
        },
        "namespaces": {
          "description": "Choose namespaces by name. This field is ORed with anything that NamespaceSelectors ends up choosing. Deprecated: Use NamespaceSelectors instead.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "refreshTime": {
          "description": "The time in which the controller should reconcile its objects and recheck namespaces for labels.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Duration"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ClusterExternalSecretStatus": {
      "description": "ClusterExternalSecretStatus defines the observed state of ClusterExternalSecret.",
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ClusterExternalSecretStatusCondition"
          }
        },
        "externalSecretName": {
          "description": "ExternalSecretName is the name of the ExternalSecrets created by the ClusterExternalSecret",
          "type": "string"
        },
        "failedNamespaces": {
          "description": "Failed namespaces are the namespaces that failed to apply an ExternalSecret",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ClusterExternalSecretNamespaceFailure"
          }
        },
        "provisionedNamespaces": {
          "description": "ProvisionedNamespaces are the namespaces where the ClusterExternalSecret has secrets",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ClusterExternalSecretStatusCondition": {
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "message": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "default": ""
        },
        "type": {
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ClusterSecretStore": {
      "description": "ClusterSecretStore represents a secure external location for storing secrets, which can be referenced as part of `storeRef` fields.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.SecretStoreSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.SecretStoreStatus"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ClusterSecretStoreCondition": {
      "description": "ClusterSecretStoreCondition describes a condition by which to choose namespaces to process ExternalSecrets in for a ClusterSecretStore instance.",
      "type": "object",
      "properties": {
        "namespaceRegexes": {
          "description": "Choose namespaces by using regex matching",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "namespaceSelector": {
          "description": "Choose namespace using a labelSelector",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "namespaces": {
          "description": "Choose namespaces by name",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ConjurAPIKey": {
      "type": "object",
      "required": [
        "account",
        "userRef",
        "apiKeyRef"
      ],
      "properties": {
        "account": {
          "description": "Account is the Conjur organization account name.",
          "type": "string",
          "default": ""
        },
        "apiKeyRef": {
          "description": "A reference to a specific 'key' containing the Conjur API key within a Secret resource. In some instances, `key` is a required field.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "userRef": {
          "description": "A reference to a specific 'key' containing the Conjur username within a Secret resource. In some instances, `key` is a required field.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ConjurAuth": {
      "type": "object",
      "properties": {
        "apikey": {
          "description": "Authenticates with Conjur using an API key.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ConjurAPIKey"
        },
        "jwt": {
          "description": "Jwt enables JWT authentication using Kubernetes service account tokens.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ConjurJWT"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ConjurJWT": {
      "type": "object",
      "required": [
        "account",
        "serviceID"
      ],
      "properties": {
        "account": {
          "description": "Account is the Conjur organization account name.",
          "type": "string",
          "default": ""
        },
        "hostId": {
          "description": "Optional HostID for JWT authentication. This may be used depending on how the Conjur JWT authenticator policy is configured.",
          "type": "string",
          "default": ""
        },
        "secretRef": {
          "description": "Optional SecretRef that refers to a key in a Secret resource containing JWT token to authenticate with Conjur using the JWT authentication method.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "serviceAccountRef": {
          "description": "Optional ServiceAccountRef specifies the Kubernetes service account for which to request a token for with the `TokenRequest` API.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector"
        },
        "serviceID": {
          "description": "The conjur authn jwt webservice id",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ConjurProvider": {
      "type": "object",
      "required": [
        "url",
        "auth"
      ],
      "properties": {
        "auth": {
          "description": "Defines authentication settings for connecting to Conjur.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ConjurAuth"
        },
        "caBundle": {
          "description": "CABundle is a PEM encoded CA bundle that will be used to validate the Conjur server certificate.",
          "type": "string"
        },
        "caProvider": {
          "description": "Used to provide custom certificate authority (CA) certificates for a secret store. The CAProvider points to a Secret or ConfigMap resource that contains a PEM-encoded certificate.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.CAProvider"
        },
        "url": {
          "description": "URL is the endpoint of the Conjur instance.",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.DelineaProvider": {
      "description": "See https://github.com/DelineaXPM/dsv-sdk-go/blob/main/vault/vault.go.",
      "type": "object",
      "required": [
        "clientId",
        "clientSecret",
        "tenant"
      ],
      "properties": {
        "clientId": {
          "description": "ClientID is the non-secret part of the credential.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.DelineaProviderSecretRef"
        },
        "clientSecret": {
          "description": "ClientSecret is the secret part of the credential.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.DelineaProviderSecretRef"
        },
        "tenant": {
          "description": "Tenant is the chosen hostname / site name.",
          "type": "string",
          "default": ""
        },
        "tld": {
          "description": "TLD is based on the server location that was chosen during provisioning. If unset, defaults to \"com\".",
          "type": "string"
        },
        "urlTemplate": {
          "description": "URLTemplate If unset, defaults to \"https://%s.secretsvaultcloud.%s/v1/%s%s\".",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.DelineaProviderSecretRef": {
      "type": "object",
      "properties": {
        "secretRef": {
          "description": "SecretRef references a key in a secret that will be used as value.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "value": {
          "description": "Value can be specified directly to set a value without using a secret.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.Device42Auth": {
      "type": "object",
      "required": [
        "secretRef"
      ],
      "properties": {
        "secretRef": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.Device42SecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.Device42Provider": {
      "description": "Device42Provider configures a store to sync secrets with a Device42 instance.",
      "type": "object",
      "required": [
        "host",
        "auth"
      ],
      "properties": {
        "auth": {
          "description": "Auth configures how secret-manager authenticates with a Device42 instance.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.Device42Auth"
        },
        "host": {
          "description": "URL configures the Device42 instance URL.",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.Device42SecretRef": {
      "type": "object",
      "properties": {
        "credentials": {
          "description": "Username / Password is used for authentication.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.DopplerAuth": {
      "type": "object",
      "required": [
        "secretRef"
      ],
      "properties": {
        "secretRef": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.DopplerAuthSecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.DopplerAuthSecretRef": {
      "type": "object",
      "required": [
        "dopplerToken"
      ],
      "properties": {
        "dopplerToken": {
          "description": "The DopplerToken is used for authentication. See https://docs.doppler.com/reference/api#authentication for auth token types. The Key attribute defaults to dopplerToken if not specified.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.DopplerProvider": {
      "description": "DopplerProvider configures a store to sync secrets using the Doppler provider. Project and Config are required if not using a Service Token.",
      "type": "object",
      "required": [
        "auth"
      ],
      "properties": {
        "auth": {
          "description": "Auth configures how the Operator authenticates with the Doppler API",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.DopplerAuth"
        },
        "config": {
          "description": "Doppler config (required if not using a Service Token)",
          "type": "string"
        },
        "format": {
          "description": "Format enables the downloading of secrets as a file (string)",
          "type": "string"
        },
        "nameTransformer": {
          "description": "Environment variable compatible name transforms that change secret names to a different format",
          "type": "string"
        },
        "project": {
          "description": "Doppler project (required if not using a Service Token)",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ExternalSecret": {
      "description": "ExternalSecret is the Schema for the external-secrets API.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretStatus"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ExternalSecretData": {
      "description": "ExternalSecretData defines the connection between the Kubernetes Secret key (spec.data.<key>) and the Provider data.",
      "type": "object",
      "required": [
        "secretKey",
        "remoteRef"
      ],
      "properties": {
        "remoteRef": {
          "description": "RemoteRef points to the remote secret and defines which secret (version/property/..) to fetch.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretDataRemoteRef"
        },
        "secretKey": {
          "description": "The key in the Kubernetes Secret to store the value.",
          "type": "string",
          "default": ""
        },
        "sourceRef": {
          "description": "SourceRef allows you to override the source from which the value will be pulled.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.StoreSourceRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ExternalSecretDataFromRemoteRef": {
      "type": "object",
      "properties": {
        "extract": {
          "description": "Used to extract multiple key/value pairs from one secret Note: Extract does not support sourceRef.Generator or sourceRef.GeneratorRef.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretDataRemoteRef"
        },
        "find": {
          "description": "Used to find secrets based on tags or regular expressions Note: Find does not support sourceRef.Generator or sourceRef.GeneratorRef.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretFind"
        },
        "rewrite": {
          "description": "Used to rewrite secret Keys after getting them from the secret Provider Multiple Rewrite operations can be provided. They are applied in a layered order (first to last)",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretRewrite"
          }
        },
        "sourceRef": {
          "description": "SourceRef points to a store or generator which contains secret values ready to use. Use this in combination with Extract or Find pull values out of a specific SecretStore. When sourceRef points to a generator Extract or Find is not supported. The generator returns a static map of values",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.StoreGeneratorSourceRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ExternalSecretDataRemoteRef": {
      "description": "ExternalSecretDataRemoteRef defines Provider data location.",
      "type": "object",
      "required": [
        "key"
      ],
      "properties": {
        "conversionStrategy": {
          "description": "Used to define a conversion Strategy",
          "type": "string"
        },
        "decodingStrategy": {
          "description": "Used to define a decoding Strategy",
          "type": "string"
        },
        "key": {
          "description": "Key is the key used in the Provider, mandatory",
          "type": "string",
          "default": ""
        },
        "metadataPolicy": {
          "description": "Policy for fetching tags/labels from provider secrets, possible options are Fetch, None. Defaults to None",
          "type": "string"
        },
        "property": {
          "description": "Used to select a specific property of the Provider value (if a map), if supported",
          "type": "string"
        },
        "version": {
          "description": "Used to select a specific version of the Provider value, if supported",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ExternalSecretFind": {
      "type": "object",
      "properties": {
        "conversionStrategy": {
          "description": "Used to define a conversion Strategy",
          "type": "string"
        },
        "decodingStrategy": {
          "description": "Used to define a decoding Strategy",
          "type": "string"
        },
        "name": {
          "description": "Finds secrets based on the name.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.FindName"
        },
        "path": {
          "description": "A root path to start the find operations.",
          "type": "string"
        },
        "tags": {
          "description": "Find secrets based on tags.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ExternalSecretMetadata": {
      "description": "ExternalSecretMetadata defines metadata fields for the ExternalSecret generated by the ClusterExternalSecret.",
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ExternalSecretRewrite": {
      "type": "object",
      "properties": {
        "merge": {
          "description": "Used to merge key/values in one single Secret The resulting key will contain all values from the specified secrets",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretRewriteMerge"
        },
        "regexp": {
          "description": "Used to rewrite with regular expressions. The resulting key will be the output of a regexp.ReplaceAll operation.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretRewriteRegexp"
        },
        "transform": {
          "description": "Used to apply string transformation on the secrets. The resulting key will be the output of the template applied by the operation.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretRewriteTransform"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ExternalSecretRewriteMerge": {
      "type": "object",
      "properties": {
        "conflictPolicy": {
          "description": "Used to define the policy to use in conflict resolution.",
          "type": "string"
        },
        "into": {
          "description": "Used to define the target key of the merge operation. Required if strategy is JSON. Ignored otherwise.",
          "type": "string"
        },
        "priority": {
          "description": "Used to define key priority in conflict resolution.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "strategy": {
          "description": "Used to define the strategy to use in the merge operation.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ExternalSecretRewriteRegexp": {
      "type": "object",
      "required": [
        "source",
        "target"
      ],
      "properties": {
        "source": {
          "description": "Used to define the regular expression of a re.Compiler.",
          "type": "string",
          "default": ""
        },
        "target": {
          "description": "Used to define the target pattern of a ReplaceAll operation.",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ExternalSecretRewriteTransform": {
      "type": "object",
      "required": [
        "template"
      ],
      "properties": {
        "template": {
          "description": "Used to define the template to apply on the secret name. `.value ` will specify the secret name in the template.",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ExternalSecretSpec": {
      "description": "ExternalSecretSpec defines the desired state of ExternalSecret.",
      "type": "object",
      "properties": {
        "data": {
          "description": "Data defines the connection between the Kubernetes Secret keys and the Provider data",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretData"
          }
        },
        "dataFrom": {
          "description": "DataFrom is used to fetch all properties from a specific Provider data If multiple entries are specified, the Secret keys are merged in the specified order",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretDataFromRemoteRef"
          }
        },
        "refreshInterval": {
          "description": "RefreshInterval is the amount of time before the values are read again from the SecretStore provider, specified as Golang Duration strings. Valid time units are \"ns\", \"us\" (or \"\u00b5s\"), \"ms\", \"s\", \"m\", \"h\" Example values: \"1h\", \"2h30m\", \"10s\" May be set to zero to fetch and create it once. Defaults to 1h.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Duration"
        },
        "refreshPolicy": {
          "description": "RefreshPolicy determines how the ExternalSecret should be refreshed: - CreatedOnce: Creates the Secret only if it does not exist and does not update it thereafter - Periodic: Synchronizes the Secret from the external source at regular intervals specified by refreshInterval.\n  No periodic updates occur if refreshInterval is 0.\n- OnChange: Only synchronizes the Secret when the ExternalSecret's metadata or specification changes",
          "type": "string"
        },
        "secretStoreRef": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.SecretStoreRef"
        },
        "target": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretTarget"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ExternalSecretStatus": {
      "type": "object",
      "properties": {
        "binding": {
          "description": "Binding represents a servicebinding.io Provisioned Service reference to the secret",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "conditions": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretStatusCondition"
          }
        },
        "refreshTime": {
          "description": "refreshTime is the time and date the external secret was fetched and the target secret updated",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "syncedResourceVersion": {
          "description": "SyncedResourceVersion keeps track of the last synced version",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ExternalSecretStatusCondition": {
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "default": ""
        },
        "type": {
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ExternalSecretTarget": {
      "description": "ExternalSecretTarget defines the Kubernetes Secret to be created There can be only one target per ExternalSecret.",
      "type": "object",
      "properties": {
        "creationPolicy": {
          "description": "CreationPolicy defines rules on how to create the resulting Secret. Defaults to \"Owner\"",
          "type": "string"
        },
        "deletionPolicy": {
          "description": "DeletionPolicy defines rules on how to delete the resulting Secret. Defaults to \"Retain\"",
          "type": "string"
        },
        "immutable": {
          "description": "Immutable defines if the final secret will be immutable",
          "type": "boolean"
        },
        "name": {
          "description": "The name of the Secret resource to be managed. Defaults to the .metadata.name of the ExternalSecret resource",
          "type": "string"
        },
        "template": {
          "description": "Template defines a blueprint for the created Secret resource.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretTemplate"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ExternalSecretTemplate": {
      "description": "ExternalSecretTemplate defines a blueprint for the created Secret resource. we can not use native corev1.Secret, it will have empty ObjectMeta values: https://github.com/kubernetes-sigs/controller-tools/issues/448",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "engineVersion": {
          "description": "EngineVersion specifies the template engine version that should be used to compile/execute the template specified in .data and .templateFrom[].",
          "type": "string"
        },
        "mergePolicy": {
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretTemplateMetadata"
        },
        "templateFrom": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.TemplateFrom"
          }
        },
        "type": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ExternalSecretTemplateMetadata": {
      "description": "ExternalSecretTemplateMetadata defines metadata fields for the Secret blueprint.",
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.FakeProvider": {
      "description": "FakeProvider configures a fake provider that returns static values.",
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.FakeProviderData"
          }
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.FakeProviderData": {
      "type": "object",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string",
          "default": ""
        },
        "value": {
          "type": "string",
          "default": ""
        },
        "version": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.FindName": {
      "type": "object",
      "properties": {
        "regexp": {
          "description": "Finds secrets base",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.FortanixProvider": {
      "type": "object",
      "properties": {
        "apiKey": {
          "description": "APIKey is the API token to access SDKMS Applications.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.FortanixProviderSecretRef"
        },
        "apiUrl": {
          "description": "APIURL is the URL of SDKMS API. Defaults to `sdkms.fortanix.com`.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.FortanixProviderSecretRef": {
      "type": "object",
      "properties": {
        "secretRef": {
          "description": "SecretRef is a reference to a secret containing the SDKMS API Key.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.GCPSMAuth": {
      "type": "object",
      "properties": {
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.GCPSMAuthSecretRef"
        },
        "workloadIdentity": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.GCPWorkloadIdentity"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.GCPSMAuthSecretRef": {
      "type": "object",
      "properties": {
        "secretAccessKeySecretRef": {
          "description": "The SecretAccessKey is used for authentication",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.GCPSMProvider": {
      "description": "GCPSMProvider Configures a store to sync secrets using the GCP Secret Manager provider.",
      "type": "object",
      "properties": {
        "auth": {
          "description": "Auth defines the information necessary to authenticate against GCP",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.GCPSMAuth"
        },
        "location": {
          "description": "Location optionally defines a location for a secret",
          "type": "string"
        },
        "projectID": {
          "description": "ProjectID project where secret is located",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.GCPWorkloadIdentity": {
      "type": "object",
      "required": [
        "serviceAccountRef"
      ],
      "properties": {
        "clusterLocation": {
          "description": "ClusterLocation is the location of the cluster If not specified, it fetches information from the metadata server",
          "type": "string"
        },
        "clusterName": {
          "description": "ClusterName is the name of the cluster If not specified, it fetches information from the metadata server",
          "type": "string"
        },
        "clusterProjectID": {
          "description": "ClusterProjectID is the project ID of the cluster If not specified, it fetches information from the metadata server",
          "type": "string"
        },
        "serviceAccountRef": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.GeneratorRef": {
      "description": "GeneratorRef points to a generator custom resource.",
      "type": "object",
      "required": [
        "kind",
        "name"
      ],
      "properties": {
        "apiVersion": {
          "description": "Specify the apiVersion of the generator resource",
          "type": "string"
        },
        "kind": {
          "description": "Specify the Kind of the generator resource",
          "type": "string",
          "default": ""
        },
        "name": {
          "description": "Specify the name of the generator resource",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.GithubAppAuth": {
      "type": "object",
      "required": [
        "privateKey"
      ],
      "properties": {
        "privateKey": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.GithubProvider": {
      "description": "Configures a store to push secrets to Github Actions.",
      "type": "object",
      "required": [
        "auth",
        "appID",
        "installationID",
        "organization"
      ],
      "properties": {
        "appID": {
          "description": "appID specifies the Github APP that will be used to authenticate the client",
          "type": "integer",
          "format": "int64",
          "default": 0
        },
        "auth": {
          "description": "auth configures how secret-manager authenticates with a Github instance.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.GithubAppAuth"
        },
        "environment": {
          "description": "environment will be used to fetch secrets from a particular environment within a github repository",
          "type": "string"
        },
        "installationID": {
          "description": "installationID specifies the Github APP installation that will be used to authenticate the client",
          "type": "integer",
          "format": "int64",
          "default": 0
        },
        "organization": {
          "description": "organization will be used to fetch secrets from the Github organization",
          "type": "string",
          "default": ""
        },
        "repository": {
          "description": "repository will be used to fetch secrets from the Github repository within an organization",
          "type": "string"
        },
        "uploadURL": {
          "description": "Upload URL for enterprise instances. Default to URL.",
          "type": "string"
        },
        "url": {
          "description": "URL configures the Github instance URL. Defaults to https://github.com/.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.GitlabAuth": {
      "type": "object",
      "required": [
        "SecretRef"
      ],
      "properties": {
        "SecretRef": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.GitlabSecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.GitlabProvider": {
      "description": "Configures a store to sync secrets with a GitLab instance.",
      "type": "object",
      "required": [
        "auth"
      ],
      "properties": {
        "auth": {
          "description": "Auth configures how secret-manager authenticates with a GitLab instance.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.GitlabAuth"
        },
        "caBundle": {
          "description": "Base64 encoded certificate for the GitLab server sdk. The sdk MUST run with HTTPS to make sure no MITM attack can be performed.",
          "type": "string",
          "format": "byte"
        },
        "caProvider": {
          "description": "see: https://external-secrets.io/latest/spec/#external-secrets.io/v1alpha1.CAProvider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.CAProvider"
        },
        "environment": {
          "description": "Environment environment_scope of gitlab CI/CD variables (Please see https://docs.gitlab.com/ee/ci/environments/#create-a-static-environment on how to create environments)",
          "type": "string"
        },
        "groupIDs": {
          "description": "GroupIDs specify, which gitlab groups to pull secrets from. Group secrets are read from left to right followed by the project variables.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "inheritFromGroups": {
          "description": "InheritFromGroups specifies whether parent groups should be discovered and checked for secrets.",
          "type": "boolean"
        },
        "projectID": {
          "description": "ProjectID specifies a project where secrets are located.",
          "type": "string"
        },
        "url": {
          "description": "URL configures the GitLab instance URL. Defaults to https://gitlab.com/.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.GitlabSecretRef": {
      "type": "object",
      "properties": {
        "accessToken": {
          "description": "AccessToken is used for authentication.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.IBMAuth": {
      "type": "object",
      "properties": {
        "containerAuth": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.IBMAuthContainerAuth"
        },
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.IBMAuthSecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.IBMAuthContainerAuth": {
      "description": "IBM Container-based auth with IAM Trusted Profile.",
      "type": "object",
      "required": [
        "profile"
      ],
      "properties": {
        "iamEndpoint": {
          "type": "string"
        },
        "profile": {
          "description": "the IBM Trusted Profile",
          "type": "string",
          "default": ""
        },
        "tokenLocation": {
          "description": "Location the token is mounted on the pod",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.IBMAuthSecretRef": {
      "type": "object",
      "properties": {
        "secretApiKeySecretRef": {
          "description": "The SecretAccessKey is used for authentication",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.IBMProvider": {
      "description": "Configures an store to sync secrets using a IBM Cloud Secrets Manager backend.",
      "type": "object",
      "required": [
        "auth"
      ],
      "properties": {
        "auth": {
          "description": "Auth configures how secret-manager authenticates with the IBM secrets manager.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.IBMAuth"
        },
        "serviceUrl": {
          "description": "ServiceURL is the Endpoint URL that is specific to the Secrets Manager service instance",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.InfisicalAuth": {
      "type": "object",
      "properties": {
        "azureAuthCredentials": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AzureAuthCredentials"
        },
        "universalAuthCredentials": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.UniversalAuthCredentials"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.InfisicalProvider": {
      "description": "InfisicalProvider configures a store to sync secrets using the Infisical provider.",
      "type": "object",
      "required": [
        "auth",
        "secretsScope"
      ],
      "properties": {
        "auth": {
          "description": "Auth configures how the Operator authenticates with the Infisical API",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.InfisicalAuth"
        },
        "hostAPI": {
          "description": "HostAPI specifies the base URL of the Infisical API. If not provided, it defaults to \"https://app.infisical.com/api\".",
          "type": "string"
        },
        "secretsScope": {
          "description": "SecretsScope defines the scope of the secrets within the workspace",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.MachineIdentityScopeInWorkspace"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.IntegrationInfo": {
      "description": "IntegrationInfo specifies the name and version of the integration built using the 1Password Go SDK.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name defaults to \"1Password SDK\".",
          "type": "string"
        },
        "version": {
          "description": "Version defaults to \"v1.0.0\".",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.KeeperSecurityProvider": {
      "description": "KeeperSecurityProvider Configures a store to sync secrets using Keeper Security.",
      "type": "object",
      "required": [
        "authRef",
        "folderID"
      ],
      "properties": {
        "authRef": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "folderID": {
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.KubernetesAuth": {
      "type": "object",
      "properties": {
        "cert": {
          "description": "has both clientCert and clientKey as secretKeySelector",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.CertAuth"
        },
        "serviceAccount": {
          "description": "points to a service account that should be used for authentication",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector"
        },
        "token": {
          "description": "use static token to authenticate with",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.TokenAuth"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.KubernetesProvider": {
      "description": "Configures a store to sync secrets with a Kubernetes instance.",
      "type": "object",
      "properties": {
        "auth": {
          "description": "Auth configures how secret-manager authenticates with a Kubernetes instance.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.KubernetesAuth"
        },
        "authRef": {
          "description": "A reference to a secret that contains the auth information.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "remoteNamespace": {
          "description": "Remote namespace to fetch the secrets from",
          "type": "string"
        },
        "server": {
          "description": "configures the Kubernetes server Address.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.KubernetesServer"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.KubernetesServer": {
      "type": "object",
      "properties": {
        "caBundle": {
          "description": "CABundle is a base64-encoded CA certificate",
          "type": "string",
          "format": "byte"
        },
        "caProvider": {
          "description": "see: https://external-secrets.io/v0.4.1/spec/#external-secrets.io/v1alpha1.CAProvider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.CAProvider"
        },
        "url": {
          "description": "configures the Kubernetes server Address.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.MachineIdentityScopeInWorkspace": {
      "type": "object",
      "required": [
        "environmentSlug",
        "projectSlug"
      ],
      "properties": {
        "environmentSlug": {
          "description": "EnvironmentSlug is the required slug identifier for the environment.",
          "type": "string",
          "default": ""
        },
        "expandSecretReferences": {
          "description": "ExpandSecretReferences indicates whether secret references should be expanded. Defaults to true if not provided.",
          "type": "boolean"
        },
        "projectSlug": {
          "description": "ProjectSlug is the required slug identifier for the project.",
          "type": "string",
          "default": ""
        },
        "recursive": {
          "description": "Recursive indicates whether the secrets should be fetched recursively. Defaults to false if not provided.",
          "type": "boolean"
        },
        "secretsPath": {
          "description": "SecretsPath specifies the path to the secrets within the workspace. Defaults to \"/\" if not provided.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.NTLMProtocol": {
      "description": "NTLMProtocol contains the NTLM-specific configuration.",
      "type": "object",
      "required": [
        "usernameSecret",
        "passwordSecret"
      ],
      "properties": {
        "passwordSecret": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "usernameSecret": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.OnboardbaseAuthSecretRef": {
      "description": "OnboardbaseAuthSecretRef holds secret references for onboardbase API Key credentials.",
      "type": "object",
      "required": [
        "apiKeyRef",
        "passcodeRef"
      ],
      "properties": {
        "apiKeyRef": {
          "description": "OnboardbaseAPIKey is the APIKey generated by an admin account. It is used to recognize and authorize access to a project and environment within onboardbase",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "passcodeRef": {
          "description": "OnboardbasePasscode is the passcode attached to the API Key",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.OnboardbaseProvider": {
      "description": "OnboardbaseProvider configures a store to sync secrets using the Onboardbase provider. Project and Config are required if not using a Service Token.",
      "type": "object",
      "required": [
        "auth",
        "apiHost",
        "project",
        "environment"
      ],
      "properties": {
        "apiHost": {
          "description": "APIHost use this to configure the host url for the API for selfhosted installation, default is https://public.onboardbase.com/api/v1/",
          "type": "string",
          "default": ""
        },
        "auth": {
          "description": "Auth configures how the Operator authenticates with the Onboardbase API",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.OnboardbaseAuthSecretRef"
        },
        "environment": {
          "description": "Environment is the name of an environmnent within a project to pull the secrets from",
          "type": "string",
          "default": ""
        },
        "project": {
          "description": "Project is an onboardbase project that the secrets should be pulled from",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.OnePasswordAuth": {
      "description": "OnePasswordAuth contains a secretRef for credentials.",
      "type": "object",
      "required": [
        "secretRef"
      ],
      "properties": {
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.OnePasswordAuthSecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.OnePasswordAuthSecretRef": {
      "description": "OnePasswordAuthSecretRef holds secret references for 1Password credentials.",
      "type": "object",
      "required": [
        "connectTokenSecretRef"
      ],
      "properties": {
        "connectTokenSecretRef": {
          "description": "The ConnectToken is used for authentication to a 1Password Connect Server.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.OnePasswordProvider": {
      "description": "OnePasswordProvider configures a store to sync secrets using the 1Password Secret Manager provider.",
      "type": "object",
      "required": [
        "auth",
        "connectHost",
        "vaults"
      ],
      "properties": {
        "auth": {
          "description": "Auth defines the information necessary to authenticate against OnePassword Connect Server",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.OnePasswordAuth"
        },
        "connectHost": {
          "description": "ConnectHost defines the OnePassword Connect Server to connect to",
          "type": "string",
          "default": ""
        },
        "vaults": {
          "description": "Vaults defines which OnePassword vaults to search in which order",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32",
            "default": 0
          }
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.OnePasswordSDKAuth": {
      "description": "OnePasswordSDKAuth contains a secretRef for the service account token.",
      "type": "object",
      "required": [
        "serviceAccountSecretRef"
      ],
      "properties": {
        "serviceAccountSecretRef": {
          "description": "ServiceAccountSecretRef points to the secret containing the token to access 1Password vault.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.OnePasswordSDKProvider": {
      "description": "OnePasswordSDKProvider configures a store to sync secrets using the 1Password sdk.",
      "type": "object",
      "required": [
        "vault",
        "auth"
      ],
      "properties": {
        "auth": {
          "description": "Auth defines the information necessary to authenticate against OnePassword API.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.OnePasswordSDKAuth"
        },
        "integrationInfo": {
          "description": "IntegrationInfo specifies the name and version of the integration built using the 1Password Go SDK. If you don't know which name and version to use, use `DefaultIntegrationName` and `DefaultIntegrationVersion`, respectively.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.IntegrationInfo"
        },
        "vault": {
          "description": "Vault defines the vault's name or uuid to access. Do NOT add op:// prefix. This will be done automatically.",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.OracleAuth": {
      "type": "object",
      "required": [
        "tenancy",
        "user",
        "secretRef"
      ],
      "properties": {
        "secretRef": {
          "description": "SecretRef to pass through sensitive information.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.OracleSecretRef"
        },
        "tenancy": {
          "description": "Tenancy is the tenancy OCID where user is located.",
          "type": "string",
          "default": ""
        },
        "user": {
          "description": "User is an access OCID specific to the account.",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.OracleProvider": {
      "description": "Configures an store to sync secrets using a Oracle Vault backend.",
      "type": "object",
      "required": [
        "region",
        "vault"
      ],
      "properties": {
        "auth": {
          "description": "Auth configures how secret-manager authenticates with the Oracle Vault. If empty, use the instance principal, otherwise the user credentials specified in Auth.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.OracleAuth"
        },
        "compartment": {
          "description": "Compartment is the vault compartment OCID. Required for PushSecret",
          "type": "string"
        },
        "encryptionKey": {
          "description": "EncryptionKey is the OCID of the encryption key within the vault. Required for PushSecret",
          "type": "string"
        },
        "principalType": {
          "description": "The type of principal to use for authentication. If left blank, the Auth struct will determine the principal type. This optional field must be specified if using workload identity.",
          "type": "string"
        },
        "region": {
          "description": "Region is the region where vault is located.",
          "type": "string",
          "default": ""
        },
        "serviceAccountRef": {
          "description": "ServiceAccountRef specified the service account that should be used when authenticating with WorkloadIdentity.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector"
        },
        "vault": {
          "description": "Vault is the vault's OCID of the specific vault where secret is located.",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.OracleSecretRef": {
      "type": "object",
      "required": [
        "privatekey",
        "fingerprint"
      ],
      "properties": {
        "fingerprint": {
          "description": "Fingerprint is the fingerprint of the API private key.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "privatekey": {
          "description": "PrivateKey is the user's API Signing Key in PEM format, used for authentication.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.PassboltAuth": {
      "description": "Passbolt contains a secretRef for the passbolt credentials.",
      "type": "object",
      "required": [
        "passwordSecretRef",
        "privateKeySecretRef"
      ],
      "properties": {
        "passwordSecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "privateKeySecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.PassboltProvider": {
      "type": "object",
      "required": [
        "auth",
        "host"
      ],
      "properties": {
        "auth": {
          "description": "Auth defines the information necessary to authenticate against Passbolt Server",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.PassboltAuth"
        },
        "host": {
          "description": "Host defines the Passbolt Server to connect to",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.PasswordDepotAuth": {
      "type": "object",
      "required": [
        "secretRef"
      ],
      "properties": {
        "secretRef": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.PasswordDepotSecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.PasswordDepotProvider": {
      "description": "Configures a store to sync secrets with a Password Depot instance.",
      "type": "object",
      "required": [
        "host",
        "database",
        "auth"
      ],
      "properties": {
        "auth": {
          "description": "Auth configures how secret-manager authenticates with a Password Depot instance.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.PasswordDepotAuth"
        },
        "database": {
          "description": "Database to use as source",
          "type": "string",
          "default": ""
        },
        "host": {
          "description": "URL configures the Password Depot instance URL.",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.PasswordDepotSecretRef": {
      "type": "object",
      "properties": {
        "credentials": {
          "description": "Username / Password is used for authentication.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.PreviderAuth": {
      "description": "PreviderAuth contains a secretRef for credentials.",
      "type": "object",
      "properties": {
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.PreviderAuthSecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.PreviderAuthSecretRef": {
      "description": "PreviderAuthSecretRef holds secret references for Previder Vault credentials.",
      "type": "object",
      "required": [
        "accessToken"
      ],
      "properties": {
        "accessToken": {
          "description": "The AccessToken is used for authentication",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.PreviderProvider": {
      "description": "PreviderProvider configures a store to sync secrets using the Previder Secret Manager provider.",
      "type": "object",
      "required": [
        "auth"
      ],
      "properties": {
        "auth": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.PreviderAuth"
        },
        "baseUri": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.PulumiProvider": {
      "type": "object",
      "required": [
        "accessToken",
        "organization",
        "project",
        "environment"
      ],
      "properties": {
        "accessToken": {
          "description": "AccessToken is the access tokens to sign in to the Pulumi Cloud Console.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.PulumiProviderSecretRef"
        },
        "apiUrl": {
          "description": "APIURL is the URL of the Pulumi API.",
          "type": "string"
        },
        "environment": {
          "description": "Environment are YAML documents composed of static key-value pairs, programmatic expressions, dynamically retrieved values from supported providers including all major clouds, and other Pulumi ESC environments. To create a new environment, visit https://www.pulumi.com/docs/esc/environments/ for more information.",
          "type": "string",
          "default": ""
        },
        "organization": {
          "description": "Organization are a space to collaborate on shared projects and stacks. To create a new organization, visit https://app.pulumi.com/ and click \"New Organization\".",
          "type": "string",
          "default": ""
        },
        "project": {
          "description": "Project is the name of the Pulumi ESC project the environment belongs to.",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.PulumiProviderSecretRef": {
      "type": "object",
      "properties": {
        "secretRef": {
          "description": "SecretRef is a reference to a secret containing the Pulumi API token.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ScalewayProvider": {
      "type": "object",
      "required": [
        "region",
        "projectId",
        "accessKey",
        "secretKey"
      ],
      "properties": {
        "accessKey": {
          "description": "AccessKey is the non-secret part of the api key.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ScalewayProviderSecretRef"
        },
        "apiUrl": {
          "description": "APIURL is the url of the api to use. Defaults to https://api.scaleway.com",
          "type": "string"
        },
        "projectId": {
          "description": "ProjectID is the id of your project, which you can find in the console: https://console.scaleway.com/project/settings",
          "type": "string",
          "default": ""
        },
        "region": {
          "description": "Region where your secrets are located: https://developers.scaleway.com/en/quickstart/#region-and-zone",
          "type": "string",
          "default": ""
        },
        "secretKey": {
          "description": "SecretKey is the non-secret part of the api key.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ScalewayProviderSecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.ScalewayProviderSecretRef": {
      "type": "object",
      "properties": {
        "secretRef": {
          "description": "SecretRef references a key in a secret that will be used as value.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "value": {
          "description": "Value can be specified directly to set a value without using a secret.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.SecretServerProvider": {
      "description": "See https://github.com/DelineaXPM/tss-sdk-go/blob/main/server/server.go.",
      "type": "object",
      "required": [
        "username",
        "password",
        "serverURL"
      ],
      "properties": {
        "password": {
          "description": "Password is the secret server account password.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.SecretServerProviderRef"
        },
        "serverURL": {
          "description": "ServerURL URL to your secret server installation",
          "type": "string",
          "default": ""
        },
        "username": {
          "description": "Username is the secret server account username.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.SecretServerProviderRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.SecretServerProviderRef": {
      "type": "object",
      "properties": {
        "secretRef": {
          "description": "SecretRef references a key in a secret that will be used as value.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "value": {
          "description": "Value can be specified directly to set a value without using a secret.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.SecretStore": {
      "description": "SecretStore represents a secure external location for storing secrets, which can be referenced as part of `storeRef` fields.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.SecretStoreSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.SecretStoreStatus"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.SecretStoreProvider": {
      "description": "SecretStoreProvider contains the provider-specific configuration.",
      "type": "object",
      "properties": {
        "akeyless": {
          "description": "Akeyless configures this store to sync secrets using Akeyless Vault provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AkeylessProvider"
        },
        "alibaba": {
          "description": "Alibaba configures this store to sync secrets using Alibaba Cloud provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AlibabaProvider"
        },
        "aws": {
          "description": "AWS configures this store to sync secrets using AWS Secret Manager provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AWSProvider"
        },
        "azurekv": {
          "description": "AzureKV configures this store to sync secrets using Azure Key Vault provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AzureKVProvider"
        },
        "beyondtrust": {
          "description": "Beyondtrust configures this store to sync secrets using Password Safe provider.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.BeyondtrustProvider"
        },
        "bitwardensecretsmanager": {
          "description": "BitwardenSecretsManager configures this store to sync secrets using BitwardenSecretsManager provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.BitwardenSecretsManagerProvider"
        },
        "chef": {
          "description": "Chef configures this store to sync secrets with chef server",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ChefProvider"
        },
        "cloudrusm": {
          "description": "CloudruSM configures this store to sync secrets using the Cloud.ru Secret Manager provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.CloudruSMProvider"
        },
        "conjur": {
          "description": "Conjur configures this store to sync secrets using conjur provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ConjurProvider"
        },
        "delinea": {
          "description": "Delinea DevOps Secrets Vault https://docs.delinea.com/online-help/products/devops-secrets-vault/current",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.DelineaProvider"
        },
        "device42": {
          "description": "Device42 configures this store to sync secrets using the Device42 provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.Device42Provider"
        },
        "doppler": {
          "description": "Doppler configures this store to sync secrets using the Doppler provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.DopplerProvider"
        },
        "fake": {
          "description": "Fake configures a store with static key/value pairs",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.FakeProvider"
        },
        "fortanix": {
          "description": "Fortanix configures this store to sync secrets using the Fortanix provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.FortanixProvider"
        },
        "gcpsm": {
          "description": "GCPSM configures this store to sync secrets using Google Cloud Platform Secret Manager provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.GCPSMProvider"
        },
        "github": {
          "description": "Github configures this store to push Github Action secrets using Github API provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.GithubProvider"
        },
        "gitlab": {
          "description": "GitLab configures this store to sync secrets using GitLab Variables provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.GitlabProvider"
        },
        "ibm": {
          "description": "IBM configures this store to sync secrets using IBM Cloud provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.IBMProvider"
        },
        "infisical": {
          "description": "Infisical configures this store to sync secrets using the Infisical provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.InfisicalProvider"
        },
        "keepersecurity": {
          "description": "KeeperSecurity configures this store to sync secrets using the KeeperSecurity provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.KeeperSecurityProvider"
        },
        "kubernetes": {
          "description": "Kubernetes configures this store to sync secrets using a Kubernetes cluster provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.KubernetesProvider"
        },
        "onboardbase": {
          "description": "Onboardbase configures this store to sync secrets using the Onboardbase provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.OnboardbaseProvider"
        },
        "onepassword": {
          "description": "OnePassword configures this store to sync secrets using the 1Password Cloud provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.OnePasswordProvider"
        },
        "onepasswordSDK": {
          "description": "OnePasswordSDK configures this store to use 1Password's new Go SDK to sync secrets.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.OnePasswordSDKProvider"
        },
        "oracle": {
          "description": "Oracle configures this store to sync secrets using Oracle Vault provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.OracleProvider"
        },
        "passbolt": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.PassboltProvider"
        },
        "passworddepot": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.PasswordDepotProvider"
        },
        "previder": {
          "description": "Previder configures this store to sync secrets using the Previder provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.PreviderProvider"
        },
        "pulumi": {
          "description": "Pulumi configures this store to sync secrets using the Pulumi provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.PulumiProvider"
        },
        "scaleway": {
          "description": "Scaleway",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ScalewayProvider"
        },
        "secretserver": {
          "description": "SecretServer configures this store to sync secrets using SecretServer provider https://docs.delinea.com/online-help/secret-server/start.htm",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.SecretServerProvider"
        },
        "senhasegura": {
          "description": "Senhasegura configures this store to sync secrets using senhasegura provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.SenhaseguraProvider"
        },
        "vault": {
          "description": "Vault configures this store to sync secrets using Hashi provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.VaultProvider"
        },
        "webhook": {
          "description": "Webhook configures this store to sync secrets using a generic templated webhook",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.WebhookProvider"
        },
        "yandexcertificatemanager": {
          "description": "YandexCertificateManager configures this store to sync secrets using Yandex Certificate Manager provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.YandexCertificateManagerProvider"
        },
        "yandexlockbox": {
          "description": "YandexLockbox configures this store to sync secrets using Yandex Lockbox provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.YandexLockboxProvider"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.SecretStoreRef": {
      "description": "SecretStoreRef defines which SecretStore to fetch the ExternalSecret data.",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Kind of the SecretStore resource (SecretStore or ClusterSecretStore) Defaults to `SecretStore`",
          "type": "string"
        },
        "name": {
          "description": "Name of the SecretStore resource",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.SecretStoreRetrySettings": {
      "type": "object",
      "properties": {
        "maxRetries": {
          "type": "integer",
          "format": "int32"
        },
        "retryInterval": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.SecretStoreSpec": {
      "description": "SecretStoreSpec defines the desired state of SecretStore.",
      "type": "object",
      "required": [
        "provider"
      ],
      "properties": {
        "conditions": {
          "description": "Used to constraint a ClusterSecretStore to specific namespaces. Relevant only to ClusterSecretStore",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ClusterSecretStoreCondition"
          }
        },
        "controller": {
          "description": "Used to select the correct ESO controller (think: ingress.ingressClassName) The ESO controller is instantiated with a specific controller name and filters ES based on this property",
          "type": "string"
        },
        "provider": {
          "description": "Used to configure the provider. Only one provider may be set",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.SecretStoreProvider"
        },
        "refreshInterval": {
          "description": "Used to configure store refresh interval in seconds. Empty or 0 will default to the controller config.",
          "type": "integer",
          "format": "int32"
        },
        "retrySettings": {
          "description": "Used to configure http retries if failed",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.SecretStoreRetrySettings"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.SecretStoreStatus": {
      "description": "SecretStoreStatus defines the observed state of the SecretStore.",
      "type": "object",
      "properties": {
        "capabilities": {
          "type": "string"
        },
        "conditions": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.SecretStoreStatusCondition"
          }
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.SecretStoreStatusCondition": {
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "default": ""
        },
        "type": {
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.SecretsManager": {
      "description": "SecretsManager defines how the provider behaves when interacting with AWS SecretsManager. Some of these settings are only applicable to controlling how secrets are deleted, and hence only apply to PushSecret (and only when deletionPolicy is set to Delete).",
      "type": "object",
      "properties": {
        "forceDeleteWithoutRecovery": {
          "description": "Specifies whether to delete the secret without any recovery window. You can't use both this parameter and RecoveryWindowInDays in the same call. If you don't use either, then by default Secrets Manager uses a 30 day recovery window. see: https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_DeleteSecret.html#SecretsManager-DeleteSecret-request-ForceDeleteWithoutRecovery",
          "type": "boolean"
        },
        "recoveryWindowInDays": {
          "description": "The number of days from 7 to 30 that Secrets Manager waits before permanently deleting the secret. You can't use both this parameter and ForceDeleteWithoutRecovery in the same call. If you don't use either, then by default Secrets Manager uses a 30 day recovery window. see: https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_DeleteSecret.html#SecretsManager-DeleteSecret-request-RecoveryWindowInDays",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.SenhaseguraAuth": {
      "description": "SenhaseguraAuth tells the controller how to do auth in senhasegura.",
      "type": "object",
      "required": [
        "clientId",
        "clientSecretSecretRef"
      ],
      "properties": {
        "clientId": {
          "type": "string",
          "default": ""
        },
        "clientSecretSecretRef": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.SenhaseguraProvider": {
      "description": "SenhaseguraProvider setup a store to sync secrets with senhasegura.",
      "type": "object",
      "required": [
        "url",
        "module",
        "auth"
      ],
      "properties": {
        "auth": {
          "description": "Auth defines parameters to authenticate in senhasegura",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.SenhaseguraAuth"
        },
        "ignoreSslCertificate": {
          "description": "IgnoreSslCertificate defines if SSL certificate must be ignored",
          "type": "boolean"
        },
        "module": {
          "description": "Module defines which senhasegura module should be used to get secrets",
          "type": "string",
          "default": ""
        },
        "url": {
          "description": "URL of senhasegura",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.StoreGeneratorSourceRef": {
      "description": "StoreGeneratorSourceRef allows you to override the source from which the secret will be pulled from. You can define at maximum one property.",
      "type": "object",
      "properties": {
        "generatorRef": {
          "description": "GeneratorRef points to a generator custom resource.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.GeneratorRef"
        },
        "storeRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.SecretStoreRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.StoreSourceRef": {
      "description": "StoreSourceRef allows you to override the SecretStore source from which the secret will be pulled from. You can define at maximum one property.",
      "type": "object",
      "properties": {
        "generatorRef": {
          "description": "GeneratorRef points to a generator custom resource.\n\nDeprecated: The generatorRef is not implemented in .data[]. this will be removed with v1.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.GeneratorRef"
        },
        "storeRef": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.SecretStoreRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.Tag": {
      "type": "object",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string",
          "default": ""
        },
        "value": {
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.TemplateFrom": {
      "type": "object",
      "properties": {
        "configMap": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.TemplateRef"
        },
        "literal": {
          "type": "string"
        },
        "secret": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.TemplateRef"
        },
        "target": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.TemplateRef": {
      "type": "object",
      "required": [
        "name",
        "items"
      ],
      "properties": {
        "items": {
          "description": "A list of keys in the ConfigMap/Secret to use as templates for Secret data",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.TemplateRefItem"
          }
        },
        "name": {
          "description": "The name of the ConfigMap/Secret resource",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.TemplateRefItem": {
      "type": "object",
      "required": [
        "key"
      ],
      "properties": {
        "key": {
          "description": "A key in the ConfigMap/Secret",
          "type": "string",
          "default": ""
        },
        "templateAs": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.TokenAuth": {
      "type": "object",
      "properties": {
        "bearerToken": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.UniversalAuthCredentials": {
      "type": "object",
      "required": [
        "clientId",
        "clientSecret"
      ],
      "properties": {
        "clientId": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "clientSecret": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.VaultAppRole": {
      "description": "VaultAppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.",
      "type": "object",
      "required": [
        "path",
        "secretRef"
      ],
      "properties": {
        "path": {
          "description": "Path where the App Role authentication backend is mounted in Vault, e.g: \"approle\"",
          "type": "string",
          "default": ""
        },
        "roleId": {
          "description": "RoleID configured in the App Role authentication backend when setting up the authentication backend in Vault.",
          "type": "string"
        },
        "roleRef": {
          "description": "Reference to a key in a Secret that contains the App Role ID used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role id.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "secretRef": {
          "description": "Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.VaultAuth": {
      "description": "VaultAuth is the configuration used to authenticate with a Vault server. Only one of `tokenSecretRef`, `appRole`,  `kubernetes`, `ldap`, `userPass`, `jwt` or `cert` can be specified. A namespace to authenticate against can optionally be specified.",
      "type": "object",
      "properties": {
        "appRole": {
          "description": "AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.VaultAppRole"
        },
        "cert": {
          "description": "Cert authenticates with TLS Certificates by passing client certificate, private key and ca certificate Cert authentication method",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.VaultCertAuth"
        },
        "iam": {
          "description": "Iam authenticates with vault by passing a special AWS request signed with AWS IAM credentials AWS IAM authentication method",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.VaultIamAuth"
        },
        "jwt": {
          "description": "Jwt authenticates with Vault by passing role and JWT token using the JWT/OIDC authentication method",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.VaultJwtAuth"
        },
        "kubernetes": {
          "description": "Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.VaultKubernetesAuth"
        },
        "ldap": {
          "description": "Ldap authenticates with Vault by passing username/password pair using the LDAP authentication method",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.VaultLdapAuth"
        },
        "namespace": {
          "description": "Name of the vault namespace to authenticate to. This can be different than the namespace your secret is in. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: \"ns1\". More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces This will default to Vault.Namespace field if set, or empty otherwise",
          "type": "string"
        },
        "tokenSecretRef": {
          "description": "TokenSecretRef authenticates with Vault by presenting a token.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "userPass": {
          "description": "UserPass authenticates with Vault by passing username/password pair",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.VaultUserPassAuth"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.VaultAwsAuthSecretRef": {
      "description": "VaultAWSAuthSecretRef holds secret references for AWS credentials both AccessKeyID and SecretAccessKey must be defined in order to properly authenticate.",
      "type": "object",
      "properties": {
        "accessKeyIDSecretRef": {
          "description": "The AccessKeyID is used for authentication",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "secretAccessKeySecretRef": {
          "description": "The SecretAccessKey is used for authentication",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "sessionTokenSecretRef": {
          "description": "The SessionToken used for authentication This must be defined if AccessKeyID and SecretAccessKey are temporary credentials see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.VaultAwsJWTAuth": {
      "description": "VaultAwsJWTAuth Authenticate against AWS using service account tokens.",
      "type": "object",
      "properties": {
        "serviceAccountRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.VaultCertAuth": {
      "description": "VaultCertAuth authenticates with Vault using the JWT/OIDC authentication method, with the role name and token stored in a Kubernetes Secret resource.",
      "type": "object",
      "properties": {
        "clientCert": {
          "description": "ClientCert is a certificate to authenticate using the Cert Vault authentication method",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "secretRef": {
          "description": "SecretRef to a key in a Secret resource containing client private key to authenticate with Vault using the Cert authentication method",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.VaultClientTLS": {
      "description": "VaultClientTLS is the configuration used for client side related TLS communication, when the Vault server requires mutual authentication.",
      "type": "object",
      "properties": {
        "certSecretRef": {
          "description": "CertSecretRef is a certificate added to the transport layer when communicating with the Vault server. If no key for the Secret is specified, external-secret will default to 'tls.crt'.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "keySecretRef": {
          "description": "KeySecretRef to a key in a Secret resource containing client private key added to the transport layer when communicating with the Vault server. If no key for the Secret is specified, external-secret will default to 'tls.key'.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.VaultIamAuth": {
      "description": "VaultIamAuth authenticates with Vault using the Vault's AWS IAM authentication method. Refer: https://developer.hashicorp.com/vault/docs/auth/aws",
      "type": "object",
      "required": [
        "vaultRole"
      ],
      "properties": {
        "externalID": {
          "description": "AWS External ID set on assumed IAM roles",
          "type": "string"
        },
        "jwt": {
          "description": "Specify a service account with IRSA enabled",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.VaultAwsJWTAuth"
        },
        "path": {
          "description": "Path where the AWS auth method is enabled in Vault, e.g: \"aws\"",
          "type": "string"
        },
        "region": {
          "description": "AWS region",
          "type": "string"
        },
        "role": {
          "description": "This is the AWS role to be assumed before talking to vault",
          "type": "string"
        },
        "secretRef": {
          "description": "Specify credentials in a Secret object",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.VaultAwsAuthSecretRef"
        },
        "vaultAwsIamServerID": {
          "description": "X-Vault-AWS-IAM-Server-ID is an additional header used by Vault IAM auth method to mitigate against different types of replay attacks. More details here: https://developer.hashicorp.com/vault/docs/auth/aws",
          "type": "string"
        },
        "vaultRole": {
          "description": "Vault Role. In vault, a role describes an identity with a set of permissions, groups, or policies you want to attach a user of the secrets engine",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.VaultJwtAuth": {
      "description": "VaultJwtAuth authenticates with Vault using the JWT/OIDC authentication method, with the role name and a token stored in a Kubernetes Secret resource or a Kubernetes service account token retrieved via `TokenRequest`.",
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "kubernetesServiceAccountToken": {
          "description": "Optional ServiceAccountToken specifies the Kubernetes service account for which to request a token for with the `TokenRequest` API.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.VaultKubernetesServiceAccountTokenAuth"
        },
        "path": {
          "description": "Path where the JWT authentication backend is mounted in Vault, e.g: \"jwt\"",
          "type": "string",
          "default": ""
        },
        "role": {
          "description": "Role is a JWT role to authenticate using the JWT/OIDC Vault authentication method",
          "type": "string"
        },
        "secretRef": {
          "description": "Optional SecretRef that refers to a key in a Secret resource containing JWT token to authenticate with Vault using the JWT/OIDC authentication method.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.VaultKubernetesAuth": {
      "description": "Authenticate against Vault using a Kubernetes ServiceAccount token stored in a Secret.",
      "type": "object",
      "required": [
        "mountPath",
        "role"
      ],
      "properties": {
        "mountPath": {
          "description": "Path where the Kubernetes authentication backend is mounted in Vault, e.g: \"kubernetes\"",
          "type": "string",
          "default": ""
        },
        "role": {
          "description": "A required field containing the Vault Role to assume. A Role binds a Kubernetes ServiceAccount with a set of Vault policies.",
          "type": "string",
          "default": ""
        },
        "secretRef": {
          "description": "Optional secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. If a name is specified without a key, `token` is the default. If one is not specified, the one bound to the controller will be used.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "serviceAccountRef": {
          "description": "Optional service account field containing the name of a kubernetes ServiceAccount. If the service account is specified, the service account secret token JWT will be used for authenticating with Vault. If the service account selector is not supplied, the secretRef will be used instead.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.VaultKubernetesServiceAccountTokenAuth": {
      "description": "VaultKubernetesServiceAccountTokenAuth authenticates with Vault using a temporary Kubernetes service account token retrieved by the `TokenRequest` API.",
      "type": "object",
      "required": [
        "serviceAccountRef"
      ],
      "properties": {
        "audiences": {
          "description": "Optional audiences field that will be used to request a temporary Kubernetes service account token for the service account referenced by `serviceAccountRef`. Defaults to a single audience `vault` it not specified. Deprecated: use serviceAccountRef.Audiences instead",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "expirationSeconds": {
          "description": "Optional expiration time in seconds that will be used to request a temporary Kubernetes service account token for the service account referenced by `serviceAccountRef`. Deprecated: this will be removed in the future. Defaults to 10 minutes.",
          "type": "integer",
          "format": "int64"
        },
        "serviceAccountRef": {
          "description": "Service account field containing the name of a kubernetes ServiceAccount.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.VaultLdapAuth": {
      "description": "VaultLdapAuth authenticates with Vault using the LDAP authentication method, with the username and password stored in a Kubernetes Secret resource.",
      "type": "object",
      "required": [
        "path",
        "username"
      ],
      "properties": {
        "path": {
          "description": "Path where the LDAP authentication backend is mounted in Vault, e.g: \"ldap\"",
          "type": "string",
          "default": ""
        },
        "secretRef": {
          "description": "SecretRef to a key in a Secret resource containing password for the LDAP user used to authenticate with Vault using the LDAP authentication method",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "username": {
          "description": "Username is an LDAP username used to authenticate using the LDAP Vault authentication method",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.VaultProvider": {
      "description": "Configures an store to sync secrets using a HashiCorp Vault KV backend.",
      "type": "object",
      "required": [
        "server",
        "version"
      ],
      "properties": {
        "auth": {
          "description": "Auth configures how secret-manager authenticates with the Vault server.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.VaultAuth"
        },
        "caBundle": {
          "description": "PEM encoded CA bundle used to validate Vault server certificate. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. If not set the system root certificates are used to validate the TLS connection.",
          "type": "string",
          "format": "byte"
        },
        "caProvider": {
          "description": "The provider for the CA bundle to use to validate Vault server certificate.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.CAProvider"
        },
        "forwardInconsistent": {
          "description": "ForwardInconsistent tells Vault to forward read-after-write requests to the Vault leader instead of simply retrying within a loop. This can increase performance if the option is enabled serverside. https://www.vaultproject.io/docs/configuration/replication#allow_forwarding_via_header",
          "type": "boolean"
        },
        "headers": {
          "description": "Headers to be added in Vault request",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "namespace": {
          "description": "Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: \"ns1\". More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces",
          "type": "string"
        },
        "path": {
          "description": "Path is the mount path of the Vault KV backend endpoint, e.g: \"secret\". The v2 KV secret engine version specific \"/data\" path suffix for fetching secrets from Vault is optional and will be appended if not present in specified path.",
          "type": "string"
        },
        "readYourWrites": {
          "description": "ReadYourWrites ensures isolated read-after-write semantics by providing discovered cluster replication states in each request. More information about eventual consistency in Vault can be found here https://www.vaultproject.io/docs/enterprise/consistency",
          "type": "boolean"
        },
        "server": {
          "description": "Server is the connection address for the Vault server, e.g: \"https://vault.example.com:8200\".",
          "type": "string",
          "default": ""
        },
        "tls": {
          "description": "The configuration used for client side related TLS communication, when the Vault server requires mutual authentication. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. It's worth noting this configuration is different from the \"TLS certificates auth method\", which is available under the `auth.cert` section.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.VaultClientTLS"
        },
        "version": {
          "description": "Version is the Vault KV secret engine version. This can be either \"v1\" or \"v2\". Version defaults to \"v2\".",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.VaultUserPassAuth": {
      "description": "VaultUserPassAuth authenticates with Vault using UserPass authentication method, with the username and password stored in a Kubernetes Secret resource.",
      "type": "object",
      "required": [
        "path",
        "username"
      ],
      "properties": {
        "path": {
          "description": "Path where the UserPassword authentication backend is mounted in Vault, e.g: \"userpass\"",
          "type": "string",
          "default": ""
        },
        "secretRef": {
          "description": "SecretRef to a key in a Secret resource containing password for the user used to authenticate with Vault using the UserPass authentication method",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "username": {
          "description": "Username is a username used to authenticate using the UserPass Vault authentication method",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.WebhookCAProvider": {
      "description": "Defines a location to fetch the cert for the webhook provider from.",
      "type": "object",
      "required": [
        "type",
        "name"
      ],
      "properties": {
        "key": {
          "description": "The key where the CA certificate can be found in the Secret or ConfigMap.",
          "type": "string"
        },
        "name": {
          "description": "The name of the object located at the provider type.",
          "type": "string",
          "default": ""
        },
        "namespace": {
          "description": "The namespace the Provider type is in.",
          "type": "string"
        },
        "type": {
          "description": "The type of provider to use such as \"Secret\", or \"ConfigMap\".",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.WebhookProvider": {
      "description": "WebHookProvider Configures an store to sync secrets from simple web apis.",
      "type": "object",
      "required": [
        "url",
        "result"
      ],
      "properties": {
        "auth": {
          "description": "Auth specifies a authorization protocol. Only one protocol may be set.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AuthorizationProtocol"
        },
        "body": {
          "description": "Body",
          "type": "string"
        },
        "caBundle": {
          "description": "PEM encoded CA bundle used to validate webhook server certificate. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. If not set the system root certificates are used to validate the TLS connection.",
          "type": "string",
          "format": "byte"
        },
        "caProvider": {
          "description": "The provider for the CA bundle to use to validate webhook server certificate.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.WebhookCAProvider"
        },
        "headers": {
          "description": "Headers",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "method": {
          "description": "Webhook Method",
          "type": "string"
        },
        "result": {
          "description": "Result formatting",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.WebhookResult"
        },
        "secrets": {
          "description": "Secrets to fill in templates These secrets will be passed to the templating function as key value pairs under the given name",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.WebhookSecret"
          }
        },
        "timeout": {
          "description": "Timeout",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Duration"
        },
        "url": {
          "description": "Webhook url to call",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.WebhookResult": {
      "type": "object",
      "properties": {
        "jsonPath": {
          "description": "Json path of return value",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.WebhookSecret": {
      "type": "object",
      "required": [
        "name",
        "secretRef"
      ],
      "properties": {
        "name": {
          "description": "Name of this secret in templates",
          "type": "string",
          "default": ""
        },
        "secretRef": {
          "description": "Secret ref to fill in credentials",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.YandexCertificateManagerAuth": {
      "type": "object",
      "properties": {
        "authorizedKeySecretRef": {
          "description": "The authorized key used for authentication",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.YandexCertificateManagerCAProvider": {
      "type": "object",
      "properties": {
        "certSecretRef": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.YandexCertificateManagerProvider": {
      "description": "YandexCertificateManagerProvider Configures a store to sync secrets using the Yandex Certificate Manager provider.",
      "type": "object",
      "required": [
        "auth"
      ],
      "properties": {
        "apiEndpoint": {
          "description": "Yandex.Cloud API endpoint (e.g. 'api.cloud.yandex.net:443')",
          "type": "string"
        },
        "auth": {
          "description": "Auth defines the information necessary to authenticate against Yandex Certificate Manager",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.YandexCertificateManagerAuth"
        },
        "caProvider": {
          "description": "The provider for the CA bundle to use to validate Yandex.Cloud server certificate.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.YandexCertificateManagerCAProvider"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.YandexLockboxAuth": {
      "type": "object",
      "properties": {
        "authorizedKeySecretRef": {
          "description": "The authorized key used for authentication",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.YandexLockboxCAProvider": {
      "type": "object",
      "properties": {
        "certSecretRef": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1.YandexLockboxProvider": {
      "description": "YandexLockboxProvider Configures a store to sync secrets using the Yandex Lockbox provider.",
      "type": "object",
      "required": [
        "auth"
      ],
      "properties": {
        "apiEndpoint": {
          "description": "Yandex.Cloud API endpoint (e.g. 'api.cloud.yandex.net:443')",
          "type": "string"
        },
        "auth": {
          "description": "Auth defines the information necessary to authenticate against Yandex Lockbox",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.YandexLockboxAuth"
        },
        "caProvider": {
          "description": "The provider for the CA bundle to use to validate Yandex.Cloud server certificate.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.YandexLockboxCAProvider"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1alpha1.ClusterPushSecret": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1alpha1.ClusterPushSecretSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1alpha1.ClusterPushSecretStatus"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1alpha1.ClusterPushSecretNamespaceFailure": {
      "description": "ClusterPushSecretNamespaceFailure represents a failed namespace deployment and it's reason.",
      "type": "object",
      "required": [
        "namespace"
      ],
      "properties": {
        "namespace": {
          "description": "Namespace is the namespace that failed when trying to apply an PushSecret",
          "type": "string",
          "default": ""
        },
        "reason": {
          "description": "Reason is why the PushSecret failed to apply to the namespace",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1alpha1.ClusterPushSecretSpec": {
      "type": "object",
      "required": [
        "pushSecretSpec"
      ],
      "properties": {
        "namespaceSelectors": {
          "description": "A list of labels to select by to find the Namespaces to create the ExternalSecrets in. The selectors are ORed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
          }
        },
        "pushSecretMetadata": {
          "description": "The metadata of the external secrets to be created",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretMetadata"
        },
        "pushSecretName": {
          "description": "The name of the push secrets to be created. Defaults to the name of the ClusterPushSecret",
          "type": "string"
        },
        "pushSecretSpec": {
          "description": "PushSecretSpec defines what to do with the secrets.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretSpec"
        },
        "refreshTime": {
          "description": "The time in which the controller should reconcile its objects and recheck namespaces for labels.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Duration"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1alpha1.ClusterPushSecretStatus": {
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretStatusCondition"
          }
        },
        "failedNamespaces": {
          "description": "Failed namespaces are the namespaces that failed to apply an PushSecret",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1alpha1.ClusterPushSecretNamespaceFailure"
          }
        },
        "provisionedNamespaces": {
          "description": "ProvisionedNamespaces are the namespaces where the ClusterPushSecret has secrets",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "pushSecretName": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1alpha1.PushSecret": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretStatus"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretData": {
      "type": "object",
      "required": [
        "match"
      ],
      "properties": {
        "conversionStrategy": {
          "description": "Used to define a conversion Strategy for the secret keys",
          "type": "string"
        },
        "match": {
          "description": "Match a given Secret Key to be pushed to the provider.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretMatch"
        },
        "metadata": {
          "description": "Metadata is metadata attached to the secret. The structure of metadata is provider specific, please look it up in the provider documentation.",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretMatch": {
      "type": "object",
      "required": [
        "remoteRef"
      ],
      "properties": {
        "remoteRef": {
          "description": "Remote Refs to push to providers.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretRemoteRef"
        },
        "secretKey": {
          "description": "Secret Key to be pushed",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretMetadata": {
      "description": "PushSecretMetadata defines metadata fields for the PushSecret generated by the ClusterPushSecret.",
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretRemoteRef": {
      "type": "object",
      "required": [
        "remoteKey"
      ],
      "properties": {
        "property": {
          "description": "Name of the property in the resulting secret",
          "type": "string"
        },
        "remoteKey": {
          "description": "Name of the resulting provider secret.",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretSecret": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the Secret. The Secret must exist in the same namespace as the PushSecret manifest.",
          "type": "string"
        },
        "selector": {
          "description": "Selector chooses secrets using a labelSelector.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretSelector": {
      "type": "object",
      "properties": {
        "generatorRef": {
          "description": "Point to a generator to create a Secret.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.GeneratorRef"
        },
        "secret": {
          "description": "Select a Secret to Push.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretSecret"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretSpec": {
      "description": "PushSecretSpec configures the behavior of the PushSecret.",
      "type": "object",
      "required": [
        "secretStoreRefs",
        "selector"
      ],
      "properties": {
        "data": {
          "description": "Secret Data that should be pushed to providers",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretData"
          }
        },
        "deletionPolicy": {
          "description": "Deletion Policy to handle Secrets in the provider.",
          "type": "string"
        },
        "refreshInterval": {
          "description": "The Interval to which External Secrets will try to push a secret definition",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Duration"
        },
        "secretStoreRefs": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretStoreRef"
          }
        },
        "selector": {
          "description": "The Secret Selector (k8s source) for the Push Secret",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretSelector"
        },
        "template": {
          "description": "Template defines a blueprint for the created Secret resource.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretTemplate"
        },
        "updatePolicy": {
          "description": "UpdatePolicy to handle Secrets in the provider.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretStatus": {
      "description": "PushSecretStatus indicates the history of the status of PushSecret.",
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretStatusCondition"
          }
        },
        "refreshTime": {
          "description": "refreshTime is the time and date the external secret was fetched and the target secret updated",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "syncedPushSecrets": {
          "description": "Synced PushSecrets, including secrets that already exist in provider. Matches secret stores to PushSecretData that was stored to that secret store.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "default": {},
              "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretData"
            }
          }
        },
        "syncedResourceVersion": {
          "description": "SyncedResourceVersion keeps track of the last synced version.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretStatusCondition": {
      "description": "PushSecretStatusCondition indicates the status of the PushSecret.",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "default": ""
        },
        "type": {
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretStoreRef": {
      "type": "object",
      "properties": {
        "kind": {
          "description": "Kind of the SecretStore resource (SecretStore or ClusterSecretStore)",
          "type": "string"
        },
        "labelSelector": {
          "description": "Optionally, sync to secret stores with label selector",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "name": {
          "description": "Optionally, sync to the SecretStore of the given name",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.AWSAuth": {
      "description": "AWSAuth tells the controller how to do authentication with aws. Only one of secretRef or jwt can be specified. if none is specified the controller will load credentials using the aws sdk defaults.",
      "type": "object",
      "properties": {
        "jwt": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.AWSJWTAuth"
        },
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.AWSAuthSecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.AWSAuthSecretRef": {
      "description": "AWSAuthSecretRef holds secret references for AWS credentials both AccessKeyID and SecretAccessKey must be defined in order to properly authenticate.",
      "type": "object",
      "properties": {
        "accessKeyIDSecretRef": {
          "description": "The AccessKeyID is used for authentication",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "secretAccessKeySecretRef": {
          "description": "The SecretAccessKey is used for authentication",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "sessionTokenSecretRef": {
          "description": "The SessionToken used for authentication This must be defined if AccessKeyID and SecretAccessKey are temporary credentials see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.AWSJWTAuth": {
      "description": "Authenticate against AWS using service account tokens.",
      "type": "object",
      "properties": {
        "serviceAccountRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.AWSProvider": {
      "description": "AWSProvider configures a store to sync secrets with AWS.",
      "type": "object",
      "required": [
        "service",
        "region"
      ],
      "properties": {
        "additionalRoles": {
          "description": "AdditionalRoles is a chained list of Role ARNs which the provider will sequentially assume before assuming the Role",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "auth": {
          "description": "Auth defines the information necessary to authenticate against AWS if not set aws sdk will infer credentials from your environment see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.AWSAuth"
        },
        "externalID": {
          "description": "AWS External ID set on assumed IAM roles",
          "type": "string"
        },
        "prefix": {
          "description": "Prefix adds a prefix to all retrieved values.",
          "type": "string"
        },
        "region": {
          "description": "AWS Region to be used for the provider",
          "type": "string",
          "default": ""
        },
        "role": {
          "description": "Role is a Role ARN which the provider will assume",
          "type": "string"
        },
        "secretsManager": {
          "description": "SecretsManager defines how the provider behaves when interacting with AWS SecretsManager",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.SecretsManager"
        },
        "service": {
          "description": "Service defines which service should be used to fetch the secrets",
          "type": "string",
          "default": ""
        },
        "sessionTags": {
          "description": "AWS STS assume role session tags",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.Tag"
          }
        },
        "transitiveTagKeys": {
          "description": "AWS STS assume role transitive session tags. Required when multiple rules are used with the provider",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.AkeylessAuth": {
      "type": "object",
      "properties": {
        "kubernetesAuth": {
          "description": "Kubernetes authenticates with Akeyless by passing the ServiceAccount token stored in the named Secret resource.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.AkeylessKubernetesAuth"
        },
        "secretRef": {
          "description": "Reference to a Secret that contains the details to authenticate with Akeyless.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.AkeylessAuthSecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.AkeylessAuthSecretRef": {
      "description": "AkeylessAuthSecretRef AKEYLESS_ACCESS_TYPE_PARAM: AZURE_OBJ_ID OR GCP_AUDIENCE OR ACCESS_KEY OR KUB_CONFIG_NAME.",
      "type": "object",
      "properties": {
        "accessID": {
          "description": "The SecretAccessID is used for authentication",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "accessType": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "accessTypeParam": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.AkeylessKubernetesAuth": {
      "description": "Authenticate with Kubernetes ServiceAccount token stored.",
      "type": "object",
      "required": [
        "accessID",
        "k8sConfName"
      ],
      "properties": {
        "accessID": {
          "description": "the Akeyless Kubernetes auth-method access-id",
          "type": "string",
          "default": ""
        },
        "k8sConfName": {
          "description": "Kubernetes-auth configuration name in Akeyless-Gateway",
          "type": "string",
          "default": ""
        },
        "secretRef": {
          "description": "Optional secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Akeyless. If a name is specified without a key, `token` is the default. If one is not specified, the one bound to the controller will be used.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "serviceAccountRef": {
          "description": "Optional service account field containing the name of a kubernetes ServiceAccount. If the service account is specified, the service account secret token JWT will be used for authenticating with Akeyless. If the service account selector is not supplied, the secretRef will be used instead.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.AkeylessProvider": {
      "description": "AkeylessProvider Configures an store to sync secrets using Akeyless KV.",
      "type": "object",
      "required": [
        "akeylessGWApiURL",
        "authSecretRef"
      ],
      "properties": {
        "akeylessGWApiURL": {
          "description": "Akeyless GW API Url from which the secrets to be fetched from.",
          "type": "string"
        },
        "authSecretRef": {
          "description": "Auth configures how the operator authenticates with Akeyless.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.AkeylessAuth"
        },
        "caBundle": {
          "description": "PEM/base64 encoded CA bundle used to validate Akeyless Gateway certificate. Only used if the AkeylessGWApiURL URL is using HTTPS protocol. If not set the system root certificates are used to validate the TLS connection.",
          "type": "string",
          "format": "byte"
        },
        "caProvider": {
          "description": "The provider for the CA bundle to use to validate Akeyless Gateway certificate.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.CAProvider"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.AlibabaAuth": {
      "description": "AlibabaAuth contains a secretRef for credentials.",
      "type": "object",
      "properties": {
        "rrsa": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.AlibabaRRSAAuth"
        },
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.AlibabaAuthSecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.AlibabaAuthSecretRef": {
      "description": "AlibabaAuthSecretRef holds secret references for Alibaba credentials.",
      "type": "object",
      "required": [
        "accessKeyIDSecretRef",
        "accessKeySecretSecretRef"
      ],
      "properties": {
        "accessKeyIDSecretRef": {
          "description": "The AccessKeyID is used for authentication",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "accessKeySecretSecretRef": {
          "description": "The AccessKeySecret is used for authentication",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.AlibabaProvider": {
      "description": "AlibabaProvider configures a store to sync secrets using the Alibaba Secret Manager provider.",
      "type": "object",
      "required": [
        "auth",
        "regionID"
      ],
      "properties": {
        "auth": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.AlibabaAuth"
        },
        "regionID": {
          "description": "Alibaba Region to be used for the provider",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.AlibabaRRSAAuth": {
      "description": "Authenticate against Alibaba using RRSA.",
      "type": "object",
      "required": [
        "oidcProviderArn",
        "oidcTokenFilePath",
        "roleArn",
        "sessionName"
      ],
      "properties": {
        "oidcProviderArn": {
          "type": "string",
          "default": ""
        },
        "oidcTokenFilePath": {
          "type": "string",
          "default": ""
        },
        "roleArn": {
          "type": "string",
          "default": ""
        },
        "sessionName": {
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.AuthorizationProtocol": {
      "description": "AuthorizationProtocol contains the protocol-specific configuration",
      "type": "object",
      "properties": {
        "ntlm": {
          "description": "NTLMProtocol configures the store to use NTLM for auth",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.NTLMProtocol"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.AzureKVAuth": {
      "description": "Configuration used to authenticate with Azure.",
      "type": "object",
      "properties": {
        "clientCertificate": {
          "description": "The Azure ClientCertificate of the service principle used for authentication.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "clientId": {
          "description": "The Azure clientId of the service principle or managed identity used for authentication.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "clientSecret": {
          "description": "The Azure ClientSecret of the service principle used for authentication.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "tenantId": {
          "description": "The Azure tenantId of the managed identity used for authentication.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.AzureKVProvider": {
      "description": "Configures an store to sync secrets using Azure KV.",
      "type": "object",
      "required": [
        "vaultUrl"
      ],
      "properties": {
        "authSecretRef": {
          "description": "Auth configures how the operator authenticates with Azure. Required for ServicePrincipal auth type. Optional for WorkloadIdentity.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.AzureKVAuth"
        },
        "authType": {
          "description": "Auth type defines how to authenticate to the keyvault service. Valid values are: - \"ServicePrincipal\" (default): Using a service principal (tenantId, clientId, clientSecret) - \"ManagedIdentity\": Using Managed Identity assigned to the pod (see aad-pod-identity)",
          "type": "string"
        },
        "environmentType": {
          "description": "EnvironmentType specifies the Azure cloud environment endpoints to use for connecting and authenticating with Azure. By default it points to the public cloud AAD endpoint. The following endpoints are available, also see here: https://github.com/Azure/go-autorest/blob/main/autorest/azure/environments.go#L152 PublicCloud, USGovernmentCloud, ChinaCloud, GermanCloud",
          "type": "string"
        },
        "identityId": {
          "description": "If multiple Managed Identity is assigned to the pod, you can select the one to be used",
          "type": "string"
        },
        "serviceAccountRef": {
          "description": "ServiceAccountRef specified the service account that should be used when authenticating with WorkloadIdentity.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector"
        },
        "tenantId": {
          "description": "TenantID configures the Azure Tenant to send requests to. Required for ServicePrincipal auth type. Optional for WorkloadIdentity.",
          "type": "string"
        },
        "vaultUrl": {
          "description": "Vault Url from which the secrets to be fetched from.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.BeyondTrustProviderSecretRef": {
      "type": "object",
      "properties": {
        "secretRef": {
          "description": "SecretRef references a key in a secret that will be used as value.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "value": {
          "description": "Value can be specified directly to set a value without using a secret.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.BeyondtrustAuth": {
      "description": "Configures a store to sync secrets using BeyondTrust Password Safe.",
      "type": "object",
      "properties": {
        "apiKey": {
          "description": "APIKey If not provided then ClientID/ClientSecret become required.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.BeyondTrustProviderSecretRef"
        },
        "certificate": {
          "description": "Certificate (cert.pem) for use when authenticating with an OAuth client Id using a Client Certificate.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.BeyondTrustProviderSecretRef"
        },
        "certificateKey": {
          "description": "Certificate private key (key.pem). For use when authenticating with an OAuth client Id",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.BeyondTrustProviderSecretRef"
        },
        "clientId": {
          "description": "ClientID is the API OAuth Client ID.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.BeyondTrustProviderSecretRef"
        },
        "clientSecret": {
          "description": "ClientSecret is the API OAuth Client Secret.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.BeyondTrustProviderSecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.BeyondtrustProvider": {
      "type": "object",
      "required": [
        "auth",
        "server"
      ],
      "properties": {
        "auth": {
          "description": "Auth configures how the operator authenticates with Beyondtrust.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.BeyondtrustAuth"
        },
        "server": {
          "description": "Auth configures how API server works.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.BeyondtrustServer"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.BeyondtrustServer": {
      "description": "Configures a store to sync secrets using BeyondTrust Password Safe.",
      "type": "object",
      "required": [
        "apiUrl",
        "verifyCA"
      ],
      "properties": {
        "apiUrl": {
          "type": "string",
          "default": ""
        },
        "apiVersion": {
          "type": "string"
        },
        "clientTimeOutSeconds": {
          "description": "Timeout specifies a time limit for requests made by this Client. The timeout includes connection time, any redirects, and reading the response body. Defaults to 45 seconds.",
          "type": "integer",
          "format": "int32"
        },
        "retrievalType": {
          "description": "The secret retrieval type. SECRET = Secrets Safe (credential, text, file). MANAGED_ACCOUNT = Password Safe account associated with a system.",
          "type": "string"
        },
        "separator": {
          "description": "A character that separates the folder names.",
          "type": "string"
        },
        "verifyCA": {
          "type": "boolean",
          "default": false
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.BitwardenSecretsManagerAuth": {
      "description": "BitwardenSecretsManagerAuth contains the ref to the secret that contains the machine account token.",
      "type": "object",
      "required": [
        "secretRef"
      ],
      "properties": {
        "secretRef": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.BitwardenSecretsManagerSecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.BitwardenSecretsManagerProvider": {
      "description": "BitwardenSecretsManagerProvider configures a store to sync secrets with a Bitwarden Secrets Manager instance.",
      "type": "object",
      "required": [
        "organizationID",
        "projectID",
        "auth"
      ],
      "properties": {
        "apiURL": {
          "type": "string"
        },
        "auth": {
          "description": "Auth configures how secret-manager authenticates with a bitwarden machine account instance. Make sure that the token being used has permissions on the given secret.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.BitwardenSecretsManagerAuth"
        },
        "bitwardenServerSDKURL": {
          "type": "string"
        },
        "caBundle": {
          "description": "Base64 encoded certificate for the bitwarden server sdk. The sdk MUST run with HTTPS to make sure no MITM attack can be performed.",
          "type": "string"
        },
        "caProvider": {
          "description": "see: https://external-secrets.io/latest/spec/#external-secrets.io/v1alpha1.CAProvider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.CAProvider"
        },
        "identityURL": {
          "type": "string"
        },
        "organizationID": {
          "description": "OrganizationID determines which organization this secret store manages.",
          "type": "string",
          "default": ""
        },
        "projectID": {
          "description": "ProjectID determines which project this secret store manages.",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.BitwardenSecretsManagerSecretRef": {
      "description": "BitwardenSecretsManagerSecretRef contains the credential ref to the bitwarden instance.",
      "type": "object",
      "required": [
        "credentials"
      ],
      "properties": {
        "credentials": {
          "description": "AccessToken used for the bitwarden instance.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.CAProvider": {
      "description": "Used to provide custom certificate authority (CA) certificates for a secret store. The CAProvider points to a Secret or ConfigMap resource that contains a PEM-encoded certificate.",
      "type": "object",
      "required": [
        "type",
        "name"
      ],
      "properties": {
        "key": {
          "description": "The key where the CA certificate can be found in the Secret or ConfigMap.",
          "type": "string"
        },
        "name": {
          "description": "The name of the object located at the provider type.",
          "type": "string",
          "default": ""
        },
        "namespace": {
          "description": "The namespace the Provider type is in. Can only be defined when used in a ClusterSecretStore.",
          "type": "string"
        },
        "type": {
          "description": "The type of provider to use such as \"Secret\", or \"ConfigMap\".",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.CSMAuth": {
      "description": "CSMAuth contains a secretRef for credentials.",
      "type": "object",
      "properties": {
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.CSMAuthSecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.CSMAuthSecretRef": {
      "description": "CSMAuthSecretRef holds secret references for Cloud.ru credentials.",
      "type": "object",
      "required": [
        "accessKeyIDSecretRef",
        "accessKeySecretSecretRef"
      ],
      "properties": {
        "accessKeyIDSecretRef": {
          "description": "The AccessKeyID is used for authentication",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "accessKeySecretSecretRef": {
          "description": "The AccessKeySecret is used for authentication",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.CertAuth": {
      "type": "object",
      "properties": {
        "clientCert": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "clientKey": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.ChefAuth": {
      "description": "ChefAuth contains a secretRef for credentials.",
      "type": "object",
      "required": [
        "secretRef"
      ],
      "properties": {
        "secretRef": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.ChefAuthSecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.ChefAuthSecretRef": {
      "description": "ChefAuthSecretRef holds secret references for chef server login credentials.",
      "type": "object",
      "required": [
        "privateKeySecretRef"
      ],
      "properties": {
        "privateKeySecretRef": {
          "description": "SecretKey is the Signing Key in PEM format, used for authentication.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.ChefProvider": {
      "description": "ChefProvider configures a store to sync secrets using basic chef server connection credentials.",
      "type": "object",
      "required": [
        "auth",
        "username",
        "serverUrl"
      ],
      "properties": {
        "auth": {
          "description": "Auth defines the information necessary to authenticate against chef Server",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.ChefAuth"
        },
        "serverUrl": {
          "description": "ServerURL is the chef server URL used to connect to. If using orgs you should include your org in the url and terminate the url with a \"/\"",
          "type": "string",
          "default": ""
        },
        "username": {
          "description": "UserName should be the user ID on the chef server",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.CloudruSMProvider": {
      "description": "CloudruSMProvider configures a store to sync secrets using the Cloud.ru Secret Manager provider.",
      "type": "object",
      "required": [
        "auth"
      ],
      "properties": {
        "auth": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.CSMAuth"
        },
        "projectID": {
          "description": "ProjectID is the project, which the secrets are stored in.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.ClusterExternalSecret": {
      "description": "ClusterExternalSecret is the Schema for the clusterexternalsecrets API.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.ClusterExternalSecretSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.ClusterExternalSecretStatus"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.ClusterExternalSecretNamespaceFailure": {
      "description": "ClusterExternalSecretNamespaceFailure represents a failed namespace deployment and it's reason.",
      "type": "object",
      "required": [
        "namespace"
      ],
      "properties": {
        "namespace": {
          "description": "Namespace is the namespace that failed when trying to apply an ExternalSecret",
          "type": "string",
          "default": ""
        },
        "reason": {
          "description": "Reason is why the ExternalSecret failed to apply to the namespace",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.ClusterExternalSecretSpec": {
      "description": "ClusterExternalSecretSpec defines the desired state of ClusterExternalSecret.",
      "type": "object",
      "required": [
        "externalSecretSpec"
      ],
      "properties": {
        "externalSecretMetadata": {
          "description": "The metadata of the external secrets to be created",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.ExternalSecretMetadata"
        },
        "externalSecretName": {
          "description": "The name of the external secrets to be created. Defaults to the name of the ClusterExternalSecret",
          "type": "string"
        },
        "externalSecretSpec": {
          "description": "The spec for the ExternalSecrets to be created",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.ExternalSecretSpec"
        },
        "namespaceSelector": {
          "description": "The labels to select by to find the Namespaces to create the ExternalSecrets in",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "namespaceSelectors": {
          "description": "A list of labels to select by to find the Namespaces to create the ExternalSecrets in. The selectors are ORed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
          }
        },
        "namespaces": {
          "description": "Choose namespaces by name. This field is ORed with anything that NamespaceSelectors ends up choosing. Deprecated: Use NamespaceSelectors instead.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "refreshTime": {
          "description": "The time in which the controller should reconcile its objects and recheck namespaces for labels.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Duration"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.ClusterExternalSecretStatus": {
      "description": "ClusterExternalSecretStatus defines the observed state of ClusterExternalSecret.",
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.ClusterExternalSecretStatusCondition"
          }
        },
        "externalSecretName": {
          "description": "ExternalSecretName is the name of the ExternalSecrets created by the ClusterExternalSecret",
          "type": "string"
        },
        "failedNamespaces": {
          "description": "Failed namespaces are the namespaces that failed to apply an ExternalSecret",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.ClusterExternalSecretNamespaceFailure"
          }
        },
        "provisionedNamespaces": {
          "description": "ProvisionedNamespaces are the namespaces where the ClusterExternalSecret has secrets",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.ClusterExternalSecretStatusCondition": {
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "message": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "default": ""
        },
        "type": {
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.ClusterSecretStore": {
      "description": "ClusterSecretStore represents a secure external location for storing secrets, which can be referenced as part of `storeRef` fields.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.SecretStoreSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.SecretStoreStatus"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.ClusterSecretStoreCondition": {
      "description": "ClusterSecretStoreCondition describes a condition by which to choose namespaces to process ExternalSecrets in for a ClusterSecretStore instance.",
      "type": "object",
      "properties": {
        "namespaceRegexes": {
          "description": "Choose namespaces by using regex matching",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "namespaceSelector": {
          "description": "Choose namespace using a labelSelector",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "namespaces": {
          "description": "Choose namespaces by name",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.ConjurAPIKey": {
      "type": "object",
      "required": [
        "account",
        "userRef",
        "apiKeyRef"
      ],
      "properties": {
        "account": {
          "description": "Account is the Conjur organization account name.",
          "type": "string",
          "default": ""
        },
        "apiKeyRef": {
          "description": "A reference to a specific 'key' containing the Conjur API key within a Secret resource. In some instances, `key` is a required field.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "userRef": {
          "description": "A reference to a specific 'key' containing the Conjur username within a Secret resource. In some instances, `key` is a required field.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.ConjurAuth": {
      "type": "object",
      "properties": {
        "apikey": {
          "description": "Authenticates with Conjur using an API key.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.ConjurAPIKey"
        },
        "jwt": {
          "description": "Jwt enables JWT authentication using Kubernetes service account tokens.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.ConjurJWT"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.ConjurJWT": {
      "type": "object",
      "required": [
        "account",
        "serviceID"
      ],
      "properties": {
        "account": {
          "description": "Account is the Conjur organization account name.",
          "type": "string",
          "default": ""
        },
        "hostId": {
          "description": "Optional HostID for JWT authentication. This may be used depending on how the Conjur JWT authenticator policy is configured.",
          "type": "string",
          "default": ""
        },
        "secretRef": {
          "description": "Optional SecretRef that refers to a key in a Secret resource containing JWT token to authenticate with Conjur using the JWT authentication method.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "serviceAccountRef": {
          "description": "Optional ServiceAccountRef specifies the Kubernetes service account for which to request a token for with the `TokenRequest` API.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector"
        },
        "serviceID": {
          "description": "The conjur authn jwt webservice id",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.ConjurProvider": {
      "type": "object",
      "required": [
        "url",
        "auth"
      ],
      "properties": {
        "auth": {
          "description": "Defines authentication settings for connecting to Conjur.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.ConjurAuth"
        },
        "caBundle": {
          "description": "CABundle is a PEM encoded CA bundle that will be used to validate the Conjur server certificate.",
          "type": "string"
        },
        "caProvider": {
          "description": "Used to provide custom certificate authority (CA) certificates for a secret store. The CAProvider points to a Secret or ConfigMap resource that contains a PEM-encoded certificate.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.CAProvider"
        },
        "url": {
          "description": "URL is the endpoint of the Conjur instance.",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.DelineaProvider": {
      "description": "See https://github.com/DelineaXPM/dsv-sdk-go/blob/main/vault/vault.go.",
      "type": "object",
      "required": [
        "clientId",
        "clientSecret",
        "tenant"
      ],
      "properties": {
        "clientId": {
          "description": "ClientID is the non-secret part of the credential.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.DelineaProviderSecretRef"
        },
        "clientSecret": {
          "description": "ClientSecret is the secret part of the credential.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.DelineaProviderSecretRef"
        },
        "tenant": {
          "description": "Tenant is the chosen hostname / site name.",
          "type": "string",
          "default": ""
        },
        "tld": {
          "description": "TLD is based on the server location that was chosen during provisioning. If unset, defaults to \"com\".",
          "type": "string"
        },
        "urlTemplate": {
          "description": "URLTemplate If unset, defaults to \"https://%s.secretsvaultcloud.%s/v1/%s%s\".",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.DelineaProviderSecretRef": {
      "type": "object",
      "properties": {
        "secretRef": {
          "description": "SecretRef references a key in a secret that will be used as value.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "value": {
          "description": "Value can be specified directly to set a value without using a secret.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.Device42Auth": {
      "type": "object",
      "required": [
        "secretRef"
      ],
      "properties": {
        "secretRef": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.Device42SecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.Device42Provider": {
      "description": "Device42Provider configures a store to sync secrets with a Device42 instance.",
      "type": "object",
      "required": [
        "host",
        "auth"
      ],
      "properties": {
        "auth": {
          "description": "Auth configures how secret-manager authenticates with a Device42 instance.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.Device42Auth"
        },
        "host": {
          "description": "URL configures the Device42 instance URL.",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.Device42SecretRef": {
      "type": "object",
      "properties": {
        "credentials": {
          "description": "Username / Password is used for authentication.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.DopplerAuth": {
      "type": "object",
      "required": [
        "secretRef"
      ],
      "properties": {
        "secretRef": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.DopplerAuthSecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.DopplerAuthSecretRef": {
      "type": "object",
      "required": [
        "dopplerToken"
      ],
      "properties": {
        "dopplerToken": {
          "description": "The DopplerToken is used for authentication. See https://docs.doppler.com/reference/api#authentication for auth token types. The Key attribute defaults to dopplerToken if not specified.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.DopplerProvider": {
      "description": "DopplerProvider configures a store to sync secrets using the Doppler provider. Project and Config are required if not using a Service Token.",
      "type": "object",
      "required": [
        "auth"
      ],
      "properties": {
        "auth": {
          "description": "Auth configures how the Operator authenticates with the Doppler API",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.DopplerAuth"
        },
        "config": {
          "description": "Doppler config (required if not using a Service Token)",
          "type": "string"
        },
        "format": {
          "description": "Format enables the downloading of secrets as a file (string)",
          "type": "string"
        },
        "nameTransformer": {
          "description": "Environment variable compatible name transforms that change secret names to a different format",
          "type": "string"
        },
        "project": {
          "description": "Doppler project (required if not using a Service Token)",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.ExternalSecret": {
      "description": "ExternalSecret is the Schema for the external-secrets API.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.ExternalSecretSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.ExternalSecretStatus"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.ExternalSecretData": {
      "description": "ExternalSecretData defines the connection between the Kubernetes Secret key (spec.data.<key>) and the Provider data.",
      "type": "object",
      "required": [
        "secretKey",
        "remoteRef"
      ],
      "properties": {
        "remoteRef": {
          "description": "RemoteRef points to the remote secret and defines which secret (version/property/..) to fetch.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.ExternalSecretDataRemoteRef"
        },
        "secretKey": {
          "description": "The key in the Kubernetes Secret to store the value.",
          "type": "string",
          "default": ""
        },
        "sourceRef": {
          "description": "SourceRef allows you to override the source from which the value will be pulled.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.StoreSourceRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.ExternalSecretDataFromRemoteRef": {
      "type": "object",
      "properties": {
        "extract": {
          "description": "Used to extract multiple key/value pairs from one secret Note: Extract does not support sourceRef.Generator or sourceRef.GeneratorRef.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.ExternalSecretDataRemoteRef"
        },
        "find": {
          "description": "Used to find secrets based on tags or regular expressions Note: Find does not support sourceRef.Generator or sourceRef.GeneratorRef.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.ExternalSecretFind"
        },
        "rewrite": {
          "description": "Used to rewrite secret Keys after getting them from the secret Provider Multiple Rewrite operations can be provided. They are applied in a layered order (first to last)",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.ExternalSecretRewrite"
          }
        },
        "sourceRef": {
          "description": "SourceRef points to a store or generator which contains secret values ready to use. Use this in combination with Extract or Find pull values out of a specific SecretStore. When sourceRef points to a generator Extract or Find is not supported. The generator returns a static map of values",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.StoreGeneratorSourceRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.ExternalSecretDataRemoteRef": {
      "description": "ExternalSecretDataRemoteRef defines Provider data location.",
      "type": "object",
      "required": [
        "key"
      ],
      "properties": {
        "conversionStrategy": {
          "description": "Used to define a conversion Strategy",
          "type": "string"
        },
        "decodingStrategy": {
          "description": "Used to define a decoding Strategy",
          "type": "string"
        },
        "key": {
          "description": "Key is the key used in the Provider, mandatory",
          "type": "string",
          "default": ""
        },
        "metadataPolicy": {
          "description": "Policy for fetching tags/labels from provider secrets, possible options are Fetch, None. Defaults to None",
          "type": "string"
        },
        "property": {
          "description": "Used to select a specific property of the Provider value (if a map), if supported",
          "type": "string"
        },
        "version": {
          "description": "Used to select a specific version of the Provider value, if supported",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.ExternalSecretFind": {
      "type": "object",
      "properties": {
        "conversionStrategy": {
          "description": "Used to define a conversion Strategy",
          "type": "string"
        },
        "decodingStrategy": {
          "description": "Used to define a decoding Strategy",
          "type": "string"
        },
        "name": {
          "description": "Finds secrets based on the name.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.FindName"
        },
        "path": {
          "description": "A root path to start the find operations.",
          "type": "string"
        },
        "tags": {
          "description": "Find secrets based on tags.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.ExternalSecretMetadata": {
      "description": "ExternalSecretMetadata defines metadata fields for the ExternalSecret generated by the ClusterExternalSecret.",
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.ExternalSecretRewrite": {
      "type": "object",
      "properties": {
        "regexp": {
          "description": "Used to rewrite with regular expressions. The resulting key will be the output of a regexp.ReplaceAll operation.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.ExternalSecretRewriteRegexp"
        },
        "transform": {
          "description": "Used to apply string transformation on the secrets. The resulting key will be the output of the template applied by the operation.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.ExternalSecretRewriteTransform"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.ExternalSecretRewriteRegexp": {
      "type": "object",
      "required": [
        "source",
        "target"
      ],
      "properties": {
        "source": {
          "description": "Used to define the regular expression of a re.Compiler.",
          "type": "string",
          "default": ""
        },
        "target": {
          "description": "Used to define the target pattern of a ReplaceAll operation.",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.ExternalSecretRewriteTransform": {
      "type": "object",
      "required": [
        "template"
      ],
      "properties": {
        "template": {
          "description": "Used to define the template to apply on the secret name. `.value ` will specify the secret name in the template.",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.ExternalSecretSpec": {
      "description": "ExternalSecretSpec defines the desired state of ExternalSecret.",
      "type": "object",
      "properties": {
        "data": {
          "description": "Data defines the connection between the Kubernetes Secret keys and the Provider data",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.ExternalSecretData"
          }
        },
        "dataFrom": {
          "description": "DataFrom is used to fetch all properties from a specific Provider data If multiple entries are specified, the Secret keys are merged in the specified order",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.ExternalSecretDataFromRemoteRef"
          }
        },
        "refreshInterval": {
          "description": "RefreshInterval is the amount of time before the values are read again from the SecretStore provider, specified as Golang Duration strings. Valid time units are \"ns\", \"us\" (or \"\u00b5s\"), \"ms\", \"s\", \"m\", \"h\" Example values: \"1h\", \"2h30m\", \"10s\" May be set to zero to fetch and create it once. Defaults to 1h.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Duration"
        },
        "refreshPolicy": {
          "description": "RefreshPolicy determines how the ExternalSecret should be refreshed: - CreatedOnce: Creates the Secret only if it does not exist and does not update it thereafter - Periodic: Synchronizes the Secret from the external source at regular intervals specified by refreshInterval.\n  No periodic updates occur if refreshInterval is 0.\n- OnChange: Only synchronizes the Secret when the ExternalSecret's metadata or specification changes",
          "type": "string"
        },
        "secretStoreRef": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.SecretStoreRef"
        },
        "target": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.ExternalSecretTarget"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.ExternalSecretStatus": {
      "type": "object",
      "properties": {
        "binding": {
          "description": "Binding represents a servicebinding.io Provisioned Service reference to the secret",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "conditions": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.ExternalSecretStatusCondition"
          }
        },
        "refreshTime": {
          "description": "refreshTime is the time and date the external secret was fetched and the target secret updated",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "syncedResourceVersion": {
          "description": "SyncedResourceVersion keeps track of the last synced version",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.ExternalSecretStatusCondition": {
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "default": ""
        },
        "type": {
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.ExternalSecretTarget": {
      "description": "ExternalSecretTarget defines the Kubernetes Secret to be created There can be only one target per ExternalSecret.",
      "type": "object",
      "properties": {
        "creationPolicy": {
          "description": "CreationPolicy defines rules on how to create the resulting Secret. Defaults to \"Owner\"",
          "type": "string"
        },
        "deletionPolicy": {
          "description": "DeletionPolicy defines rules on how to delete the resulting Secret. Defaults to \"Retain\"",
          "type": "string"
        },
        "immutable": {
          "description": "Immutable defines if the final secret will be immutable",
          "type": "boolean"
        },
        "name": {
          "description": "The name of the Secret resource to be managed. Defaults to the .metadata.name of the ExternalSecret resource",
          "type": "string"
        },
        "template": {
          "description": "Template defines a blueprint for the created Secret resource.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.ExternalSecretTemplate"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.ExternalSecretTemplate": {
      "description": "ExternalSecretTemplate defines a blueprint for the created Secret resource. we can not use native corev1.Secret, it will have empty ObjectMeta values: https://github.com/kubernetes-sigs/controller-tools/issues/448",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "engineVersion": {
          "description": "EngineVersion specifies the template engine version that should be used to compile/execute the template specified in .data and .templateFrom[].",
          "type": "string"
        },
        "mergePolicy": {
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.ExternalSecretTemplateMetadata"
        },
        "templateFrom": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.TemplateFrom"
          }
        },
        "type": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.ExternalSecretTemplateMetadata": {
      "description": "ExternalSecretTemplateMetadata defines metadata fields for the Secret blueprint.",
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.FakeProvider": {
      "description": "FakeProvider configures a fake provider that returns static values.",
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.FakeProviderData"
          }
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.FakeProviderData": {
      "type": "object",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string",
          "default": ""
        },
        "value": {
          "type": "string",
          "default": ""
        },
        "version": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.FindName": {
      "type": "object",
      "properties": {
        "regexp": {
          "description": "Finds secrets base",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.FortanixProvider": {
      "type": "object",
      "properties": {
        "apiKey": {
          "description": "APIKey is the API token to access SDKMS Applications.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.FortanixProviderSecretRef"
        },
        "apiUrl": {
          "description": "APIURL is the URL of SDKMS API. Defaults to `sdkms.fortanix.com`.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.FortanixProviderSecretRef": {
      "type": "object",
      "properties": {
        "secretRef": {
          "description": "SecretRef is a reference to a secret containing the SDKMS API Key.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.GCPSMAuth": {
      "type": "object",
      "properties": {
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.GCPSMAuthSecretRef"
        },
        "workloadIdentity": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.GCPWorkloadIdentity"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.GCPSMAuthSecretRef": {
      "type": "object",
      "properties": {
        "secretAccessKeySecretRef": {
          "description": "The SecretAccessKey is used for authentication",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.GCPSMProvider": {
      "description": "GCPSMProvider Configures a store to sync secrets using the GCP Secret Manager provider.",
      "type": "object",
      "properties": {
        "auth": {
          "description": "Auth defines the information necessary to authenticate against GCP",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.GCPSMAuth"
        },
        "location": {
          "description": "Location optionally defines a location for a secret",
          "type": "string"
        },
        "projectID": {
          "description": "ProjectID project where secret is located",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.GCPWorkloadIdentity": {
      "type": "object",
      "required": [
        "serviceAccountRef"
      ],
      "properties": {
        "clusterLocation": {
          "description": "ClusterLocation is the location of the cluster If not specified, it fetches information from the metadata server",
          "type": "string"
        },
        "clusterName": {
          "description": "ClusterName is the name of the cluster If not specified, it fetches information from the metadata server",
          "type": "string"
        },
        "clusterProjectID": {
          "description": "ClusterProjectID is the project ID of the cluster If not specified, it fetches information from the metadata server",
          "type": "string"
        },
        "serviceAccountRef": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.GeneratorRef": {
      "description": "GeneratorRef points to a generator custom resource.",
      "type": "object",
      "required": [
        "kind",
        "name"
      ],
      "properties": {
        "apiVersion": {
          "description": "Specify the apiVersion of the generator resource",
          "type": "string"
        },
        "kind": {
          "description": "Specify the Kind of the generator resource",
          "type": "string",
          "default": ""
        },
        "name": {
          "description": "Specify the name of the generator resource",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.GithubAppAuth": {
      "type": "object",
      "required": [
        "privateKey"
      ],
      "properties": {
        "privateKey": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.GithubProvider": {
      "description": "Configures a store to push secrets to Github Actions.",
      "type": "object",
      "required": [
        "auth",
        "appID",
        "installationID",
        "organization"
      ],
      "properties": {
        "appID": {
          "description": "appID specifies the Github APP that will be used to authenticate the client",
          "type": "integer",
          "format": "int64",
          "default": 0
        },
        "auth": {
          "description": "auth configures how secret-manager authenticates with a Github instance.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.GithubAppAuth"
        },
        "environment": {
          "description": "environment will be used to fetch secrets from a particular environment within a github repository",
          "type": "string"
        },
        "installationID": {
          "description": "installationID specifies the Github APP installation that will be used to authenticate the client",
          "type": "integer",
          "format": "int64",
          "default": 0
        },
        "organization": {
          "description": "organization will be used to fetch secrets from the Github organization",
          "type": "string",
          "default": ""
        },
        "repository": {
          "description": "repository will be used to fetch secrets from the Github repository within an organization",
          "type": "string"
        },
        "uploadURL": {
          "description": "Upload URL for enterprise instances. Default to URL.",
          "type": "string"
        },
        "url": {
          "description": "URL configures the Github instance URL. Defaults to https://github.com/.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.GitlabAuth": {
      "type": "object",
      "required": [
        "SecretRef"
      ],
      "properties": {
        "SecretRef": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.GitlabSecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.GitlabProvider": {
      "description": "Configures a store to sync secrets with a GitLab instance.",
      "type": "object",
      "required": [
        "auth"
      ],
      "properties": {
        "auth": {
          "description": "Auth configures how secret-manager authenticates with a GitLab instance.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.GitlabAuth"
        },
        "caBundle": {
          "description": "Base64 encoded certificate for the GitLab server sdk. The sdk MUST run with HTTPS to make sure no MITM attack can be performed.",
          "type": "string",
          "format": "byte"
        },
        "caProvider": {
          "description": "see: https://external-secrets.io/latest/spec/#external-secrets.io/v1alpha1.CAProvider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.CAProvider"
        },
        "environment": {
          "description": "Environment environment_scope of gitlab CI/CD variables (Please see https://docs.gitlab.com/ee/ci/environments/#create-a-static-environment on how to create environments)",
          "type": "string"
        },
        "groupIDs": {
          "description": "GroupIDs specify, which gitlab groups to pull secrets from. Group secrets are read from left to right followed by the project variables.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "inheritFromGroups": {
          "description": "InheritFromGroups specifies whether parent groups should be discovered and checked for secrets.",
          "type": "boolean"
        },
        "projectID": {
          "description": "ProjectID specifies a project where secrets are located.",
          "type": "string"
        },
        "url": {
          "description": "URL configures the GitLab instance URL. Defaults to https://gitlab.com/.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.GitlabSecretRef": {
      "type": "object",
      "properties": {
        "accessToken": {
          "description": "AccessToken is used for authentication.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.IBMAuth": {
      "type": "object",
      "properties": {
        "containerAuth": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.IBMAuthContainerAuth"
        },
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.IBMAuthSecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.IBMAuthContainerAuth": {
      "description": "IBM Container-based auth with IAM Trusted Profile.",
      "type": "object",
      "required": [
        "profile"
      ],
      "properties": {
        "iamEndpoint": {
          "type": "string"
        },
        "profile": {
          "description": "the IBM Trusted Profile",
          "type": "string",
          "default": ""
        },
        "tokenLocation": {
          "description": "Location the token is mounted on the pod",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.IBMAuthSecretRef": {
      "type": "object",
      "properties": {
        "secretApiKeySecretRef": {
          "description": "The SecretAccessKey is used for authentication",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.IBMProvider": {
      "description": "Configures an store to sync secrets using a IBM Cloud Secrets Manager backend.",
      "type": "object",
      "required": [
        "auth"
      ],
      "properties": {
        "auth": {
          "description": "Auth configures how secret-manager authenticates with the IBM secrets manager.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.IBMAuth"
        },
        "serviceUrl": {
          "description": "ServiceURL is the Endpoint URL that is specific to the Secrets Manager service instance",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.InfisicalAuth": {
      "type": "object",
      "properties": {
        "universalAuthCredentials": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.UniversalAuthCredentials"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.InfisicalProvider": {
      "description": "InfisicalProvider configures a store to sync secrets using the Infisical provider.",
      "type": "object",
      "required": [
        "auth",
        "secretsScope"
      ],
      "properties": {
        "auth": {
          "description": "Auth configures how the Operator authenticates with the Infisical API",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.InfisicalAuth"
        },
        "hostAPI": {
          "description": "HostAPI specifies the base URL of the Infisical API. If not provided, it defaults to \"https://app.infisical.com/api\".",
          "type": "string"
        },
        "secretsScope": {
          "description": "SecretsScope defines the scope of the secrets within the workspace",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.MachineIdentityScopeInWorkspace"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.KeeperSecurityProvider": {
      "description": "KeeperSecurityProvider Configures a store to sync secrets using Keeper Security.",
      "type": "object",
      "required": [
        "authRef",
        "folderID"
      ],
      "properties": {
        "authRef": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "folderID": {
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.KubernetesAuth": {
      "type": "object",
      "properties": {
        "cert": {
          "description": "has both clientCert and clientKey as secretKeySelector",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.CertAuth"
        },
        "serviceAccount": {
          "description": "points to a service account that should be used for authentication",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector"
        },
        "token": {
          "description": "use static token to authenticate with",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.TokenAuth"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.KubernetesProvider": {
      "description": "Configures a store to sync secrets with a Kubernetes instance.",
      "type": "object",
      "properties": {
        "auth": {
          "description": "Auth configures how secret-manager authenticates with a Kubernetes instance.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.KubernetesAuth"
        },
        "authRef": {
          "description": "A reference to a secret that contains the auth information.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "remoteNamespace": {
          "description": "Remote namespace to fetch the secrets from",
          "type": "string"
        },
        "server": {
          "description": "configures the Kubernetes server Address.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.KubernetesServer"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.KubernetesServer": {
      "type": "object",
      "properties": {
        "caBundle": {
          "description": "CABundle is a base64-encoded CA certificate",
          "type": "string",
          "format": "byte"
        },
        "caProvider": {
          "description": "see: https://external-secrets.io/v0.4.1/spec/#external-secrets.io/v1alpha1.CAProvider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.CAProvider"
        },
        "url": {
          "description": "configures the Kubernetes server Address.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.MachineIdentityScopeInWorkspace": {
      "type": "object",
      "required": [
        "environmentSlug",
        "projectSlug"
      ],
      "properties": {
        "environmentSlug": {
          "description": "EnvironmentSlug is the required slug identifier for the environment.",
          "type": "string",
          "default": ""
        },
        "expandSecretReferences": {
          "description": "ExpandSecretReferences indicates whether secret references should be expanded. Defaults to true if not provided.",
          "type": "boolean"
        },
        "projectSlug": {
          "description": "ProjectSlug is the required slug identifier for the project.",
          "type": "string",
          "default": ""
        },
        "recursive": {
          "description": "Recursive indicates whether the secrets should be fetched recursively. Defaults to false if not provided.",
          "type": "boolean"
        },
        "secretsPath": {
          "description": "SecretsPath specifies the path to the secrets within the workspace. Defaults to \"/\" if not provided.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.NTLMProtocol": {
      "description": "NTLMProtocol contains the NTLM-specific configuration.",
      "type": "object",
      "required": [
        "usernameSecret",
        "passwordSecret"
      ],
      "properties": {
        "passwordSecret": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "usernameSecret": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.OnboardbaseAuthSecretRef": {
      "description": "OnboardbaseAuthSecretRef holds secret references for onboardbase API Key credentials.",
      "type": "object",
      "required": [
        "apiKeyRef",
        "passcodeRef"
      ],
      "properties": {
        "apiKeyRef": {
          "description": "OnboardbaseAPIKey is the APIKey generated by an admin account. It is used to recognize and authorize access to a project and environment within onboardbase",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "passcodeRef": {
          "description": "OnboardbasePasscode is the passcode attached to the API Key",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.OnboardbaseProvider": {
      "description": "OnboardbaseProvider configures a store to sync secrets using the Onboardbase provider. Project and Config are required if not using a Service Token.",
      "type": "object",
      "required": [
        "auth",
        "apiHost",
        "project",
        "environment"
      ],
      "properties": {
        "apiHost": {
          "description": "APIHost use this to configure the host url for the API for selfhosted installation, default is https://public.onboardbase.com/api/v1/",
          "type": "string",
          "default": ""
        },
        "auth": {
          "description": "Auth configures how the Operator authenticates with the Onboardbase API",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.OnboardbaseAuthSecretRef"
        },
        "environment": {
          "description": "Environment is the name of an environmnent within a project to pull the secrets from",
          "type": "string",
          "default": ""
        },
        "project": {
          "description": "Project is an onboardbase project that the secrets should be pulled from",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.OnePasswordAuth": {
      "description": "OnePasswordAuth contains a secretRef for credentials.",
      "type": "object",
      "required": [
        "secretRef"
      ],
      "properties": {
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.OnePasswordAuthSecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.OnePasswordAuthSecretRef": {
      "description": "OnePasswordAuthSecretRef holds secret references for 1Password credentials.",
      "type": "object",
      "required": [
        "connectTokenSecretRef"
      ],
      "properties": {
        "connectTokenSecretRef": {
          "description": "The ConnectToken is used for authentication to a 1Password Connect Server.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.OnePasswordProvider": {
      "description": "OnePasswordProvider configures a store to sync secrets using the 1Password Secret Manager provider.",
      "type": "object",
      "required": [
        "auth",
        "connectHost",
        "vaults"
      ],
      "properties": {
        "auth": {
          "description": "Auth defines the information necessary to authenticate against OnePassword Connect Server",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.OnePasswordAuth"
        },
        "connectHost": {
          "description": "ConnectHost defines the OnePassword Connect Server to connect to",
          "type": "string",
          "default": ""
        },
        "vaults": {
          "description": "Vaults defines which OnePassword vaults to search in which order",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32",
            "default": 0
          }
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.OracleAuth": {
      "type": "object",
      "required": [
        "tenancy",
        "user",
        "secretRef"
      ],
      "properties": {
        "secretRef": {
          "description": "SecretRef to pass through sensitive information.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.OracleSecretRef"
        },
        "tenancy": {
          "description": "Tenancy is the tenancy OCID where user is located.",
          "type": "string",
          "default": ""
        },
        "user": {
          "description": "User is an access OCID specific to the account.",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.OracleProvider": {
      "description": "Configures an store to sync secrets using a Oracle Vault backend.",
      "type": "object",
      "required": [
        "region",
        "vault"
      ],
      "properties": {
        "auth": {
          "description": "Auth configures how secret-manager authenticates with the Oracle Vault. If empty, use the instance principal, otherwise the user credentials specified in Auth.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.OracleAuth"
        },
        "compartment": {
          "description": "Compartment is the vault compartment OCID. Required for PushSecret",
          "type": "string"
        },
        "encryptionKey": {
          "description": "EncryptionKey is the OCID of the encryption key within the vault. Required for PushSecret",
          "type": "string"
        },
        "principalType": {
          "description": "The type of principal to use for authentication. If left blank, the Auth struct will determine the principal type. This optional field must be specified if using workload identity.",
          "type": "string"
        },
        "region": {
          "description": "Region is the region where vault is located.",
          "type": "string",
          "default": ""
        },
        "serviceAccountRef": {
          "description": "ServiceAccountRef specified the service account that should be used when authenticating with WorkloadIdentity.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector"
        },
        "vault": {
          "description": "Vault is the vault's OCID of the specific vault where secret is located.",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.OracleSecretRef": {
      "type": "object",
      "required": [
        "privatekey",
        "fingerprint"
      ],
      "properties": {
        "fingerprint": {
          "description": "Fingerprint is the fingerprint of the API private key.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "privatekey": {
          "description": "PrivateKey is the user's API Signing Key in PEM format, used for authentication.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.PassboltAuth": {
      "description": "Passbolt contains a secretRef for the passbolt credentials.",
      "type": "object",
      "required": [
        "passwordSecretRef",
        "privateKeySecretRef"
      ],
      "properties": {
        "passwordSecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "privateKeySecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.PassboltProvider": {
      "type": "object",
      "required": [
        "auth",
        "host"
      ],
      "properties": {
        "auth": {
          "description": "Auth defines the information necessary to authenticate against Passbolt Server",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.PassboltAuth"
        },
        "host": {
          "description": "Host defines the Passbolt Server to connect to",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.PasswordDepotAuth": {
      "type": "object",
      "required": [
        "secretRef"
      ],
      "properties": {
        "secretRef": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.PasswordDepotSecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.PasswordDepotProvider": {
      "description": "Configures a store to sync secrets with a Password Depot instance.",
      "type": "object",
      "required": [
        "host",
        "database",
        "auth"
      ],
      "properties": {
        "auth": {
          "description": "Auth configures how secret-manager authenticates with a Password Depot instance.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.PasswordDepotAuth"
        },
        "database": {
          "description": "Database to use as source",
          "type": "string",
          "default": ""
        },
        "host": {
          "description": "URL configures the Password Depot instance URL.",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.PasswordDepotSecretRef": {
      "type": "object",
      "properties": {
        "credentials": {
          "description": "Username / Password is used for authentication.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.PreviderAuth": {
      "description": "PreviderAuth contains a secretRef for credentials.",
      "type": "object",
      "properties": {
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.PreviderAuthSecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.PreviderAuthSecretRef": {
      "description": "PreviderAuthSecretRef holds secret references for Previder Vault credentials.",
      "type": "object",
      "required": [
        "accessToken"
      ],
      "properties": {
        "accessToken": {
          "description": "The AccessToken is used for authentication",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.PreviderProvider": {
      "description": "PreviderProvider configures a store to sync secrets using the Previder Secret Manager provider.",
      "type": "object",
      "required": [
        "auth"
      ],
      "properties": {
        "auth": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.PreviderAuth"
        },
        "baseUri": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.PulumiProvider": {
      "type": "object",
      "required": [
        "accessToken",
        "organization",
        "project",
        "environment"
      ],
      "properties": {
        "accessToken": {
          "description": "AccessToken is the access tokens to sign in to the Pulumi Cloud Console.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.PulumiProviderSecretRef"
        },
        "apiUrl": {
          "description": "APIURL is the URL of the Pulumi API.",
          "type": "string"
        },
        "environment": {
          "description": "Environment are YAML documents composed of static key-value pairs, programmatic expressions, dynamically retrieved values from supported providers including all major clouds, and other Pulumi ESC environments. To create a new environment, visit https://www.pulumi.com/docs/esc/environments/ for more information.",
          "type": "string",
          "default": ""
        },
        "organization": {
          "description": "Organization are a space to collaborate on shared projects and stacks. To create a new organization, visit https://app.pulumi.com/ and click \"New Organization\".",
          "type": "string",
          "default": ""
        },
        "project": {
          "description": "Project is the name of the Pulumi ESC project the environment belongs to.",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.PulumiProviderSecretRef": {
      "type": "object",
      "properties": {
        "secretRef": {
          "description": "SecretRef is a reference to a secret containing the Pulumi API token.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.ScalewayProvider": {
      "type": "object",
      "required": [
        "region",
        "projectId",
        "accessKey",
        "secretKey"
      ],
      "properties": {
        "accessKey": {
          "description": "AccessKey is the non-secret part of the api key.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.ScalewayProviderSecretRef"
        },
        "apiUrl": {
          "description": "APIURL is the url of the api to use. Defaults to https://api.scaleway.com",
          "type": "string"
        },
        "projectId": {
          "description": "ProjectID is the id of your project, which you can find in the console: https://console.scaleway.com/project/settings",
          "type": "string",
          "default": ""
        },
        "region": {
          "description": "Region where your secrets are located: https://developers.scaleway.com/en/quickstart/#region-and-zone",
          "type": "string",
          "default": ""
        },
        "secretKey": {
          "description": "SecretKey is the non-secret part of the api key.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.ScalewayProviderSecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.ScalewayProviderSecretRef": {
      "type": "object",
      "properties": {
        "secretRef": {
          "description": "SecretRef references a key in a secret that will be used as value.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "value": {
          "description": "Value can be specified directly to set a value without using a secret.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.SecretServerProvider": {
      "description": "See https://github.com/DelineaXPM/tss-sdk-go/blob/main/server/server.go.",
      "type": "object",
      "required": [
        "username",
        "password",
        "serverURL"
      ],
      "properties": {
        "password": {
          "description": "Password is the secret server account password.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.SecretServerProviderRef"
        },
        "serverURL": {
          "description": "ServerURL URL to your secret server installation",
          "type": "string",
          "default": ""
        },
        "username": {
          "description": "Username is the secret server account username.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.SecretServerProviderRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.SecretServerProviderRef": {
      "type": "object",
      "properties": {
        "secretRef": {
          "description": "SecretRef references a key in a secret that will be used as value.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "value": {
          "description": "Value can be specified directly to set a value without using a secret.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.SecretStore": {
      "description": "SecretStore represents a secure external location for storing secrets, which can be referenced as part of `storeRef` fields.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.SecretStoreSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.SecretStoreStatus"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.SecretStoreProvider": {
      "description": "SecretStoreProvider contains the provider-specific configuration.",
      "type": "object",
      "properties": {
        "akeyless": {
          "description": "Akeyless configures this store to sync secrets using Akeyless Vault provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.AkeylessProvider"
        },
        "alibaba": {
          "description": "Alibaba configures this store to sync secrets using Alibaba Cloud provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.AlibabaProvider"
        },
        "aws": {
          "description": "AWS configures this store to sync secrets using AWS Secret Manager provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.AWSProvider"
        },
        "azurekv": {
          "description": "AzureKV configures this store to sync secrets using Azure Key Vault provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.AzureKVProvider"
        },
        "beyondtrust": {
          "description": "Beyondtrust configures this store to sync secrets using Password Safe provider.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.BeyondtrustProvider"
        },
        "bitwardensecretsmanager": {
          "description": "BitwardenSecretsManager configures this store to sync secrets using BitwardenSecretsManager provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.BitwardenSecretsManagerProvider"
        },
        "chef": {
          "description": "Chef configures this store to sync secrets with chef server",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.ChefProvider"
        },
        "cloudrusm": {
          "description": "CloudruSM configures this store to sync secrets using the Cloud.ru Secret Manager provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.CloudruSMProvider"
        },
        "conjur": {
          "description": "Conjur configures this store to sync secrets using conjur provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.ConjurProvider"
        },
        "delinea": {
          "description": "Delinea DevOps Secrets Vault https://docs.delinea.com/online-help/products/devops-secrets-vault/current",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.DelineaProvider"
        },
        "device42": {
          "description": "Device42 configures this store to sync secrets using the Device42 provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.Device42Provider"
        },
        "doppler": {
          "description": "Doppler configures this store to sync secrets using the Doppler provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.DopplerProvider"
        },
        "fake": {
          "description": "Fake configures a store with static key/value pairs",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.FakeProvider"
        },
        "fortanix": {
          "description": "Fortanix configures this store to sync secrets using the Fortanix provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.FortanixProvider"
        },
        "gcpsm": {
          "description": "GCPSM configures this store to sync secrets using Google Cloud Platform Secret Manager provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.GCPSMProvider"
        },
        "github": {
          "description": "Github configures this store to push Github Action secrets using Github API provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.GithubProvider"
        },
        "gitlab": {
          "description": "GitLab configures this store to sync secrets using GitLab Variables provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.GitlabProvider"
        },
        "ibm": {
          "description": "IBM configures this store to sync secrets using IBM Cloud provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.IBMProvider"
        },
        "infisical": {
          "description": "Infisical configures this store to sync secrets using the Infisical provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.InfisicalProvider"
        },
        "keepersecurity": {
          "description": "KeeperSecurity configures this store to sync secrets using the KeeperSecurity provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.KeeperSecurityProvider"
        },
        "kubernetes": {
          "description": "Kubernetes configures this store to sync secrets using a Kubernetes cluster provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.KubernetesProvider"
        },
        "onboardbase": {
          "description": "Onboardbase configures this store to sync secrets using the Onboardbase provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.OnboardbaseProvider"
        },
        "onepassword": {
          "description": "OnePassword configures this store to sync secrets using the 1Password Cloud provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.OnePasswordProvider"
        },
        "oracle": {
          "description": "Oracle configures this store to sync secrets using Oracle Vault provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.OracleProvider"
        },
        "passbolt": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.PassboltProvider"
        },
        "passworddepot": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.PasswordDepotProvider"
        },
        "previder": {
          "description": "Previder configures this store to sync secrets using the Previder provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.PreviderProvider"
        },
        "pulumi": {
          "description": "Pulumi configures this store to sync secrets using the Pulumi provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.PulumiProvider"
        },
        "scaleway": {
          "description": "Scaleway",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.ScalewayProvider"
        },
        "secretserver": {
          "description": "SecretServer configures this store to sync secrets using SecretServer provider https://docs.delinea.com/online-help/secret-server/start.htm",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.SecretServerProvider"
        },
        "senhasegura": {
          "description": "Senhasegura configures this store to sync secrets using senhasegura provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.SenhaseguraProvider"
        },
        "vault": {
          "description": "Vault configures this store to sync secrets using Hashi provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.VaultProvider"
        },
        "webhook": {
          "description": "Webhook configures this store to sync secrets using a generic templated webhook",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.WebhookProvider"
        },
        "yandexcertificatemanager": {
          "description": "YandexCertificateManager configures this store to sync secrets using Yandex Certificate Manager provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.YandexCertificateManagerProvider"
        },
        "yandexlockbox": {
          "description": "YandexLockbox configures this store to sync secrets using Yandex Lockbox provider",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.YandexLockboxProvider"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.SecretStoreRef": {
      "description": "SecretStoreRef defines which SecretStore to fetch the ExternalSecret data.",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Kind of the SecretStore resource (SecretStore or ClusterSecretStore) Defaults to `SecretStore`",
          "type": "string"
        },
        "name": {
          "description": "Name of the SecretStore resource",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.SecretStoreRetrySettings": {
      "type": "object",
      "properties": {
        "maxRetries": {
          "type": "integer",
          "format": "int32"
        },
        "retryInterval": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.SecretStoreSpec": {
      "description": "SecretStoreSpec defines the desired state of SecretStore.",
      "type": "object",
      "required": [
        "provider"
      ],
      "properties": {
        "conditions": {
          "description": "Used to constraint a ClusterSecretStore to specific namespaces. Relevant only to ClusterSecretStore",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.ClusterSecretStoreCondition"
          }
        },
        "controller": {
          "description": "Used to select the correct ESO controller (think: ingress.ingressClassName) The ESO controller is instantiated with a specific controller name and filters ES based on this property",
          "type": "string"
        },
        "provider": {
          "description": "Used to configure the provider. Only one provider may be set",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.SecretStoreProvider"
        },
        "refreshInterval": {
          "description": "Used to configure store refresh interval in seconds. Empty or 0 will default to the controller config.",
          "type": "integer",
          "format": "int32"
        },
        "retrySettings": {
          "description": "Used to configure http retries if failed",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.SecretStoreRetrySettings"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.SecretStoreStatus": {
      "description": "SecretStoreStatus defines the observed state of the SecretStore.",
      "type": "object",
      "properties": {
        "capabilities": {
          "type": "string"
        },
        "conditions": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.SecretStoreStatusCondition"
          }
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.SecretStoreStatusCondition": {
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "default": ""
        },
        "type": {
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.SecretsManager": {
      "description": "SecretsManager defines how the provider behaves when interacting with AWS SecretsManager. Some of these settings are only applicable to controlling how secrets are deleted, and hence only apply to PushSecret (and only when deletionPolicy is set to Delete).",
      "type": "object",
      "properties": {
        "forceDeleteWithoutRecovery": {
          "description": "Specifies whether to delete the secret without any recovery window. You can't use both this parameter and RecoveryWindowInDays in the same call. If you don't use either, then by default Secrets Manager uses a 30 day recovery window. see: https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_DeleteSecret.html#SecretsManager-DeleteSecret-request-ForceDeleteWithoutRecovery",
          "type": "boolean"
        },
        "recoveryWindowInDays": {
          "description": "The number of days from 7 to 30 that Secrets Manager waits before permanently deleting the secret. You can't use both this parameter and ForceDeleteWithoutRecovery in the same call. If you don't use either, then by default Secrets Manager uses a 30 day recovery window. see: https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_DeleteSecret.html#SecretsManager-DeleteSecret-request-RecoveryWindowInDays",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.SenhaseguraAuth": {
      "description": "SenhaseguraAuth tells the controller how to do auth in senhasegura.",
      "type": "object",
      "required": [
        "clientId",
        "clientSecretSecretRef"
      ],
      "properties": {
        "clientId": {
          "type": "string",
          "default": ""
        },
        "clientSecretSecretRef": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.SenhaseguraProvider": {
      "description": "SenhaseguraProvider setup a store to sync secrets with senhasegura.",
      "type": "object",
      "required": [
        "url",
        "module",
        "auth"
      ],
      "properties": {
        "auth": {
          "description": "Auth defines parameters to authenticate in senhasegura",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.SenhaseguraAuth"
        },
        "ignoreSslCertificate": {
          "description": "IgnoreSslCertificate defines if SSL certificate must be ignored",
          "type": "boolean"
        },
        "module": {
          "description": "Module defines which senhasegura module should be used to get secrets",
          "type": "string",
          "default": ""
        },
        "url": {
          "description": "URL of senhasegura",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.StoreGeneratorSourceRef": {
      "description": "StoreGeneratorSourceRef allows you to override the source from which the secret will be pulled from. You can define at maximum one property.",
      "type": "object",
      "properties": {
        "generatorRef": {
          "description": "GeneratorRef points to a generator custom resource.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.GeneratorRef"
        },
        "storeRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.SecretStoreRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.StoreSourceRef": {
      "description": "StoreSourceRef allows you to override the SecretStore source from which the secret will be pulled from. You can define at maximum one property.",
      "type": "object",
      "properties": {
        "generatorRef": {
          "description": "GeneratorRef points to a generator custom resource.\n\nDeprecated: The generatorRef is not implemented in .data[]. this will be removed with v1.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.GeneratorRef"
        },
        "storeRef": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.SecretStoreRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.Tag": {
      "type": "object",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string",
          "default": ""
        },
        "value": {
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.TemplateFrom": {
      "type": "object",
      "properties": {
        "configMap": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.TemplateRef"
        },
        "literal": {
          "type": "string"
        },
        "secret": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.TemplateRef"
        },
        "target": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.TemplateRef": {
      "type": "object",
      "required": [
        "name",
        "items"
      ],
      "properties": {
        "items": {
          "description": "A list of keys in the ConfigMap/Secret to use as templates for Secret data",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.TemplateRefItem"
          }
        },
        "name": {
          "description": "The name of the ConfigMap/Secret resource",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.TemplateRefItem": {
      "type": "object",
      "required": [
        "key"
      ],
      "properties": {
        "key": {
          "description": "A key in the ConfigMap/Secret",
          "type": "string",
          "default": ""
        },
        "templateAs": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.TokenAuth": {
      "type": "object",
      "properties": {
        "bearerToken": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.UniversalAuthCredentials": {
      "type": "object",
      "required": [
        "clientId",
        "clientSecret"
      ],
      "properties": {
        "clientId": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "clientSecret": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.VaultAppRole": {
      "description": "VaultAppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.",
      "type": "object",
      "required": [
        "path",
        "secretRef"
      ],
      "properties": {
        "path": {
          "description": "Path where the App Role authentication backend is mounted in Vault, e.g: \"approle\"",
          "type": "string",
          "default": ""
        },
        "roleId": {
          "description": "RoleID configured in the App Role authentication backend when setting up the authentication backend in Vault.",
          "type": "string"
        },
        "roleRef": {
          "description": "Reference to a key in a Secret that contains the App Role ID used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role id.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "secretRef": {
          "description": "Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.VaultAuth": {
      "description": "VaultAuth is the configuration used to authenticate with a Vault server. Only one of `tokenSecretRef`, `appRole`,  `kubernetes`, `ldap`, `userPass`, `jwt` or `cert` can be specified. A namespace to authenticate against can optionally be specified.",
      "type": "object",
      "properties": {
        "appRole": {
          "description": "AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.VaultAppRole"
        },
        "cert": {
          "description": "Cert authenticates with TLS Certificates by passing client certificate, private key and ca certificate Cert authentication method",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.VaultCertAuth"
        },
        "iam": {
          "description": "Iam authenticates with vault by passing a special AWS request signed with AWS IAM credentials AWS IAM authentication method",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.VaultIamAuth"
        },
        "jwt": {
          "description": "Jwt authenticates with Vault by passing role and JWT token using the JWT/OIDC authentication method",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.VaultJwtAuth"
        },
        "kubernetes": {
          "description": "Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.VaultKubernetesAuth"
        },
        "ldap": {
          "description": "Ldap authenticates with Vault by passing username/password pair using the LDAP authentication method",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.VaultLdapAuth"
        },
        "namespace": {
          "description": "Name of the vault namespace to authenticate to. This can be different than the namespace your secret is in. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: \"ns1\". More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces This will default to Vault.Namespace field if set, or empty otherwise",
          "type": "string"
        },
        "tokenSecretRef": {
          "description": "TokenSecretRef authenticates with Vault by presenting a token.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "userPass": {
          "description": "UserPass authenticates with Vault by passing username/password pair",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.VaultUserPassAuth"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.VaultAwsAuthSecretRef": {
      "description": "VaultAWSAuthSecretRef holds secret references for AWS credentials both AccessKeyID and SecretAccessKey must be defined in order to properly authenticate.",
      "type": "object",
      "properties": {
        "accessKeyIDSecretRef": {
          "description": "The AccessKeyID is used for authentication",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "secretAccessKeySecretRef": {
          "description": "The SecretAccessKey is used for authentication",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "sessionTokenSecretRef": {
          "description": "The SessionToken used for authentication This must be defined if AccessKeyID and SecretAccessKey are temporary credentials see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.VaultAwsJWTAuth": {
      "description": "VaultAwsJWTAuth Authenticate against AWS using service account tokens.",
      "type": "object",
      "properties": {
        "serviceAccountRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.VaultCertAuth": {
      "description": "VaultCertAuth authenticates with Vault using the JWT/OIDC authentication method, with the role name and token stored in a Kubernetes Secret resource.",
      "type": "object",
      "properties": {
        "clientCert": {
          "description": "ClientCert is a certificate to authenticate using the Cert Vault authentication method",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "secretRef": {
          "description": "SecretRef to a key in a Secret resource containing client private key to authenticate with Vault using the Cert authentication method",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.VaultClientTLS": {
      "description": "VaultClientTLS is the configuration used for client side related TLS communication, when the Vault server requires mutual authentication.",
      "type": "object",
      "properties": {
        "certSecretRef": {
          "description": "CertSecretRef is a certificate added to the transport layer when communicating with the Vault server. If no key for the Secret is specified, external-secret will default to 'tls.crt'.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "keySecretRef": {
          "description": "KeySecretRef to a key in a Secret resource containing client private key added to the transport layer when communicating with the Vault server. If no key for the Secret is specified, external-secret will default to 'tls.key'.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.VaultIamAuth": {
      "description": "VaultIamAuth authenticates with Vault using the Vault's AWS IAM authentication method. Refer: https://developer.hashicorp.com/vault/docs/auth/aws",
      "type": "object",
      "required": [
        "vaultRole"
      ],
      "properties": {
        "externalID": {
          "description": "AWS External ID set on assumed IAM roles",
          "type": "string"
        },
        "jwt": {
          "description": "Specify a service account with IRSA enabled",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.VaultAwsJWTAuth"
        },
        "path": {
          "description": "Path where the AWS auth method is enabled in Vault, e.g: \"aws\"",
          "type": "string"
        },
        "region": {
          "description": "AWS region",
          "type": "string"
        },
        "role": {
          "description": "This is the AWS role to be assumed before talking to vault",
          "type": "string"
        },
        "secretRef": {
          "description": "Specify credentials in a Secret object",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.VaultAwsAuthSecretRef"
        },
        "vaultAwsIamServerID": {
          "description": "X-Vault-AWS-IAM-Server-ID is an additional header used by Vault IAM auth method to mitigate against different types of replay attacks. More details here: https://developer.hashicorp.com/vault/docs/auth/aws",
          "type": "string"
        },
        "vaultRole": {
          "description": "Vault Role. In vault, a role describes an identity with a set of permissions, groups, or policies you want to attach a user of the secrets engine",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.VaultJwtAuth": {
      "description": "VaultJwtAuth authenticates with Vault using the JWT/OIDC authentication method, with the role name and a token stored in a Kubernetes Secret resource or a Kubernetes service account token retrieved via `TokenRequest`.",
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "kubernetesServiceAccountToken": {
          "description": "Optional ServiceAccountToken specifies the Kubernetes service account for which to request a token for with the `TokenRequest` API.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.VaultKubernetesServiceAccountTokenAuth"
        },
        "path": {
          "description": "Path where the JWT authentication backend is mounted in Vault, e.g: \"jwt\"",
          "type": "string",
          "default": ""
        },
        "role": {
          "description": "Role is a JWT role to authenticate using the JWT/OIDC Vault authentication method",
          "type": "string"
        },
        "secretRef": {
          "description": "Optional SecretRef that refers to a key in a Secret resource containing JWT token to authenticate with Vault using the JWT/OIDC authentication method.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.VaultKubernetesAuth": {
      "description": "Authenticate against Vault using a Kubernetes ServiceAccount token stored in a Secret.",
      "type": "object",
      "required": [
        "mountPath",
        "role"
      ],
      "properties": {
        "mountPath": {
          "description": "Path where the Kubernetes authentication backend is mounted in Vault, e.g: \"kubernetes\"",
          "type": "string",
          "default": ""
        },
        "role": {
          "description": "A required field containing the Vault Role to assume. A Role binds a Kubernetes ServiceAccount with a set of Vault policies.",
          "type": "string",
          "default": ""
        },
        "secretRef": {
          "description": "Optional secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. If a name is specified without a key, `token` is the default. If one is not specified, the one bound to the controller will be used.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "serviceAccountRef": {
          "description": "Optional service account field containing the name of a kubernetes ServiceAccount. If the service account is specified, the service account secret token JWT will be used for authenticating with Vault. If the service account selector is not supplied, the secretRef will be used instead.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.VaultKubernetesServiceAccountTokenAuth": {
      "description": "VaultKubernetesServiceAccountTokenAuth authenticates with Vault using a temporary Kubernetes service account token retrieved by the `TokenRequest` API.",
      "type": "object",
      "required": [
        "serviceAccountRef"
      ],
      "properties": {
        "audiences": {
          "description": "Optional audiences field that will be used to request a temporary Kubernetes service account token for the service account referenced by `serviceAccountRef`. Defaults to a single audience `vault` it not specified. Deprecated: use serviceAccountRef.Audiences instead",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "expirationSeconds": {
          "description": "Optional expiration time in seconds that will be used to request a temporary Kubernetes service account token for the service account referenced by `serviceAccountRef`. Deprecated: this will be removed in the future. Defaults to 10 minutes.",
          "type": "integer",
          "format": "int64"
        },
        "serviceAccountRef": {
          "description": "Service account field containing the name of a kubernetes ServiceAccount.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.VaultLdapAuth": {
      "description": "VaultLdapAuth authenticates with Vault using the LDAP authentication method, with the username and password stored in a Kubernetes Secret resource.",
      "type": "object",
      "required": [
        "path",
        "username"
      ],
      "properties": {
        "path": {
          "description": "Path where the LDAP authentication backend is mounted in Vault, e.g: \"ldap\"",
          "type": "string",
          "default": ""
        },
        "secretRef": {
          "description": "SecretRef to a key in a Secret resource containing password for the LDAP user used to authenticate with Vault using the LDAP authentication method",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "username": {
          "description": "Username is an LDAP username used to authenticate using the LDAP Vault authentication method",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.VaultProvider": {
      "description": "Configures an store to sync secrets using a HashiCorp Vault KV backend.",
      "type": "object",
      "required": [
        "server",
        "version"
      ],
      "properties": {
        "auth": {
          "description": "Auth configures how secret-manager authenticates with the Vault server.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.VaultAuth"
        },
        "caBundle": {
          "description": "PEM encoded CA bundle used to validate Vault server certificate. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. If not set the system root certificates are used to validate the TLS connection.",
          "type": "string",
          "format": "byte"
        },
        "caProvider": {
          "description": "The provider for the CA bundle to use to validate Vault server certificate.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.CAProvider"
        },
        "forwardInconsistent": {
          "description": "ForwardInconsistent tells Vault to forward read-after-write requests to the Vault leader instead of simply retrying within a loop. This can increase performance if the option is enabled serverside. https://www.vaultproject.io/docs/configuration/replication#allow_forwarding_via_header",
          "type": "boolean"
        },
        "headers": {
          "description": "Headers to be added in Vault request",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "namespace": {
          "description": "Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: \"ns1\". More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces",
          "type": "string"
        },
        "path": {
          "description": "Path is the mount path of the Vault KV backend endpoint, e.g: \"secret\". The v2 KV secret engine version specific \"/data\" path suffix for fetching secrets from Vault is optional and will be appended if not present in specified path.",
          "type": "string"
        },
        "readYourWrites": {
          "description": "ReadYourWrites ensures isolated read-after-write semantics by providing discovered cluster replication states in each request. More information about eventual consistency in Vault can be found here https://www.vaultproject.io/docs/enterprise/consistency",
          "type": "boolean"
        },
        "server": {
          "description": "Server is the connection address for the Vault server, e.g: \"https://vault.example.com:8200\".",
          "type": "string",
          "default": ""
        },
        "tls": {
          "description": "The configuration used for client side related TLS communication, when the Vault server requires mutual authentication. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. It's worth noting this configuration is different from the \"TLS certificates auth method\", which is available under the `auth.cert` section.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.VaultClientTLS"
        },
        "version": {
          "description": "Version is the Vault KV secret engine version. This can be either \"v1\" or \"v2\". Version defaults to \"v2\".",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.VaultUserPassAuth": {
      "description": "VaultUserPassAuth authenticates with Vault using UserPass authentication method, with the username and password stored in a Kubernetes Secret resource.",
      "type": "object",
      "required": [
        "path",
        "username"
      ],
      "properties": {
        "path": {
          "description": "Path where the UserPassword authentication backend is mounted in Vault, e.g: \"userpass\"",
          "type": "string",
          "default": ""
        },
        "secretRef": {
          "description": "SecretRef to a key in a Secret resource containing password for the user used to authenticate with Vault using the UserPass authentication method",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "username": {
          "description": "Username is a username used to authenticate using the UserPass Vault authentication method",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.WebhookCAProvider": {
      "description": "Defines a location to fetch the cert for the webhook provider from.",
      "type": "object",
      "required": [
        "type",
        "name"
      ],
      "properties": {
        "key": {
          "description": "The key where the CA certificate can be found in the Secret or ConfigMap.",
          "type": "string"
        },
        "name": {
          "description": "The name of the object located at the provider type.",
          "type": "string",
          "default": ""
        },
        "namespace": {
          "description": "The namespace the Provider type is in.",
          "type": "string"
        },
        "type": {
          "description": "The type of provider to use such as \"Secret\", or \"ConfigMap\".",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.WebhookProvider": {
      "description": "WebHookProvider Configures an store to sync secrets from simple web apis.",
      "type": "object",
      "required": [
        "url",
        "result"
      ],
      "properties": {
        "auth": {
          "description": "Auth specifies a authorization protocol. Only one protocol may be set.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.AuthorizationProtocol"
        },
        "body": {
          "description": "Body",
          "type": "string"
        },
        "caBundle": {
          "description": "PEM encoded CA bundle used to validate webhook server certificate. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. If not set the system root certificates are used to validate the TLS connection.",
          "type": "string",
          "format": "byte"
        },
        "caProvider": {
          "description": "The provider for the CA bundle to use to validate webhook server certificate.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.WebhookCAProvider"
        },
        "headers": {
          "description": "Headers",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "method": {
          "description": "Webhook Method",
          "type": "string"
        },
        "result": {
          "description": "Result formatting",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.WebhookResult"
        },
        "secrets": {
          "description": "Secrets to fill in templates These secrets will be passed to the templating function as key value pairs under the given name",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.WebhookSecret"
          }
        },
        "timeout": {
          "description": "Timeout",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Duration"
        },
        "url": {
          "description": "Webhook url to call",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.WebhookResult": {
      "type": "object",
      "properties": {
        "jsonPath": {
          "description": "Json path of return value",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.WebhookSecret": {
      "type": "object",
      "required": [
        "name",
        "secretRef"
      ],
      "properties": {
        "name": {
          "description": "Name of this secret in templates",
          "type": "string",
          "default": ""
        },
        "secretRef": {
          "description": "Secret ref to fill in credentials",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.YandexCertificateManagerAuth": {
      "type": "object",
      "properties": {
        "authorizedKeySecretRef": {
          "description": "The authorized key used for authentication",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.YandexCertificateManagerCAProvider": {
      "type": "object",
      "properties": {
        "certSecretRef": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.YandexCertificateManagerProvider": {
      "description": "YandexCertificateManagerProvider Configures a store to sync secrets using the Yandex Certificate Manager provider.",
      "type": "object",
      "required": [
        "auth"
      ],
      "properties": {
        "apiEndpoint": {
          "description": "Yandex.Cloud API endpoint (e.g. 'api.cloud.yandex.net:443')",
          "type": "string"
        },
        "auth": {
          "description": "Auth defines the information necessary to authenticate against Yandex Certificate Manager",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.YandexCertificateManagerAuth"
        },
        "caProvider": {
          "description": "The provider for the CA bundle to use to validate Yandex.Cloud server certificate.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.YandexCertificateManagerCAProvider"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.YandexLockboxAuth": {
      "type": "object",
      "properties": {
        "authorizedKeySecretRef": {
          "description": "The authorized key used for authentication",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.YandexLockboxCAProvider": {
      "type": "object",
      "properties": {
        "certSecretRef": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.externalsecrets.v1beta1.YandexLockboxProvider": {
      "description": "YandexLockboxProvider Configures a store to sync secrets using the Yandex Lockbox provider.",
      "type": "object",
      "required": [
        "auth"
      ],
      "properties": {
        "apiEndpoint": {
          "description": "Yandex.Cloud API endpoint (e.g. 'api.cloud.yandex.net:443')",
          "type": "string"
        },
        "auth": {
          "description": "Auth defines the information necessary to authenticate against Yandex Lockbox",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.YandexLockboxAuth"
        },
        "caProvider": {
          "description": "The provider for the CA bundle to use to validate Yandex.Cloud server certificate.",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1beta1.YandexLockboxCAProvider"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.ACRAccessToken": {
      "description": "ACRAccessToken returns an Azure Container Registry token that can be used for pushing/pulling images. Note: by default it will return an ACR Refresh Token with full access (depending on the identity). This can be scoped down to the repository level using .spec.scope. In case scope is defined it will return an ACR Access Token.\n\nSee docs: https://github.com/Azure/acr/blob/main/docs/AAD-OAuth.md",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.ACRAccessTokenSpec"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.ACRAccessTokenSpec": {
      "description": "ACRAccessTokenSpec defines how to generate the access token e.g. how to authenticate and which registry to use. see: https://github.com/Azure/acr/blob/main/docs/AAD-OAuth.md#overview",
      "type": "object",
      "required": [
        "auth",
        "registry"
      ],
      "properties": {
        "auth": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.ACRAuth"
        },
        "environmentType": {
          "description": "EnvironmentType specifies the Azure cloud environment endpoints to use for connecting and authenticating with Azure. By default it points to the public cloud AAD endpoint. The following endpoints are available, also see here: https://github.com/Azure/go-autorest/blob/main/autorest/azure/environments.go#L152 PublicCloud, USGovernmentCloud, ChinaCloud, GermanCloud",
          "type": "string"
        },
        "registry": {
          "description": "the domain name of the ACR registry e.g. foobarexample.azurecr.io",
          "type": "string",
          "default": ""
        },
        "scope": {
          "description": "Define the scope for the access token, e.g. pull/push access for a repository. if not provided it will return a refresh token that has full scope. Note: you need to pin it down to the repository level, there is no wildcard available.\n\nexamples: repository:my-repository:pull,push repository:my-repository:pull\n\nsee docs for details: https://docs.docker.com/registry/spec/auth/scope/",
          "type": "string"
        },
        "tenantId": {
          "description": "TenantID configures the Azure Tenant to send requests to. Required for ServicePrincipal auth type.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.ACRAuth": {
      "type": "object",
      "properties": {
        "managedIdentity": {
          "description": "ManagedIdentity uses Azure Managed Identity to authenticate with Azure.",
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.AzureACRManagedIdentityAuth"
        },
        "servicePrincipal": {
          "description": "ServicePrincipal uses Azure Service Principal credentials to authenticate with Azure.",
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.AzureACRServicePrincipalAuth"
        },
        "workloadIdentity": {
          "description": "WorkloadIdentity uses Azure Workload Identity to authenticate with Azure.",
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.AzureACRWorkloadIdentityAuth"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.AWSAuth": {
      "description": "AWSAuth tells the controller how to do authentication with aws. Only one of secretRef or jwt can be specified. if none is specified the controller will load credentials using the aws sdk defaults.",
      "type": "object",
      "properties": {
        "jwt": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.AWSJWTAuth"
        },
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.AWSAuthSecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.AWSAuthSecretRef": {
      "description": "AWSAuthSecretRef holds secret references for AWS credentials both AccessKeyID and SecretAccessKey must be defined in order to properly authenticate.",
      "type": "object",
      "properties": {
        "accessKeyIDSecretRef": {
          "description": "The AccessKeyID is used for authentication",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "secretAccessKeySecretRef": {
          "description": "The SecretAccessKey is used for authentication",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "sessionTokenSecretRef": {
          "description": "The SessionToken used for authentication This must be defined if AccessKeyID and SecretAccessKey are temporary credentials see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.AWSJWTAuth": {
      "description": "Authenticate against AWS using service account tokens.",
      "type": "object",
      "properties": {
        "serviceAccountRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.AuthorizationProtocol": {
      "description": "AuthorizationProtocol contains the protocol-specific configuration",
      "type": "object",
      "properties": {
        "ntlm": {
          "description": "NTLMProtocol configures the store to use NTLM for auth",
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.NTLMProtocol"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.AzureACRManagedIdentityAuth": {
      "type": "object",
      "properties": {
        "identityId": {
          "description": "If multiple Managed Identity is assigned to the pod, you can select the one to be used",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.AzureACRServicePrincipalAuth": {
      "type": "object",
      "required": [
        "secretRef"
      ],
      "properties": {
        "secretRef": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.AzureACRServicePrincipalAuthSecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.AzureACRServicePrincipalAuthSecretRef": {
      "description": "Configuration used to authenticate with Azure using static credentials stored in a Kind=Secret.",
      "type": "object",
      "properties": {
        "clientId": {
          "description": "The Azure clientId of the service principle used for authentication.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "clientSecret": {
          "description": "The Azure ClientSecret of the service principle used for authentication.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.AzureACRWorkloadIdentityAuth": {
      "type": "object",
      "properties": {
        "serviceAccountRef": {
          "description": "ServiceAccountRef specified the service account that should be used when authenticating with WorkloadIdentity.",
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.ClusterGenerator": {
      "description": "ClusterGenerator represents a cluster-wide generator which can be referenced as part of `generatorRef` fields.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.ClusterGeneratorSpec"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.ClusterGeneratorSpec": {
      "type": "object",
      "required": [
        "kind",
        "generator"
      ],
      "properties": {
        "generator": {
          "description": "Generator the spec for this generator, must match the kind.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.GeneratorSpec"
        },
        "kind": {
          "description": "Kind the kind of this generator.",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.ECRAuthorizationToken": {
      "description": "ECRAuthorizationTokenSpec uses the GetAuthorizationToken API to retrieve an authorization token. The authorization token is valid for 12 hours. The authorizationToken returned is a base64 encoded string that can be decoded and used in a docker login command to authenticate to a registry. For more information, see Registry authentication (https://docs.aws.amazon.com/AmazonECR/latest/userguide/Registries.html#registry_auth) in the Amazon Elastic Container Registry User Guide.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.ECRAuthorizationTokenSpec"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.ECRAuthorizationTokenSpec": {
      "type": "object",
      "required": [
        "region"
      ],
      "properties": {
        "auth": {
          "description": "Auth defines how to authenticate with AWS",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.AWSAuth"
        },
        "region": {
          "description": "Region specifies the region to operate in.",
          "type": "string",
          "default": ""
        },
        "role": {
          "description": "You can assume a role before making calls to the desired AWS service.",
          "type": "string"
        },
        "scope": {
          "description": "Scope specifies the ECR service scope. Valid options are private and public.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.Fake": {
      "description": "Fake generator is used for testing. It lets you define a static set of credentials that is always returned.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.FakeSpec"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.FakeSpec": {
      "description": "FakeSpec contains the static data.",
      "type": "object",
      "properties": {
        "controller": {
          "description": "Used to select the correct ESO controller (think: ingress.ingressClassName) The ESO controller is instantiated with a specific controller name and filters VDS based on this property",
          "type": "string"
        },
        "data": {
          "description": "Data defines the static data returned by this generator.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.GCPSMAuth": {
      "type": "object",
      "properties": {
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.GCPSMAuthSecretRef"
        },
        "workloadIdentity": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.GCPWorkloadIdentity"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.GCPSMAuthSecretRef": {
      "type": "object",
      "properties": {
        "secretAccessKeySecretRef": {
          "description": "The SecretAccessKey is used for authentication",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.GCPWorkloadIdentity": {
      "type": "object",
      "required": [
        "serviceAccountRef",
        "clusterLocation",
        "clusterName"
      ],
      "properties": {
        "clusterLocation": {
          "type": "string",
          "default": ""
        },
        "clusterName": {
          "type": "string",
          "default": ""
        },
        "clusterProjectID": {
          "type": "string"
        },
        "serviceAccountRef": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.GCRAccessToken": {
      "description": "GCRAccessToken generates an GCP access token that can be used to authenticate with GCR.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.GCRAccessTokenSpec"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.GCRAccessTokenSpec": {
      "type": "object",
      "required": [
        "auth",
        "projectID"
      ],
      "properties": {
        "auth": {
          "description": "Auth defines the means for authenticating with GCP",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.GCPSMAuth"
        },
        "projectID": {
          "description": "ProjectID defines which project to use to authenticate with",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.GeneratorSpec": {
      "type": "object",
      "properties": {
        "acrAccessTokenSpec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.ACRAccessTokenSpec"
        },
        "ecrAuthorizationTokenSpec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.ECRAuthorizationTokenSpec"
        },
        "fakeSpec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.FakeSpec"
        },
        "gcrAccessTokenSpec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.GCRAccessTokenSpec"
        },
        "githubAccessTokenSpec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.GithubAccessTokenSpec"
        },
        "grafanaSpec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.GrafanaSpec"
        },
        "mfaSpec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.MFASpec"
        },
        "passwordSpec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.PasswordSpec"
        },
        "quayAccessTokenSpec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.QuayAccessTokenSpec"
        },
        "stsSessionTokenSpec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.STSSessionTokenSpec"
        },
        "uuidSpec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.UUIDSpec"
        },
        "vaultDynamicSecretSpec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.VaultDynamicSecretSpec"
        },
        "webhookSpec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.WebhookSpec"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.GithubAccessToken": {
      "description": "GithubAccessToken generates ghs_ accessToken",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.GithubAccessTokenSpec"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.GithubAccessTokenSpec": {
      "type": "object",
      "required": [
        "appID",
        "installID",
        "auth"
      ],
      "properties": {
        "appID": {
          "type": "string",
          "default": ""
        },
        "auth": {
          "description": "Auth configures how ESO authenticates with a Github instance.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.GithubAuth"
        },
        "installID": {
          "type": "string",
          "default": ""
        },
        "permissions": {
          "description": "Map of permissions the token will have. If omitted, defaults to all permissions the GitHub App has.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "repositories": {
          "description": "List of repositories the token will have access to. If omitted, defaults to all repositories the GitHub App is installed to.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "url": {
          "description": "URL configures the Github instance URL. Defaults to https://github.com/.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.GithubAuth": {
      "type": "object",
      "required": [
        "privateKey"
      ],
      "properties": {
        "privateKey": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.GithubSecretRef"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.GithubSecretRef": {
      "type": "object",
      "required": [
        "secretRef"
      ],
      "properties": {
        "secretRef": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.Grafana": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.GrafanaSpec"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.GrafanaAuth": {
      "type": "object",
      "properties": {
        "basic": {
          "description": "Basic auth credentials used to authenticate against the Grafana instance. Note: you need a token which has elevated permissions to create service accounts. See here for the documentation on basic roles offered by Grafana: https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/",
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.GrafanaBasicAuth"
        },
        "token": {
          "description": "A service account token used to authenticate against the Grafana instance. Note: you need a token which has elevated permissions to create service accounts. See here for the documentation on basic roles offered by Grafana: https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/",
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.GrafanaBasicAuth": {
      "type": "object",
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "password": {
          "description": "A basic auth password used to authenticate against the Grafana instance.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.SecretKeySelector"
        },
        "username": {
          "description": "A basic auth username used to authenticate against the Grafana instance.",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.GrafanaServiceAccount": {
      "type": "object",
      "required": [
        "name",
        "role"
      ],
      "properties": {
        "name": {
          "description": "Name is the name of the service account that will be created by ESO.",
          "type": "string",
          "default": ""
        },
        "role": {
          "description": "Role is the role of the service account. See here for the documentation on basic roles offered by Grafana: https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.GrafanaSpec": {
      "description": "GrafanaSpec controls the behavior of the grafana generator.",
      "type": "object",
      "required": [
        "url",
        "auth",
        "serviceAccount"
      ],
      "properties": {
        "auth": {
          "description": "Auth is the authentication configuration to authenticate against the Grafana instance.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.GrafanaAuth"
        },
        "serviceAccount": {
          "description": "ServiceAccount is the configuration for the service account that is supposed to be generated by the generator.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.GrafanaServiceAccount"
        },
        "url": {
          "description": "URL is the URL of the Grafana instance.",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.MFA": {
      "description": "MFA generates a new TOTP token that is compliant with RFC 6238.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.MFASpec"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.MFASpec": {
      "description": "MFASpec controls the behavior of the mfa generator.",
      "type": "object",
      "required": [
        "secret"
      ],
      "properties": {
        "algorithm": {
          "description": "Algorithm to use for encoding. Defaults to SHA1 as per the RFC.",
          "type": "string"
        },
        "length": {
          "description": "Length defines the token length. Defaults to 6 characters.",
          "type": "integer",
          "format": "int32"
        },
        "secret": {
          "description": "Secret is a secret selector to a secret containing the seed secret to generate the TOTP value from.",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "timePeriod": {
          "description": "TimePeriod defines how long the token can be active. Defaults to 30 seconds.",
          "type": "integer",
          "format": "int32"
        },
        "when": {
          "description": "When defines a time parameter that can be used to pin the origin time of the generated token.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.NTLMProtocol": {
      "description": "NTLMProtocol contains the NTLM-specific configuration.",
      "type": "object",
      "required": [
        "usernameSecret",
        "passwordSecret"
      ],
      "properties": {
        "passwordSecret": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "usernameSecret": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.Password": {
      "description": "Password generates a random password based on the configuration parameters in spec. You can specify the length, characterset and other attributes.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.PasswordSpec"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.PasswordSpec": {
      "description": "PasswordSpec controls the behavior of the password generator.",
      "type": "object",
      "required": [
        "length",
        "noUpper",
        "allowRepeat"
      ],
      "properties": {
        "allowRepeat": {
          "description": "set AllowRepeat to true to allow repeating characters.",
          "type": "boolean",
          "default": false
        },
        "digits": {
          "description": "Digits specifies the number of digits in the generated password. If omitted it defaults to 25% of the length of the password",
          "type": "integer",
          "format": "int32"
        },
        "length": {
          "description": "Length of the password to be generated. Defaults to 24",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "noUpper": {
          "description": "Set NoUpper to disable uppercase characters",
          "type": "boolean",
          "default": false
        },
        "symbolCharacters": {
          "description": "SymbolCharacters specifies the special characters that should be used in the generated password.",
          "type": "string"
        },
        "symbols": {
          "description": "Symbols specifies the number of symbol characters in the generated password. If omitted it defaults to 25% of the length of the password",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.QuayAccessToken": {
      "description": "QuayAccessToken generates Quay oauth token for pulling/pushing images",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.QuayAccessTokenSpec"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.QuayAccessTokenSpec": {
      "type": "object",
      "required": [
        "robotAccount",
        "serviceAccountRef"
      ],
      "properties": {
        "robotAccount": {
          "description": "Name of the robot account you are federating with",
          "type": "string",
          "default": ""
        },
        "serviceAccountRef": {
          "description": "Name of the service account you are federating with",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector"
        },
        "url": {
          "description": "URL configures the Quay instance URL. Defaults to quay.io.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.RequestParameters": {
      "description": "RequestParameters contains parameters that can be passed to the STS service.",
      "type": "object",
      "properties": {
        "serialNumber": {
          "description": "SerialNumber is the identification number of the MFA device that is associated with the IAM user who is making the GetSessionToken call. Possible values: hardware device (such as GAHT12345678) or an Amazon Resource Name (ARN) for a virtual device (such as arn:aws:iam::123456789012:mfa/user)",
          "type": "string"
        },
        "sessionDuration": {
          "type": "integer",
          "format": "int32"
        },
        "tokenCode": {
          "description": "TokenCode is the value provided by the MFA device, if MFA is required.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.STSSessionToken": {
      "description": "STSSessionToken uses the GetSessionToken API to retrieve an authorization token. The authorization token is valid for 12 hours. The authorizationToken returned is a base64 encoded string that can be decoded. For more information, see GetSessionToken (https://docs.aws.amazon.com/STS/latest/APIReference/API_GetSessionToken.html).",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.STSSessionTokenSpec"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.STSSessionTokenSpec": {
      "type": "object",
      "required": [
        "region"
      ],
      "properties": {
        "auth": {
          "description": "Auth defines how to authenticate with AWS",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.AWSAuth"
        },
        "region": {
          "description": "Region specifies the region to operate in.",
          "type": "string",
          "default": ""
        },
        "requestParameters": {
          "description": "RequestParameters contains parameters that can be passed to the STS service.",
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.RequestParameters"
        },
        "role": {
          "description": "You can assume a role before making calls to the desired AWS service.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.SecretKeySelector": {
      "type": "object",
      "properties": {
        "key": {
          "description": "The key where the token is found.",
          "type": "string"
        },
        "name": {
          "description": "The name of the Secret resource being referred to.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.UUID": {
      "description": "UUID generates a version 1 UUID (e56657e3-764f-11ef-a397-65231a88c216).",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.UUIDSpec"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.UUIDSpec": {
      "description": "UUIDSpec controls the behavior of the uuid generator.",
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.VaultDynamicSecret": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.VaultDynamicSecretSpec"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.VaultDynamicSecretSpec": {
      "type": "object",
      "required": [
        "provider",
        "path"
      ],
      "properties": {
        "allowEmptyResponse": {
          "description": "Do not fail if no secrets are found. Useful for requests where no data is expected.",
          "type": "boolean"
        },
        "controller": {
          "description": "Used to select the correct ESO controller (think: ingress.ingressClassName) The ESO controller is instantiated with a specific controller name and filters VDS based on this property",
          "type": "string"
        },
        "method": {
          "description": "Vault API method to use (GET/POST/other)",
          "type": "string"
        },
        "parameters": {
          "description": "Parameters to pass to Vault write (for non-GET methods)",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
        },
        "path": {
          "description": "Vault path to obtain the dynamic secret from",
          "type": "string",
          "default": ""
        },
        "provider": {
          "description": "Vault provider common spec",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.VaultProvider"
        },
        "resultType": {
          "description": "Result type defines which data is returned from the generator. By default it is the \"data\" section of the Vault API response. When using e.g. /auth/token/create the \"data\" section is empty but the \"auth\" section contains the generated token. Please refer to the vault docs regarding the result data structure. Additionally, accessing the raw response is possibly by using \"Raw\" result type.",
          "type": "string"
        },
        "retrySettings": {
          "description": "Used to configure http retries if failed",
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.SecretStoreRetrySettings"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.Webhook": {
      "description": "Webhook connects to a third party API server to handle the secrets generation configuration parameters in spec. You can specify the server, the token, and additional body parameters. See documentation for the full API specification for requests and responses.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.WebhookSpec"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.WebhookCAProvider": {
      "description": "Defines a location to fetch the cert for the webhook provider from.",
      "type": "object",
      "required": [
        "type",
        "name"
      ],
      "properties": {
        "key": {
          "description": "The key where the CA certificate can be found in the Secret or ConfigMap.",
          "type": "string"
        },
        "name": {
          "description": "The name of the object located at the provider type.",
          "type": "string",
          "default": ""
        },
        "namespace": {
          "description": "The namespace the Provider type is in.",
          "type": "string"
        },
        "type": {
          "description": "The type of provider to use such as \"Secret\", or \"ConfigMap\".",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.WebhookResult": {
      "type": "object",
      "properties": {
        "jsonPath": {
          "description": "Json path of return value",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.WebhookSecret": {
      "type": "object",
      "required": [
        "name",
        "secretRef"
      ],
      "properties": {
        "name": {
          "description": "Name of this secret in templates",
          "type": "string",
          "default": ""
        },
        "secretRef": {
          "description": "Secret ref to fill in credentials",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.generators.v1alpha1.WebhookSpec": {
      "description": "WebhookSpec controls the behavior of the external generator. Any body parameters should be passed to the server through the parameters field.",
      "type": "object",
      "required": [
        "url",
        "result"
      ],
      "properties": {
        "auth": {
          "description": "Auth specifies a authorization protocol. Only one protocol may be set.",
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.AuthorizationProtocol"
        },
        "body": {
          "description": "Body",
          "type": "string"
        },
        "caBundle": {
          "description": "PEM encoded CA bundle used to validate webhook server certificate. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. If not set the system root certificates are used to validate the TLS connection.",
          "type": "string",
          "format": "byte"
        },
        "caProvider": {
          "description": "The provider for the CA bundle to use to validate webhook server certificate.",
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.WebhookCAProvider"
        },
        "headers": {
          "description": "Headers",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "method": {
          "description": "Webhook Method",
          "type": "string"
        },
        "result": {
          "description": "Result formatting",
          "default": {},
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.WebhookResult"
        },
        "secrets": {
          "description": "Secrets to fill in templates These secrets will be passed to the templating function as key value pairs under the given name",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.WebhookSecret"
          }
        },
        "timeout": {
          "description": "Timeout",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Duration"
        },
        "url": {
          "description": "Webhook url to call",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.meta.v1.SecretKeySelector": {
      "description": "A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.",
      "type": "object",
      "properties": {
        "key": {
          "description": "A key in the referenced Secret. Some instances of this field may be defaulted, in others it may be required.",
          "type": "string"
        },
        "name": {
          "description": "The name of the Secret resource being referred to.",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace of the Secret resource being referred to. Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.external-secrets.apis.meta.v1.ServiceAccountSelector": {
      "description": "A reference to a ServiceAccount resource.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "audiences": {
          "description": "Audience specifies the `aud` claim for the service account token If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity then this audiences will be appended to the list",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "name": {
          "description": "The name of the ServiceAccount resource being referred to.",
          "type": "string",
          "default": ""
        },
        "namespace": {
          "description": "Namespace of the resource being referred to. Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.LocalObjectReference": {
      "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        }
      },
      "x-kubernetes-map-type": "atomic",
      "additionalProperties": false
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON": {
      "description": "JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil."
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Duration": {
      "description": "Duration is a wrapper around time.Duration which supports correct marshaling to YAML and JSON. In particular, it marshals into strings, which can be used as map keys in json.",
      "type": "string"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1": {
      "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector": {
      "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
      "type": "object",
      "properties": {
        "matchExpressions": {
          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "matchLabels": {
          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-kubernetes-map-type": "atomic",
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement": {
      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "type": "object",
      "required": [
        "key",
        "operator"
      ],
      "properties": {
        "key": {
          "description": "key is the label key that the selector applies to.",
          "type": "string",
          "default": ""
        },
        "operator": {
          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
          "type": "string",
          "default": ""
        },
        "values": {
          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          },
          "x-kubernetes-list-type": "atomic"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry": {
      "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
          "type": "string"
        },
        "fieldsType": {
          "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
          "type": "string"
        },
        "fieldsV1": {
          "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1"
        },
        "manager": {
          "description": "Manager is an identifier of the workflow managing these fields.",
          "type": "string"
        },
        "operation": {
          "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
          "type": "string"
        },
        "subresource": {
          "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
          "type": "string"
        },
        "time": {
          "description": "Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "type": "integer",
          "format": "int64"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          },
          "x-kubernetes-list-type": "set",
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "type": "integer",
          "format": "int64"
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference"
          },
          "x-kubernetes-list-map-keys": [
            "uid"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference": {
      "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
      "type": "object",
      "required": [
        "apiVersion",
        "kind",
        "name",
        "uid"
      ],
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string",
          "default": ""
        },
        "blockOwnerDeletion": {
          "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
          "type": "boolean"
        },
        "controller": {
          "description": "If true, this reference points to the managing controller.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "default": ""
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
          "type": "string",
          "default": ""
        },
        "uid": {
          "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
          "type": "string",
          "default": ""
        }
      },
      "x-kubernetes-map-type": "atomic",
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Time": {
      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
      "type": "string",
      "format": "date-time"
    },
    "io.k8s.apimachinery.pkg.util.intstr.IntOrString": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "integer"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.api.resource.Quantity": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "number"
        }
      ]
    }
  }
}